LLM PSEUDO-PATCH CONTEXT DUMP
=================================
Generated on: Fri May 23 02:47:15 PM CEST 2025
Project Directory: /home/adam/projects/xfce4-newtonmenu-plugin
Script: llmcontextdump
Output File: /home/adam/projects/xfce4-newtonmenu-plugin/xfce4-newtonmenu-plugin-20250523-144715_llm_context.txt

Purpose:
This file provides a structured context of the project's source code.
It is intended to assist Large Language Models (LLMs) in understanding the codebase,
identifying specific code sections by file and line number, and formulating
pseudo-patches or code modification suggestions.

LLM INSTRUCTIONS FOR PSEUDO-PATCHES:
---------------------------------
When suggesting code modifications, please adhere to the following pseudo-patch format.
This format allows for clear, line-number-specific changes.
If a file needs to be created or deleted, clearly state that.

Format for modifications (e.g., adding, modifying, deleting lines):
--- Pseudo-Patch START (File: <relative/path/to/file>) ---
@@ <start_line_number_in_original> <end_line_number_in_original> @@
  // Context lines (existing lines before and after changes)
  // For modifications: lines to be removed are prefixed with '-'
- <old_line_content>
- <another_old_line_content>
  // For additions: lines to be added are prefixed with '+'
+ <new_line_content>
+ <another_new_line_content>
  // Context lines (existing lines after changes)
--- Pseudo-Patch END ---

Example for modifying lines 10-12 and adding a line at 13 in :
--- Pseudo-Patch START (File: src/main.cpp) ---
@@ 10 13 @@
  void setup() {
-   Serial.begin(9600);
+   // Initialize serial communication at 115200 baud
+   Serial.begin(115200);
    pinMode(LED_BUILTIN, OUTPUT);
+   // New configuration added here
  }
--- Pseudo-Patch END ---

Example for deleting lines 5-6 in :
--- Pseudo-Patch START (File: config.ini) ---
@@ 4 7 @@
 [Database]
-host=localhost
-port=5432
 user=admin
--- Pseudo-Patch END ---

Example for creating a new file :
--- Pseudo-Patch START (File: src/utils.h) ---
@@ NEW FILE @@
#ifndef UTILS_H
#define UTILS_H

void print_message(const char* msg);

#endif // UTILS_H
--- Pseudo-Patch END ---

Example for deleting a file :
--- Pseudo-Patch START (File: old_script.py) ---
@@ DELETE FILE @@
--- Pseudo-Patch END ---

Always provide a brief natural language explanation or summary for each patch.
=================================

PROJECT STRUCTURE (Top 3 levels, filtered):
=================================
./
├── AUTHORS
├── autogen.sh*
├── configure.ac
├── .continue/
├── continue.config.json
├── COPYING
├── COPYING.LIB
├── external/
│   └── vala-panel-appmenu/
│       ├── applets/
│       ├── .clang-format
│       ├── data/
│       ├── .gitattributes
│       ├── .gitignore
│       ├── .gitlab-ci.yml
│       ├── .gitmodules
│       ├── lib/
│       ├── LICENSE
│       ├── meson.build
│       ├── meson_options.txt
│       ├── po/
│       ├── README.md
│       ├── subprojects/
│       └── vapi/
├── .gitignore
├── .gitlab-ci.yml
├── .gitmodules
├── icons/
│   ├── 256x256/
│   │   ├── Makefile.am
│   │   └── xfce4-newtonmenu-plugin.png
│   ├── Makefile.am
│   ├── meson.build
│   └── scalable/
│       ├── Makefile.am
│       └── xfce4-newtonmenu-plugin.svg
├── image.png
├── lib/
│   └── appmenu/
├── Makefile.am
├── meson.build
├── NEWS
├── panel-plugin/
│   ├── appmenu/
│   ├── Makefile.am
│   ├── meson.build
│   ├── newtonmenu.c
│   ├── newtonmenu.desktop.in
│   ├── newtonmenu-dialogs.c
│   ├── newtonmenu-dialogs.h
│   ├── newtonmenu-dialog.ui
│   ├── newtonmenu-force-quit-dialog.c
│   ├── newtonmenu-force-quit-dialog.h
│   ├── newtonmenu-force-quit-dialog.ui
│   ├── newtonmenu.gresource.xml
│   └── newtonmenu.h
├── po/
│   ├── ar.po
│   ├── ast.po
│   ├── be.po
│   ├── bg.po
│   ├── ca.po
│   ├── cs.po
│   ├── da.po
│   ├── de.po
│   ├── el.po
│   ├── en_AU.po
│   ├── en_CA.po
│   ├── en_GB.po
│   ├── es.po
│   ├── et.po
│   ├── eu.po
│   ├── fi.po
│   ├── fr.po
│   ├── ga.po
│   ├── gl.po
│   ├── he.po
│   ├── hi.po
│   ├── hr.po
│   ├── hu.po
│   ├── hy_AM.po
│   ├── hye.po
│   ├── id.po
│   ├── ie.po
│   ├── is.po
│   ├── it.po
│   ├── ja.po
│   ├── ko.po
│   ├── LINGUAS
│   ├── lt.po
│   ├── Makevars
│   ├── meson.build
│   ├── ms.po
│   ├── nb.po
│   ├── nl.po
│   ├── pl.po
│   ├── POTFILES.in
│   ├── pt_BR.po
│   ├── pt.po
│   ├── ro.po
│   ├── ru.po
│   ├── sk.po
│   ├── sl.po
│   ├── sq.po
│   ├── sr.po
│   ├── sv.po
│   ├── tr.po
│   ├── uk.po
│   ├── zh_CN.po
│   └── zh_TW.po
├── README.md
├── THANKS
├── TODO
├── xfce4-newtonmenu-plugin-20250523-144715_llm_context.txt
└── xfce-revision.h.in

=================================
=================================


File: AUTHORS
--------------------------------------------------------------------------------
     1	John Doo <john@foo.org>
--------------------------------------------------------------------------------

File: autogen.sh
--------------------------------------------------------------------------------
     1	#!/bin/sh
     2	
     3	type xdt-autogen >/dev/null 2>&1 || {
     4	  cat >&2 <<EOF
     5	autogen.sh: You don't seem to have the Xfce development tools installed on
     6	            your system, which are required to build this software.
     7	            Please install the xfce4-dev-tools package first, it is available
     8	            from your distribution or https://www.xfce.org/.
     9	EOF
    10	  exit 1
    11	}
    12	
    13	XDT_AUTOGEN_REQUIRED_VERSION="4.17.0" exec xdt-autogen "$@"
--------------------------------------------------------------------------------

File: configure.ac
--------------------------------------------------------------------------------
     1	dnl
     2	dnl xfce4-newtonmenu-plugin - A newtonmenu plugin for the Xfce panel
     3	dnl
     4	dnl 2023 John Doo <john@example.org>
     5	dnl
     6	
     7	dnl ***************************
     8	dnl *** Version information ***
     9	dnl ***************************
    10	m4_define([copyright_year], [2025])
    11	XDT_VERSION_INIT([0.0.4], [git])
    12	dnl ***************************
    13	dnl *** Initialize autoconf ***
    14	dnl ***************************
    15	AC_COPYRIGHT([Copyright (C) 2006-copyright_year()
    16	        The Xfce development team. All rights reserved.])
    17	AC_INIT([xfce4-newtonmenu-plugin], [xdt_version], [https://gitlab.xfce.org/panel-plugins/xfce4-newtonmenu-plugin], [xfce4-newtonmenu-plugin])
    18	AC_PREREQ([2.69])
    19	AC_REVISION([xdt_version_build])
    20	AC_CONFIG_MACRO_DIRS([m4])
    21	AC_DEFINE([VERSION_FULL], [PACKAGE_VERSION], [Alias for VERSION and PACKAGE_VERSION for meson compatibility])
    22	COPYRIGHT_YEAR=copyright_year()
    23	AC_DEFINE_UNQUOTED([COPYRIGHT_YEAR], ["$COPYRIGHT_YEAR"], [Copyright year])
    24	AC_SUBST([COPYRIGHT_YEAR])
    25	
    26	dnl ***************************
    27	dnl *** Initialize automake ***
    28	dnl ***************************
    29	AM_INIT_AUTOMAKE([1.15 no-dist-gzip dist-bzip2 tar-ustar foreign])
    30	AC_CONFIG_HEADERS([config.h])
    31	AM_MAINTAINER_MODE()
    32	AM_SILENT_RULES([yes])
    33	
    34	dnl **************************
    35	dnl *** Initialize libtool ***
    36	dnl **************************
    37	LT_PREREQ([2.2.6])
    38	LT_INIT([disable-static])
    39	
    40	dnl ********************************
    41	dnl *** Check for basic programs ***
    42	dnl ********************************
    43	AC_PROG_CC()
    44	AC_PROG_CC_C_O()
    45	AC_PROG_INSTALL()
    46	
    47	dnl **********************************
    48	dnl *** Check for standard headers ***
    49	dnl **********************************
    50	AC_CHECK_HEADERS([stdlib.h unistd.h locale.h stdio.h errno.h time.h string.h \
    51	                  math.h sys/types.h sys/wait.h memory.h signal.h sys/prctl.h])
    52	
    53	dnl ******************************
    54	dnl *** Check for i18n support ***
    55	dnl ******************************
    56	AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE], ["$PACKAGE"], [Name of default gettext domain])
    57	AC_SUBST([GETTEXT_PACKAGE])
    58	AM_GNU_GETTEXT([external])
    59	AM_GNU_GETTEXT_VERSION([0.19.8])
    60	
    61	dnl ***********************************
    62	dnl *** Check for required packages ***
    63	dnl ***********************************
    64	XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [2.66.0])
    65	XDT_CHECK_PACKAGE([GTK], [gtk+-3.0], [3.24.0])
    66	XDT_CHECK_PACKAGE([LIBXFCE4UI], [libxfce4ui-2], [4.16.0])
    67	XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0], [4.16.0])
    68	XDT_CHECK_PACKAGE([LIBXFCE4PANEL], [libxfce4panel-2.0], [4.16.0])
    69	
    70	dnl ***********************************
    71	dnl *** Check for debugging support ***
    72	dnl ***********************************
    73	XDT_FEATURE_DEBUG([xdt_debug_default])
    74	
    75	dnl *********************************
    76	dnl *** Substitute platform flags ***
    77	dnl *********************************
    78	AC_MSG_CHECKING([PLATFORM_CPPFLAGS])
    79	AC_MSG_RESULT([$PLATFORM_CPPFLAGS])
    80	AC_SUBST([PLATFORM_CPPFLAGS])
    81	AC_MSG_CHECKING([PLATFORM_CFLAGS])
    82	AC_MSG_RESULT([$PLATFORM_CFLAGS])
    83	AC_SUBST([PLATFORM_CFLAGS])
    84	AC_MSG_CHECKING([PLATFORM_LDFLAGS])
    85	AC_MSG_RESULT([$PLATFORM_LDFLAGS])
    86	AC_SUBST([PLATFORM_LDFLAGS])
    87	
    88	AC_CONFIG_FILES([
    89	Makefile
    90	icons/Makefile
    91	icons/48x48/Makefile
    92	icons/scalable/Makefile
    93	panel-plugin/Makefile
    94	po/Makefile.in
    95	])
    96	AC_OUTPUT
    97	
    98	dnl ***************************
    99	dnl *** Print configuration ***
   100	dnl ***************************
   101	echo
   102	echo "Build Configuration:"
   103	echo
   104	echo "* Debug Support:    $enable_debug"
   105	echo
--------------------------------------------------------------------------------

File: continue.config.json
--------------------------------------------------------------------------------
     1	{
     2	  "$schema": "https://continue.dev/schema/continue.config.schema.json",
     3	  "models": [
     4	    {
     5	      "title": "Local DeepSeek",
     6	      "model": "deepseek-coder-v2-lite-instruct-i1",
     7	      "provider": "openai",
     8	      "apiBase": "http://localhost:1234/v1",
     9	      "apiKey": ""
    10	    },
    11	    {
    12	      "title": "Gemini Pro",
    13	      "model": "gemini-1.5-pro-preview-0514",
    14	      "provider": "gemini",
    15	      "apiKey": "your-api-key-here"
    16	    }
    17	  ],
    18	  "contextProviders": [
    19	    {
    20	      "title": "Project Files",
    21	      "provider": "file",
    22	      "directory": "./",
    23	      "exclude": ["node_modules", "build", ".git"]
    24	    }
    25	  ]
    26	}
    27	
--------------------------------------------------------------------------------

File: .continue/docs/new-doc.yaml
--------------------------------------------------------------------------------
     1	name: New doc
     2	version: 0.0.1
     3	schema: v1
     4	docs:
     5	  - name: New docs
     6	    startUrl: https://docs.continue.dev
--------------------------------------------------------------------------------

File: COPYING
--------------------------------------------------------------------------------
     1	                    GNU GENERAL PUBLIC LICENSE
     2	                       Version 2, June 1991
     3	
     4	 Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
     5	 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
     6	 Everyone is permitted to copy and distribute verbatim copies
     7	 of this license document, but changing it is not allowed.
     8	
     9	                            Preamble
    10	
    11	  The licenses for most software are designed to take away your
    12	freedom to share and change it.  By contrast, the GNU General Public
    13	License is intended to guarantee your freedom to share and change free
    14	software--to make sure the software is free for all its users.  This
    15	General Public License applies to most of the Free Software
    16	Foundation's software and to any other program whose authors commit to
    17	using it.  (Some other Free Software Foundation software is covered by
    18	the GNU Lesser General Public License instead.)  You can apply it to
    19	your programs, too.
    20	
    21	  When we speak of free software, we are referring to freedom, not
    22	price.  Our General Public Licenses are designed to make sure that you
    23	have the freedom to distribute copies of free software (and charge for
    24	this service if you wish), that you receive source code or can get it
    25	if you want it, that you can change the software or use pieces of it
    26	in new free programs; and that you know you can do these things.
    27	
    28	  To protect your rights, we need to make restrictions that forbid
    29	anyone to deny you these rights or to ask you to surrender the rights.
    30	These restrictions translate to certain responsibilities for you if you
    31	distribute copies of the software, or if you modify it.
    32	
    33	  For example, if you distribute copies of such a program, whether
    34	gratis or for a fee, you must give the recipients all the rights that
    35	you have.  You must make sure that they, too, receive or can get the
    36	source code.  And you must show them these terms so they know their
    37	rights.
    38	
    39	  We protect your rights with two steps: (1) copyright the software, and
    40	(2) offer you this license which gives you legal permission to copy,
    41	distribute and/or modify the software.
    42	
    43	  Also, for each author's protection and ours, we want to make certain
    44	that everyone understands that there is no warranty for this free
    45	software.  If the software is modified by someone else and passed on, we
    46	want its recipients to know that what they have is not the original, so
    47	that any problems introduced by others will not reflect on the original
    48	authors' reputations.
    49	
    50	  Finally, any free program is threatened constantly by software
    51	patents.  We wish to avoid the danger that redistributors of a free
    52	program will individually obtain patent licenses, in effect making the
    53	program proprietary.  To prevent this, we have made it clear that any
    54	patent must be licensed for everyone's free use or not licensed at all.
    55	
    56	  The precise terms and conditions for copying, distribution and
    57	modification follow.
    58	
    59	                    GNU GENERAL PUBLIC LICENSE
    60	   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
    61	
    62	  0. This License applies to any program or other work which contains
    63	a notice placed by the copyright holder saying it may be distributed
    64	under the terms of this General Public License.  The "Program", below,
    65	refers to any such program or work, and a "work based on the Program"
    66	means either the Program or any derivative work under copyright law:
    67	that is to say, a work containing the Program or a portion of it,
    68	either verbatim or with modifications and/or translated into another
    69	language.  (Hereinafter, translation is included without limitation in
    70	the term "modification".)  Each licensee is addressed as "you".
    71	
    72	Activities other than copying, distribution and modification are not
    73	covered by this License; they are outside its scope.  The act of
    74	running the Program is not restricted, and the output from the Program
    75	is covered only if its contents constitute a work based on the
    76	Program (independent of having been made by running the Program).
    77	Whether that is true depends on what the Program does.
    78	
    79	  1. You may copy and distribute verbatim copies of the Program's
    80	source code as you receive it, in any medium, provided that you
    81	conspicuously and appropriately publish on each copy an appropriate
    82	copyright notice and disclaimer of warranty; keep intact all the
    83	notices that refer to this License and to the absence of any warranty;
    84	and give any other recipients of the Program a copy of this License
    85	along with the Program.
    86	
    87	You may charge a fee for the physical act of transferring a copy, and
    88	you may at your option offer warranty protection in exchange for a fee.
    89	
    90	  2. You may modify your copy or copies of the Program or any portion
    91	of it, thus forming a work based on the Program, and copy and
    92	distribute such modifications or work under the terms of Section 1
    93	above, provided that you also meet all of these conditions:
    94	
    95	    a) You must cause the modified files to carry prominent notices
    96	    stating that you changed the files and the date of any change.
    97	
    98	    b) You must cause any work that you distribute or publish, that in
    99	    whole or in part contains or is derived from the Program or any
   100	    part thereof, to be licensed as a whole at no charge to all third
   101	    parties under the terms of this License.
   102	
   103	    c) If the modified program normally reads commands interactively
   104	    when run, you must cause it, when started running for such
   105	    interactive use in the most ordinary way, to print or display an
   106	    announcement including an appropriate copyright notice and a
   107	    notice that there is no warranty (or else, saying that you provide
   108	    a warranty) and that users may redistribute the program under
   109	    these conditions, and telling the user how to view a copy of this
   110	    License.  (Exception: if the Program itself is interactive but
   111	    does not normally print such an announcement, your work based on
   112	    the Program is not required to print an announcement.)
   113	
   114	These requirements apply to the modified work as a whole.  If
   115	identifiable sections of that work are not derived from the Program,
   116	and can be reasonably considered independent and separate works in
   117	themselves, then this License, and its terms, do not apply to those
   118	sections when you distribute them as separate works.  But when you
   119	distribute the same sections as part of a whole which is a work based
   120	on the Program, the distribution of the whole must be on the terms of
   121	this License, whose permissions for other licensees extend to the
   122	entire whole, and thus to each and every part regardless of who wrote it.
   123	
   124	Thus, it is not the intent of this section to claim rights or contest
   125	your rights to work written entirely by you; rather, the intent is to
   126	exercise the right to control the distribution of derivative or
   127	collective works based on the Program.
   128	
   129	In addition, mere aggregation of another work not based on the Program
   130	with the Program (or with a work based on the Program) on a volume of
   131	a storage or distribution medium does not bring the other work under
   132	the scope of this License.
   133	
   134	  3. You may copy and distribute the Program (or a work based on it,
   135	under Section 2) in object code or executable form under the terms of
   136	Sections 1 and 2 above provided that you also do one of the following:
   137	
   138	    a) Accompany it with the complete corresponding machine-readable
   139	    source code, which must be distributed under the terms of Sections
   140	    1 and 2 above on a medium customarily used for software interchange; or,
   141	
   142	    b) Accompany it with a written offer, valid for at least three
   143	    years, to give any third party, for a charge no more than your
   144	    cost of physically performing source distribution, a complete
   145	    machine-readable copy of the corresponding source code, to be
   146	    distributed under the terms of Sections 1 and 2 above on a medium
   147	    customarily used for software interchange; or,
   148	
   149	    c) Accompany it with the information you received as to the offer
   150	    to distribute corresponding source code.  (This alternative is
   151	    allowed only for noncommercial distribution and only if you
   152	    received the program in object code or executable form with such
   153	    an offer, in accord with Subsection b above.)
   154	
   155	The source code for a work means the preferred form of the work for
   156	making modifications to it.  For an executable work, complete source
   157	code means all the source code for all modules it contains, plus any
   158	associated interface definition files, plus the scripts used to
   159	control compilation and installation of the executable.  However, as a
   160	special exception, the source code distributed need not include
   161	anything that is normally distributed (in either source or binary
   162	form) with the major components (compiler, kernel, and so on) of the
   163	operating system on which the executable runs, unless that component
   164	itself accompanies the executable.
   165	
   166	If distribution of executable or object code is made by offering
   167	access to copy from a designated place, then offering equivalent
   168	access to copy the source code from the same place counts as
   169	distribution of the source code, even though third parties are not
   170	compelled to copy the source along with the object code.
   171	
   172	  4. You may not copy, modify, sublicense, or distribute the Program
   173	except as expressly provided under this License.  Any attempt
   174	otherwise to copy, modify, sublicense or distribute the Program is
   175	void, and will automatically terminate your rights under this License.
   176	However, parties who have received copies, or rights, from you under
   177	this License will not have their licenses terminated so long as such
   178	parties remain in full compliance.
   179	
   180	  5. You are not required to accept this License, since you have not
   181	signed it.  However, nothing else grants you permission to modify or
   182	distribute the Program or its derivative works.  These actions are
   183	prohibited by law if you do not accept this License.  Therefore, by
   184	modifying or distributing the Program (or any work based on the
   185	Program), you indicate your acceptance of this License to do so, and
   186	all its terms and conditions for copying, distributing or modifying
   187	the Program or works based on it.
   188	
   189	  6. Each time you redistribute the Program (or any work based on the
   190	Program), the recipient automatically receives a license from the
   191	original licensor to copy, distribute or modify the Program subject to
   192	these terms and conditions.  You may not impose any further
   193	restrictions on the recipients' exercise of the rights granted herein.
   194	You are not responsible for enforcing compliance by third parties to
   195	this License.
   196	
   197	  7. If, as a consequence of a court judgment or allegation of patent
   198	infringement or for any other reason (not limited to patent issues),
   199	conditions are imposed on you (whether by court order, agreement or
   200	otherwise) that contradict the conditions of this License, they do not
   201	excuse you from the conditions of this License.  If you cannot
   202	distribute so as to satisfy simultaneously your obligations under this
   203	License and any other pertinent obligations, then as a consequence you
   204	may not distribute the Program at all.  For example, if a patent
   205	license would not permit royalty-free redistribution of the Program by
   206	all those who receive copies directly or indirectly through you, then
   207	the only way you could satisfy both it and this License would be to
   208	refrain entirely from distribution of the Program.
   209	
   210	If any portion of this section is held invalid or unenforceable under
   211	any particular circumstance, the balance of the section is intended to
   212	apply and the section as a whole is intended to apply in other
   213	circumstances.
   214	
   215	It is not the purpose of this section to induce you to infringe any
   216	patents or other property right claims or to contest validity of any
   217	such claims; this section has the sole purpose of protecting the
   218	integrity of the free software distribution system, which is
   219	implemented by public license practices.  Many people have made
   220	generous contributions to the wide range of software distributed
   221	through that system in reliance on consistent application of that
   222	system; it is up to the author/donor to decide if he or she is willing
   223	to distribute software through any other system and a licensee cannot
   224	impose that choice.
   225	
   226	This section is intended to make thoroughly clear what is believed to
   227	be a consequence of the rest of this License.
   228	
   229	  8. If the distribution and/or use of the Program is restricted in
   230	certain countries either by patents or by copyrighted interfaces, the
   231	original copyright holder who places the Program under this License
   232	may add an explicit geographical distribution limitation excluding
   233	those countries, so that distribution is permitted only in or among
   234	countries not thus excluded.  In such case, this License incorporates
   235	the limitation as if written in the body of this License.
   236	
   237	  9. The Free Software Foundation may publish revised and/or new versions
   238	of the General Public License from time to time.  Such new versions will
   239	be similar in spirit to the present version, but may differ in detail to
   240	address new problems or concerns.
   241	
   242	Each version is given a distinguishing version number.  If the Program
   243	specifies a version number of this License which applies to it and "any
   244	later version", you have the option of following the terms and conditions
   245	either of that version or of any later version published by the Free
   246	Software Foundation.  If the Program does not specify a version number of
   247	this License, you may choose any version ever published by the Free Software
   248	Foundation.
   249	
   250	  10. If you wish to incorporate parts of the Program into other free
   251	programs whose distribution conditions are different, write to the author
   252	to ask for permission.  For software which is copyrighted by the Free
   253	Software Foundation, write to the Free Software Foundation; we sometimes
   254	make exceptions for this.  Our decision will be guided by the two goals
   255	of preserving the free status of all derivatives of our free software and
   256	of promoting the sharing and reuse of software generally.
   257	
   258	                            NO WARRANTY
   259	
   260	  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
   261	FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
   262	OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
   263	PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
   264	OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   265	MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
   266	TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
   267	PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
   268	REPAIR OR CORRECTION.
   269	
   270	  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
   271	WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
   272	REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
   273	INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
   274	OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
   275	TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
   276	YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
   277	PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
   278	POSSIBILITY OF SUCH DAMAGES.
   279	
   280	                     END OF TERMS AND CONDITIONS
   281	
   282	            How to Apply These Terms to Your New Programs
   283	
   284	  If you develop a new program, and you want it to be of the greatest
   285	possible use to the public, the best way to achieve this is to make it
   286	free software which everyone can redistribute and change under these terms.
   287	
   288	  To do so, attach the following notices to the program.  It is safest
   289	to attach them to the start of each source file to most effectively
   290	convey the exclusion of warranty; and each file should have at least
   291	the "copyright" line and a pointer to where the full notice is found.
   292	
   293	    <one line to give the program's name and a brief idea of what it does.>
   294	    Copyright (C) <year>  <name of author>
   295	
   296	    This program is free software; you can redistribute it and/or modify
   297	    it under the terms of the GNU General Public License as published by
   298	    the Free Software Foundation; either version 2 of the License, or
   299	    (at your option) any later version.
   300	
   301	    This program is distributed in the hope that it will be useful,
   302	    but WITHOUT ANY WARRANTY; without even the implied warranty of
   303	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   304	    GNU General Public License for more details.
   305	
   306	    You should have received a copy of the GNU General Public License along
   307	    with this program; if not, write to the Free Software Foundation, Inc.,
   308	    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
   309	
   310	Also add information on how to contact you by electronic and paper mail.
   311	
   312	If the program is interactive, make it output a short notice like this
   313	when it starts in an interactive mode:
   314	
   315	    Gnomovision version 69, Copyright (C) year name of author
   316	    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
   317	    This is free software, and you are welcome to redistribute it
   318	    under certain conditions; type `show c' for details.
   319	
   320	The hypothetical commands `show w' and `show c' should show the appropriate
   321	parts of the General Public License.  Of course, the commands you use may
   322	be called something other than `show w' and `show c'; they could even be
   323	mouse-clicks or menu items--whatever suits your program.
   324	
   325	You should also get your employer (if you work as a programmer) or your
   326	school, if any, to sign a "copyright disclaimer" for the program, if
   327	necessary.  Here is a sample; alter the names:
   328	
   329	  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
   330	  `Gnomovision' (which makes passes at compilers) written by James Hacker.
   331	
   332	  <signature of Ty Coon>, 1 April 1989
   333	  Ty Coon, President of Vice
   334	
   335	This General Public License does not permit incorporating your program into
   336	proprietary programs.  If your program is a subroutine library, you may
   337	consider it more useful to permit linking proprietary applications with the
   338	library.  If this is what you want to do, use the GNU Lesser General
   339	Public License instead of this License.
--------------------------------------------------------------------------------

File: COPYING.LIB
--------------------------------------------------------------------------------
     1	                  GNU LIBRARY GENERAL PUBLIC LICENSE
     2	                       Version 2, June 1991
     3	
     4	 Copyright (C) 1991 Free Software Foundation, Inc.
     5	 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
     6	 Everyone is permitted to copy and distribute verbatim copies
     7	 of this license document, but changing it is not allowed.
     8	
     9	[This is the first released version of the library GPL.  It is
    10	 numbered 2 because it goes with version 2 of the ordinary GPL.]
    11	
    12	                            Preamble
    13	
    14	  The licenses for most software are designed to take away your
    15	freedom to share and change it.  By contrast, the GNU General Public
    16	Licenses are intended to guarantee your freedom to share and change
    17	free software--to make sure the software is free for all its users.
    18	
    19	  This license, the Library General Public License, applies to some
    20	specially designated Free Software Foundation software, and to any
    21	other libraries whose authors decide to use it.  You can use it for
    22	your libraries, too.
    23	
    24	  When we speak of free software, we are referring to freedom, not
    25	price.  Our General Public Licenses are designed to make sure that you
    26	have the freedom to distribute copies of free software (and charge for
    27	this service if you wish), that you receive source code or can get it
    28	if you want it, that you can change the software or use pieces of it
    29	in new free programs; and that you know you can do these things.
    30	
    31	  To protect your rights, we need to make restrictions that forbid
    32	anyone to deny you these rights or to ask you to surrender the rights.
    33	These restrictions translate to certain responsibilities for you if
    34	you distribute copies of the library, or if you modify it.
    35	
    36	  For example, if you distribute copies of the library, whether gratis
    37	or for a fee, you must give the recipients all the rights that we gave
    38	you.  You must make sure that they, too, receive or can get the source
    39	code.  If you link a program with the library, you must provide
    40	complete object files to the recipients so that they can relink them
    41	with the library, after making changes to the library and recompiling
    42	it.  And you must show them these terms so they know their rights.
    43	
    44	  Our method of protecting your rights has two steps: (1) copyright
    45	the library, and (2) offer you this license which gives you legal
    46	permission to copy, distribute and/or modify the library.
    47	
    48	  Also, for each distributor's protection, we want to make certain
    49	that everyone understands that there is no warranty for this free
    50	library.  If the library is modified by someone else and passed on, we
    51	want its recipients to know that what they have is not the original
    52	version, so that any problems introduced by others will not reflect on
    53	the original authors' reputations.
    54	
    55	  Finally, any free program is threatened constantly by software
    56	patents.  We wish to avoid the danger that companies distributing free
    57	software will individually obtain patent licenses, thus in effect
    58	transforming the program into proprietary software.  To prevent this,
    59	we have made it clear that any patent must be licensed for everyone's
    60	free use or not licensed at all.
    61	
    62	  Most GNU software, including some libraries, is covered by the ordinary
    63	GNU General Public License, which was designed for utility programs.  This
    64	license, the GNU Library General Public License, applies to certain
    65	designated libraries.  This license is quite different from the ordinary
    66	one; be sure to read it in full, and don't assume that anything in it is
    67	the same as in the ordinary license.
    68	
    69	  The reason we have a separate public license for some libraries is that
    70	they blur the distinction we usually make between modifying or adding to a
    71	program and simply using it.  Linking a program with a library, without
    72	changing the library, is in some sense simply using the library, and is
    73	analogous to running a utility program or application program.  However, in
    74	a textual and legal sense, the linked executable is a combined work, a
    75	derivative of the original library, and the ordinary General Public License
    76	treats it as such.
    77	
    78	  Because of this blurred distinction, using the ordinary General
    79	Public License for libraries did not effectively promote software
    80	sharing, because most developers did not use the libraries.  We
    81	concluded that weaker conditions might promote sharing better.
    82	
    83	  However, unrestricted linking of non-free programs would deprive the
    84	users of those programs of all benefit from the free status of the
    85	libraries themselves.  This Library General Public License is intended to
    86	permit developers of non-free programs to use free libraries, while
    87	preserving your freedom as a user of such programs to change the free
    88	libraries that are incorporated in them.  (We have not seen how to achieve
    89	this as regards changes in header files, but we have achieved it as regards
    90	changes in the actual functions of the Library.)  The hope is that this
    91	will lead to faster development of free libraries.
    92	
    93	  The precise terms and conditions for copying, distribution and
    94	modification follow.  Pay close attention to the difference between a
    95	"work based on the library" and a "work that uses the library".  The
    96	former contains code derived from the library, while the latter only
    97	works together with the library.
    98	
    99	  Note that it is possible for a library to be covered by the ordinary
   100	General Public License rather than by this special one.
   101	
   102	                  GNU LIBRARY GENERAL PUBLIC LICENSE
   103	   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
   104	
   105	  0. This License Agreement applies to any software library which
   106	contains a notice placed by the copyright holder or other authorized
   107	party saying it may be distributed under the terms of this Library
   108	General Public License (also called "this License").  Each licensee is
   109	addressed as "you".
   110	
   111	  A "library" means a collection of software functions and/or data
   112	prepared so as to be conveniently linked with application programs
   113	(which use some of those functions and data) to form executables.
   114	
   115	  The "Library", below, refers to any such software library or work
   116	which has been distributed under these terms.  A "work based on the
   117	Library" means either the Library or any derivative work under
   118	copyright law: that is to say, a work containing the Library or a
   119	portion of it, either verbatim or with modifications and/or translated
   120	straightforwardly into another language.  (Hereinafter, translation is
   121	included without limitation in the term "modification".)
   122	
   123	  "Source code" for a work means the preferred form of the work for
   124	making modifications to it.  For a library, complete source code means
   125	all the source code for all modules it contains, plus any associated
   126	interface definition files, plus the scripts used to control compilation
   127	and installation of the library.
   128	
   129	  Activities other than copying, distribution and modification are not
   130	covered by this License; they are outside its scope.  The act of
   131	running a program using the Library is not restricted, and output from
   132	such a program is covered only if its contents constitute a work based
   133	on the Library (independent of the use of the Library in a tool for
   134	writing it).  Whether that is true depends on what the Library does
   135	and what the program that uses the Library does.
   136	  
   137	  1. You may copy and distribute verbatim copies of the Library's
   138	complete source code as you receive it, in any medium, provided that
   139	you conspicuously and appropriately publish on each copy an
   140	appropriate copyright notice and disclaimer of warranty; keep intact
   141	all the notices that refer to this License and to the absence of any
   142	warranty; and distribute a copy of this License along with the
   143	Library.
   144	
   145	  You may charge a fee for the physical act of transferring a copy,
   146	and you may at your option offer warranty protection in exchange for a
   147	fee.
   148	
   149	  2. You may modify your copy or copies of the Library or any portion
   150	of it, thus forming a work based on the Library, and copy and
   151	distribute such modifications or work under the terms of Section 1
   152	above, provided that you also meet all of these conditions:
   153	
   154	    a) The modified work must itself be a software library.
   155	
   156	    b) You must cause the files modified to carry prominent notices
   157	    stating that you changed the files and the date of any change.
   158	
   159	    c) You must cause the whole of the work to be licensed at no
   160	    charge to all third parties under the terms of this License.
   161	
   162	    d) If a facility in the modified Library refers to a function or a
   163	    table of data to be supplied by an application program that uses
   164	    the facility, other than as an argument passed when the facility
   165	    is invoked, then you must make a good faith effort to ensure that,
   166	    in the event an application does not supply such function or
   167	    table, the facility still operates, and performs whatever part of
   168	    its purpose remains meaningful.
   169	
   170	    (For example, a function in a library to compute square roots has
   171	    a purpose that is entirely well-defined independent of the
   172	    application.  Therefore, Subsection 2d requires that any
   173	    application-supplied function or table used by this function must
   174	    be optional: if the application does not supply it, the square
   175	    root function must still compute square roots.)
   176	
   177	These requirements apply to the modified work as a whole.  If
   178	identifiable sections of that work are not derived from the Library,
   179	and can be reasonably considered independent and separate works in
   180	themselves, then this License, and its terms, do not apply to those
   181	sections when you distribute them as separate works.  But when you
   182	distribute the same sections as part of a whole which is a work based
   183	on the Library, the distribution of the whole must be on the terms of
   184	this License, whose permissions for other licensees extend to the
   185	entire whole, and thus to each and every part regardless of who wrote
   186	it.
   187	
   188	Thus, it is not the intent of this section to claim rights or contest
   189	your rights to work written entirely by you; rather, the intent is to
   190	exercise the right to control the distribution of derivative or
   191	collective works based on the Library.
   192	
   193	In addition, mere aggregation of another work not based on the Library
   194	with the Library (or with a work based on the Library) on a volume of
   195	a storage or distribution medium does not bring the other work under
   196	the scope of this License.
   197	
   198	  3. You may opt to apply the terms of the ordinary GNU General Public
   199	License instead of this License to a given copy of the Library.  To do
   200	this, you must alter all the notices that refer to this License, so
   201	that they refer to the ordinary GNU General Public License, version 2,
   202	instead of to this License.  (If a newer version than version 2 of the
   203	ordinary GNU General Public License has appeared, then you can specify
   204	that version instead if you wish.)  Do not make any other change in
   205	these notices.
   206	
   207	  Once this change is made in a given copy, it is irreversible for
   208	that copy, so the ordinary GNU General Public License applies to all
   209	subsequent copies and derivative works made from that copy.
   210	
   211	  This option is useful when you wish to copy part of the code of
   212	the Library into a program that is not a library.
   213	
   214	  4. You may copy and distribute the Library (or a portion or
   215	derivative of it, under Section 2) in object code or executable form
   216	under the terms of Sections 1 and 2 above provided that you accompany
   217	it with the complete corresponding machine-readable source code, which
   218	must be distributed under the terms of Sections 1 and 2 above on a
   219	medium customarily used for software interchange.
   220	
   221	  If distribution of object code is made by offering access to copy
   222	from a designated place, then offering equivalent access to copy the
   223	source code from the same place satisfies the requirement to
   224	distribute the source code, even though third parties are not
   225	compelled to copy the source along with the object code.
   226	
   227	  5. A program that contains no derivative of any portion of the
   228	Library, but is designed to work with the Library by being compiled or
   229	linked with it, is called a "work that uses the Library".  Such a
   230	work, in isolation, is not a derivative work of the Library, and
   231	therefore falls outside the scope of this License.
   232	
   233	  However, linking a "work that uses the Library" with the Library
   234	creates an executable that is a derivative of the Library (because it
   235	contains portions of the Library), rather than a "work that uses the
   236	library".  The executable is therefore covered by this License.
   237	Section 6 states terms for distribution of such executables.
   238	
   239	  When a "work that uses the Library" uses material from a header file
   240	that is part of the Library, the object code for the work may be a
   241	derivative work of the Library even though the source code is not.
   242	Whether this is true is especially significant if the work can be
   243	linked without the Library, or if the work is itself a library.  The
   244	threshold for this to be true is not precisely defined by law.
   245	
   246	  If such an object file uses only numerical parameters, data
   247	structure layouts and accessors, and small macros and small inline
   248	functions (ten lines or less in length), then the use of the object
   249	file is unrestricted, regardless of whether it is legally a derivative
   250	work.  (Executables containing this object code plus portions of the
   251	Library will still fall under Section 6.)
   252	
   253	  Otherwise, if the work is a derivative of the Library, you may
   254	distribute the object code for the work under the terms of Section 6.
   255	Any executables containing that work also fall under Section 6,
   256	whether or not they are linked directly with the Library itself.
   257	
   258	  6. As an exception to the Sections above, you may also compile or
   259	link a "work that uses the Library" with the Library to produce a
   260	work containing portions of the Library, and distribute that work
   261	under terms of your choice, provided that the terms permit
   262	modification of the work for the customer's own use and reverse
   263	engineering for debugging such modifications.
   264	
   265	  You must give prominent notice with each copy of the work that the
   266	Library is used in it and that the Library and its use are covered by
   267	this License.  You must supply a copy of this License.  If the work
   268	during execution displays copyright notices, you must include the
   269	copyright notice for the Library among them, as well as a reference
   270	directing the user to the copy of this License.  Also, you must do one
   271	of these things:
   272	
   273	    a) Accompany the work with the complete corresponding
   274	    machine-readable source code for the Library including whatever
   275	    changes were used in the work (which must be distributed under
   276	    Sections 1 and 2 above); and, if the work is an executable linked
   277	    with the Library, with the complete machine-readable "work that
   278	    uses the Library", as object code and/or source code, so that the
   279	    user can modify the Library and then relink to produce a modified
   280	    executable containing the modified Library.  (It is understood
   281	    that the user who changes the contents of definitions files in the
   282	    Library will not necessarily be able to recompile the application
   283	    to use the modified definitions.)
   284	
   285	    b) Accompany the work with a written offer, valid for at
   286	    least three years, to give the same user the materials
   287	    specified in Subsection 6a, above, for a charge no more
   288	    than the cost of performing this distribution.
   289	
   290	    c) If distribution of the work is made by offering access to copy
   291	    from a designated place, offer equivalent access to copy the above
   292	    specified materials from the same place.
   293	
   294	    d) Verify that the user has already received a copy of these
   295	    materials or that you have already sent this user a copy.
   296	
   297	  For an executable, the required form of the "work that uses the
   298	Library" must include any data and utility programs needed for
   299	reproducing the executable from it.  However, as a special exception,
   300	the source code distributed need not include anything that is normally
   301	distributed (in either source or binary form) with the major
   302	components (compiler, kernel, and so on) of the operating system on
   303	which the executable runs, unless that component itself accompanies
   304	the executable.
   305	
   306	  It may happen that this requirement contradicts the license
   307	restrictions of other proprietary libraries that do not normally
   308	accompany the operating system.  Such a contradiction means you cannot
   309	use both them and the Library together in an executable that you
   310	distribute.
   311	
   312	  7. You may place library facilities that are a work based on the
   313	Library side-by-side in a single library together with other library
   314	facilities not covered by this License, and distribute such a combined
   315	library, provided that the separate distribution of the work based on
   316	the Library and of the other library facilities is otherwise
   317	permitted, and provided that you do these two things:
   318	
   319	    a) Accompany the combined library with a copy of the same work
   320	    based on the Library, uncombined with any other library
   321	    facilities.  This must be distributed under the terms of the
   322	    Sections above.
   323	
   324	    b) Give prominent notice with the combined library of the fact
   325	    that part of it is a work based on the Library, and explaining
   326	    where to find the accompanying uncombined form of the same work.
   327	
   328	  8. You may not copy, modify, sublicense, link with, or distribute
   329	the Library except as expressly provided under this License.  Any
   330	attempt otherwise to copy, modify, sublicense, link with, or
   331	distribute the Library is void, and will automatically terminate your
   332	rights under this License.  However, parties who have received copies,
   333	or rights, from you under this License will not have their licenses
   334	terminated so long as such parties remain in full compliance.
   335	
   336	  9. You are not required to accept this License, since you have not
   337	signed it.  However, nothing else grants you permission to modify or
   338	distribute the Library or its derivative works.  These actions are
   339	prohibited by law if you do not accept this License.  Therefore, by
   340	modifying or distributing the Library (or any work based on the
   341	Library), you indicate your acceptance of this License to do so, and
   342	all its terms and conditions for copying, distributing or modifying
   343	the Library or works based on it.
   344	
   345	  10. Each time you redistribute the Library (or any work based on the
   346	Library), the recipient automatically receives a license from the
   347	original licensor to copy, distribute, link with or modify the Library
   348	subject to these terms and conditions.  You may not impose any further
   349	restrictions on the recipients' exercise of the rights granted herein.
   350	You are not responsible for enforcing compliance by third parties to
   351	this License.
   352	
   353	  11. If, as a consequence of a court judgment or allegation of patent
   354	infringement or for any other reason (not limited to patent issues),
   355	conditions are imposed on you (whether by court order, agreement or
   356	otherwise) that contradict the conditions of this License, they do not
   357	excuse you from the conditions of this License.  If you cannot
   358	distribute so as to satisfy simultaneously your obligations under this
   359	License and any other pertinent obligations, then as a consequence you
   360	may not distribute the Library at all.  For example, if a patent
   361	license would not permit royalty-free redistribution of the Library by
   362	all those who receive copies directly or indirectly through you, then
   363	the only way you could satisfy both it and this License would be to
   364	refrain entirely from distribution of the Library.
   365	
   366	If any portion of this section is held invalid or unenforceable under any
   367	particular circumstance, the balance of the section is intended to apply,
   368	and the section as a whole is intended to apply in other circumstances.
   369	
   370	It is not the purpose of this section to induce you to infringe any
   371	patents or other property right claims or to contest validity of any
   372	such claims; this section has the sole purpose of protecting the
   373	integrity of the free software distribution system which is
   374	implemented by public license practices.  Many people have made
   375	generous contributions to the wide range of software distributed
   376	through that system in reliance on consistent application of that
   377	system; it is up to the author/donor to decide if he or she is willing
   378	to distribute software through any other system and a licensee cannot
   379	impose that choice.
   380	
   381	This section is intended to make thoroughly clear what is believed to
   382	be a consequence of the rest of this License.
   383	
   384	  12. If the distribution and/or use of the Library is restricted in
   385	certain countries either by patents or by copyrighted interfaces, the
   386	original copyright holder who places the Library under this License may add
   387	an explicit geographical distribution limitation excluding those countries,
   388	so that distribution is permitted only in or among countries not thus
   389	excluded.  In such case, this License incorporates the limitation as if
   390	written in the body of this License.
   391	
   392	  13. The Free Software Foundation may publish revised and/or new
   393	versions of the Library General Public License from time to time.
   394	Such new versions will be similar in spirit to the present version,
   395	but may differ in detail to address new problems or concerns.
   396	
   397	Each version is given a distinguishing version number.  If the Library
   398	specifies a version number of this License which applies to it and
   399	"any later version", you have the option of following the terms and
   400	conditions either of that version or of any later version published by
   401	the Free Software Foundation.  If the Library does not specify a
   402	license version number, you may choose any version ever published by
   403	the Free Software Foundation.
   404	
   405	  14. If you wish to incorporate parts of the Library into other free
   406	programs whose distribution conditions are incompatible with these,
   407	write to the author to ask for permission.  For software which is
   408	copyrighted by the Free Software Foundation, write to the Free
   409	Software Foundation; we sometimes make exceptions for this.  Our
   410	decision will be guided by the two goals of preserving the free status
   411	of all derivatives of our free software and of promoting the sharing
   412	and reuse of software generally.
   413	
   414	                            NO WARRANTY
   415	
   416	  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
   417	WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
   418	EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
   419	OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
   420	KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
   421	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
   422	PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
   423	LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
   424	THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
   425	
   426	  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
   427	WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
   428	AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
   429	FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
   430	CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
   431	LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
   432	RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
   433	FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
   434	SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
   435	DAMAGES.
   436	
   437	                     END OF TERMS AND CONDITIONS
   438	
   439	           How to Apply These Terms to Your New Libraries
   440	
   441	  If you develop a new library, and you want it to be of the greatest
   442	possible use to the public, we recommend making it free software that
   443	everyone can redistribute and change.  You can do so by permitting
   444	redistribution under these terms (or, alternatively, under the terms of the
   445	ordinary General Public License).
   446	
   447	  To apply these terms, attach the following notices to the library.  It is
   448	safest to attach them to the start of each source file to most effectively
   449	convey the exclusion of warranty; and each file should have at least the
   450	"copyright" line and a pointer to where the full notice is found.
   451	
   452	    <one line to give the library's name and a brief idea of what it does.>
   453	    Copyright (C) <year>  <name of author>
   454	
   455	    This library is free software; you can redistribute it and/or
   456	    modify it under the terms of the GNU Library General Public
   457	    License as published by the Free Software Foundation; either
   458	    version 2 of the License, or (at your option) any later version.
   459	
   460	    This library is distributed in the hope that it will be useful,
   461	    but WITHOUT ANY WARRANTY; without even the implied warranty of
   462	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   463	    Library General Public License for more details.
   464	
   465	    You should have received a copy of the GNU Library General Public
   466	    License along with this library; if not, write to the Free Software
   467	    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
   468	
   469	Also add information on how to contact you by electronic and paper mail.
   470	
   471	You should also get your employer (if you work as a programmer) or your
   472	school, if any, to sign a "copyright disclaimer" for the library, if
   473	necessary.  Here is a sample; alter the names:
   474	
   475	  Yoyodyne, Inc., hereby disclaims all copyright interest in the
   476	  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
   477	
   478	  <signature of Ty Coon>, 1 April 1990
   479	  Ty Coon, President of Vice
   480	
   481	That's all there is to it!
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/applets/budgie-plugin-appmenu.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2015 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using Gtk;
    20	using GLib;
    21	using Budgie;
    22	
    23	public class AppmenuApplet : Plugin, Peas.ExtensionBase
    24	{
    25	    public Applet get_panel_widget(string uid)
    26	    {
    27	        return new GlobalMenuApplet(uid);
    28	    }
    29	}
    30	public class GlobalMenuApplet: Applet
    31	{
    32	    public string uuid { public set ; public get; }
    33	    private void add_budgie_style(Gtk.Bin layout)
    34	    {
    35	        layout.get_child().notify.connect((pspec)=>{
    36	            foreach(unowned Gtk.Widget ch in (layout.get_child() as Container).get_children())
    37	            {
    38	                unowned Gtk.StyleContext context = ch.get_style_context();
    39	                context.add_class("budgie-menubar");
    40	            }
    41	        });
    42	        foreach(unowned Gtk.Widget ch in (layout.get_child() as Container).get_children())
    43	        {
    44	            unowned Gtk.StyleContext context = ch.get_style_context();
    45	            context.add_class("budgie-menubar");
    46	        }
    47	    }
    48	    public override Widget? get_settings_ui()
    49	    {
    50	        var dlg = new Gtk.Box(Gtk.Orientation.VERTICAL,0);
    51	        var entry = new CheckButton.with_label(dgettext(Config.GETTEXT_PACKAGE,"Use Compact mode (all menus in application menu)"));
    52	        this.settings.bind(Key.COMPACT_MODE,entry,"active",SettingsBindFlags.DEFAULT);
    53	        dlg.pack_start(entry,false,false,2);
    54	        entry = new CheckButton.with_label(dgettext(Config.GETTEXT_PACKAGE,"Use bold application name"));
    55	        this.settings.bind(Key.BOLD_APPLICATION_NAME,entry,"active",SettingsBindFlags.DEFAULT);
    56	        dlg.pack_start(entry,false,false,2);
    57	        dlg.show();
    58	        return dlg;
    59	    }
    60	    public override bool supports_settings()
    61	    {
    62	        return true;
    63	    }
    64	    public GlobalMenuApplet (string uuid)
    65	    {
    66	        Object(uuid: uuid);
    67	        settings_schema = "org.valapanel.appmenu";
    68	        settings_prefix = "/com/solus-project/budgie-panel/instance/appmenu";
    69	        settings = get_applet_settings(uuid);
    70	        var layout = new Appmenu.MenuWidget();
    71	        layout.add.connect_after((w)=>{
    72	            add_budgie_style(layout);
    73	        });
    74	        settings.bind(Key.COMPACT_MODE,layout,Key.COMPACT_MODE,SettingsBindFlags.DEFAULT);
    75	        settings.bind(Key.BOLD_APPLICATION_NAME,layout,Key.BOLD_APPLICATION_NAME,SettingsBindFlags.DEFAULT);
    76	        this.add(layout);
    77	        this.hexpand_set = true;
    78	        this.vexpand_set = true;
    79	        add_budgie_style(layout);
    80	        layout.show();
    81	        this.show();
    82	    }
    83	    private GLib.Settings settings;
    84	} // End class
    85	
    86	[ModuleInit]
    87	public void peas_register_types(TypeModule module)
    88	{
    89	    // boilerplate - all modules need this
    90	    var objmodule = module as Peas.ObjectModule;
    91	    objmodule.register_extension_type(typeof(Budgie.Plugin), typeof(AppmenuApplet));
    92	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/applets/mate-plugin-appmenu.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2016 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using Gtk;
    20	using GLib;
    21	using Appmenu;
    22	private bool factory_callback(MatePanel.Applet applet, string iid)
    23	{
    24	    if (iid != "AppmenuApplet") {
    25	        return false;
    26	    }
    27	    applet.flags = MatePanel.AppletFlags.HAS_HANDLE | MatePanel.AppletFlags.EXPAND_MAJOR | MatePanel.AppletFlags.EXPAND_MINOR;
    28	    var layout = new Appmenu.MenuWidget();
    29	    var settings = MatePanel.AppletSettings.@new(applet,"org.valapanel.appmenu");
    30	    settings.bind(Key.COMPACT_MODE,layout,Key.COMPACT_MODE,SettingsBindFlags.DEFAULT);
    31	    settings.bind(Key.BOLD_APPLICATION_NAME,layout,Key.BOLD_APPLICATION_NAME,SettingsBindFlags.DEFAULT);
    32	    applet.add(layout);
    33	    layout.show();
    34	    applet.show();
    35	    var action_group = new Gtk.ActionGroup ("AppmenuApplet Menu Actions");
    36	    action_group.set_translation_domain (Config.GETTEXT_PACKAGE);
    37	    Gtk.Action a = new Gtk.Action("AppMenuAppletPreferences",N_("_Preferences"),null,Gtk.Stock.PREFERENCES);
    38	    a.activate.connect(()=>
    39	    {
    40	        var dlg = new Gtk.Dialog.with_buttons( dgettext(Config.GETTEXT_PACKAGE,"Configure AppMenu"), layout.get_toplevel() as Window,
    41	                                              DialogFlags.DESTROY_WITH_PARENT,
    42	                                              null );
    43	        Gtk.Box dlg_vbox = dlg.get_content_area() as Gtk.Box;
    44	        var entry = new CheckButton.with_label(dgettext(Config.GETTEXT_PACKAGE,"Use Compact mode (all menus in application menu)"));
    45	        settings.bind(Key.COMPACT_MODE,entry,"active",SettingsBindFlags.DEFAULT);
    46	        dlg_vbox.pack_start(entry,false,false,2);
    47	        entry.show();
    48	        entry = new CheckButton.with_label(dgettext(Config.GETTEXT_PACKAGE,"Use bold application name"));
    49	        settings.bind(Key.BOLD_APPLICATION_NAME,entry,"active",SettingsBindFlags.DEFAULT);
    50	        dlg_vbox.pack_start(entry,false,false,2);
    51	        entry.show();
    52	        dlg.show();
    53	        dlg.present();
    54	        dlg.response.connect(()=>{
    55	            dlg.destroy();
    56	        });
    57	    });
    58	    action_group.add_action (a);
    59	    applet.setup_menu("""<menuitem name="Appmenu Preferences Item" action="AppMenuAppletPreferences" />""",action_group);
    60	    return true;
    61	}
    62	
    63	
    64	public int _mate_panel_applet_shlib_factory()
    65	{
    66	//    GLib.Intl.bindtextdomain(Config.GETTEXT_PACKAGE,Config.LOCALE_DIR);
    67	//    GLib.Intl.bind_textdomain_codeset(Config.GETTEXT_PACKAGE,"UTF-8");
    68	    return MatePanel.Applet.factory_setup_in_process("AppmenuAppletFactory", typeof (MatePanel.Applet), factory_callback);
    69	}
    70	
    71	//void main(string[] args) {
    72	//    Gtk.init(ref args);
    73	//    MatePanel.Applet.factory_main("SNTrayAppletFactory", true, typeof (MatePanel.Applet), StatusNotifier.factory_callback);
    74	//}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/applets/meson.build
--------------------------------------------------------------------------------
     1	if vala_panel_found
     2	    vp_applets_libdir = vp.get_variable(pkgconfig:'applets_dir')
     3	    vp_sources = files('valapanel-plugin-appmenu.vala')
     4	    vpp = shared_module('appmenu', vp_sources, libres,
     5	                    dependencies: [appmenu_dep, vp],
     6	                    install: true,
     7	                    install_dir: vp_applets_libdir
     8	                  )
     9	endif
    10	
    11	if mate_found
    12	    mate_applet_libdir = join_paths(mp.get_variable(pkgconfig:'libdir'),'mate-panel')
    13	    mp_sources = files('mate-plugin-appmenu.vala')
    14	    mpp = shared_module('appmenu-mate', mp_sources, libres,
    15	                    dependencies: [appmenu_dep, mp],
    16	                    install: true,
    17	                    install_dir: mate_applet_libdir
    18	                  )
    19	endif
    20	
    21	if xfce_found
    22	    xfce_applet_libdir = join_paths(xp.get_variable(pkgconfig:'libdir'),'xfce4','panel','plugins')
    23	    xp_sources = files('xfce4-plugin-appmenu.vala')
    24	    xpp = shared_module('appmenu-xfce', xp_sources, libres,
    25	                    dependencies: [appmenu_dep, xc,xp],
    26	                    install: true,
    27	                    install_dir: xfce_applet_libdir
    28	                  )
    29	endif
    30	
    31	if budgie_found
    32	    budgie_applet_libdir = join_paths(bp.get_variable(pkgconfig:'libdir'),'budgie-desktop','plugins','budgie-appmenu-plugin')
    33	    bp_sources = files('budgie-plugin-appmenu.vala')
    34	    bpp = shared_module('appmenu-budgie', bp_sources, libres,
    35	                    dependencies: [appmenu_dep, bp],
    36	                    install: true,
    37	                    install_dir: budgie_applet_libdir
    38	                  )
    39	endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/applets/valapanel-plugin-appmenu.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2015 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using Gtk;
    20	using GLib;
    21	using ValaPanel;
    22	using Appmenu;
    23	
    24	
    25	public class GlobalMenuApplet: Applet
    26	{
    27	    unowned MenuWidget layout;
    28	    public override void constructed()
    29	    {
    30	        (this.action_group.lookup_action(APPLET_ACTION_CONFIGURE) as SimpleAction).set_enabled(true);
    31	        var layout = new Appmenu.MenuWidget();
    32	        this.layout = layout;
    33	        this.background_widget = layout;
    34	        this.init_background();
    35	        settings.bind(Key.COMPACT_MODE,layout,Key.COMPACT_MODE,SettingsBindFlags.DEFAULT);
    36	        settings.bind(Key.BOLD_APPLICATION_NAME,layout,Key.BOLD_APPLICATION_NAME,SettingsBindFlags.DEFAULT);
    37	        this.add(layout);
    38	        layout.show();
    39	        this.show();
    40	    }
    41	    ~GlobalMenuApplet()
    42	    {
    43	        layout.unref();
    44	    }
    45	    public override Widget get_settings_ui()
    46	    {
    47	        var dlg = new Gtk.Box(Gtk.Orientation.VERTICAL,0);
    48	        var entry = new CheckButton.with_label(dgettext(Config.GETTEXT_PACKAGE,"Use Compact mode (all menus in application menu)"));
    49	        this.settings.bind(Key.COMPACT_MODE,entry,"active",SettingsBindFlags.DEFAULT);
    50	        dlg.pack_start(entry,false,false,2);
    51	        entry.show();
    52	        entry = new CheckButton.with_label(dgettext(Config.GETTEXT_PACKAGE,"Use bold application name"));
    53	        this.settings.bind(Key.BOLD_APPLICATION_NAME,entry,"active",SettingsBindFlags.DEFAULT);
    54	        dlg.pack_start(entry,false,false,2);
    55	        entry.show();
    56	        dlg.show();
    57	        return dlg;
    58	    }
    59	} // End class
    60	
    61	[ModuleInit]
    62	public void g_io_appmenu_load(GLib.TypeModule module)
    63	{
    64	    // boilerplate - all modules need this
    65	    GLib.IOExtensionPoint.implement(ValaPanel.APPLET_EXTENSION_POINT,typeof(GlobalMenuApplet),"org.valapanel.appmenu",10);
    66	}
    67	
    68	public void g_io_appmenu_unload(GLib.IOModule module)
    69	{
    70	    // boilerplate - all modules need this
    71	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/applets/xfce4-plugin-appmenu.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2015 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	using Gtk;
    21	using Appmenu;
    22	using Xfce;
    23	
    24	public class AppmenuPlugin : Xfce.PanelPlugin {
    25	
    26	    public override void @construct() {
    27	        GLib.Intl.setlocale(LocaleCategory.CTYPE,"");
    28	        GLib.Intl.bindtextdomain(Config.GETTEXT_PACKAGE,Config.LOCALE_DIR);
    29	        GLib.Intl.bind_textdomain_codeset(Config.GETTEXT_PACKAGE,"UTF-8");
    30	        GLib.Intl.textdomain(Config.GETTEXT_PACKAGE);
    31	        var layout = new MenuWidget();
    32	        widget = layout;
    33	        add(widget);
    34	        add_action_widget(widget);
    35	        try{
    36	            Xfconf.init();
    37	            channel = this.get_channel();
    38	            Xfconf.Property.bind(channel,this.get_property_base()+"/"+Key.COMPACT_MODE,typeof(bool),widget,Key.COMPACT_MODE);
    39	            Xfconf.Property.bind(channel,this.get_property_base()+"/"+Key.BOLD_APPLICATION_NAME,typeof(bool),widget,Key.BOLD_APPLICATION_NAME);
    40	            Xfconf.Property.bind(channel,this.get_property_base()+"/"+"expand",typeof(bool),this,"expand");
    41	            this.menu_show_configure();
    42	        } catch (Xfconf.Error e) {
    43	            stderr.printf("Xfconf init failed. Configuration will not be saved.\n");
    44	        }
    45	        this.shrink = true;
    46	        this.set_expand(true);
    47	        widget.show();
    48	    }
    49	    public override void configure_plugin()
    50	    {
    51	        var dlg = new Gtk.Dialog.with_buttons( _("Configure AppMenu"), this.get_toplevel() as Window,
    52	                                              DialogFlags.DESTROY_WITH_PARENT,
    53	                                              null );
    54	        Gtk.Box dlg_vbox = dlg.get_content_area() as Gtk.Box;
    55	        var entry = new CheckButton.with_label(_("Use Compact mode (all menus in application menu)"));
    56	        widget.bind_property(Key.COMPACT_MODE, entry, "active", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE);
    57	        dlg_vbox.pack_start(entry,false,false,2);
    58	        entry.show();
    59	        entry = new CheckButton.with_label(_("Use bold application name"));
    60	        widget.bind_property(Key.BOLD_APPLICATION_NAME, entry, "active", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE);
    61	        dlg_vbox.pack_start(entry,false,false,2);
    62	        entry.show();
    63	        entry = new CheckButton.with_label(_("Expand plugin on panel"));
    64	        this.bind_property("expand", entry, "active", BindingFlags.BIDIRECTIONAL | BindingFlags.SYNC_CREATE);
    65	        dlg_vbox.pack_start(entry,false,false,2);
    66	        entry.show();
    67	        dlg.show();
    68	        dlg.present();
    69	        dlg.unmap.connect(()=>{
    70	            dlg.destroy();
    71	        });
    72	    }
    73	    protected override void get_preferred_height(out int minimum_height, out int natural_height)
    74	    {
    75	        widget.get_preferred_height(null, out minimum_height);
    76	        natural_height = minimum_height;
    77	    }
    78	    protected override void get_preferred_width(out int minimum_height, out int natural_height)
    79	    {
    80	        widget.get_preferred_width(null, out minimum_height);
    81	        natural_height = minimum_height;
    82	    }
    83	    private Xfconf.Channel channel;
    84	    private unowned MenuWidget widget;
    85	
    86	    ~AppmenuPlugin() {
    87	        Xfconf.Property.unbind_all(this);
    88	        Xfconf.shutdown();
    89	    }
    90	}
    91	
    92	[ModuleInit]
    93	public Type xfce_panel_module_init (TypeModule module) {
    94	    return typeof (AppmenuPlugin);
    95	}
    96	
    97	public bool xfce_panel_module_preinit (string[] args) {
    98	    Gdk.disable_multidevice();
    99	    return true;
   100	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/.clang-format
--------------------------------------------------------------------------------
     1	---
     2	AccessModifierOffset: 0
     3	AlignAfterOpenBracket: true
     4	AlignConsecutiveAssignments: true
     5	#uncomment for clang 3.9
     6	#AlignConsecutiveDeclarations: false
     7	AlignEscapedNewlinesLeft: false
     8	AlignOperands: true
     9	AlignTrailingComments: true
    10	AllowAllParametersOfDeclarationOnNextLine: true
    11	AllowShortBlocksOnASingleLine: false
    12	AllowShortCaseLabelsOnASingleLine: false
    13	AllowShortFunctionsOnASingleLine: None
    14	AllowShortIfStatementsOnASingleLine: false
    15	AllowShortLoopsOnASingleLine: false
    16	# AlwaysBreakAfterDefinitionReturnType: None
    17	#uncomment for clang 3.9
    18	#AlwaysBreakAfterReturnType: None
    19	AlwaysBreakBeforeMultilineStrings: true
    20	AlwaysBreakTemplateDeclarations: false
    21	BinPackArguments: false
    22	BinPackParameters: true
    23	# BraceWrapping: (not set since BreakBeforeBraces is not Custom)
    24	BreakBeforeBinaryOperators: None
    25	# BreakAfterJavaFieldAnnotations: (not java)
    26	BreakBeforeBinaryOperators: None
    27	BreakBeforeBraces: Allman
    28	BreakBeforeTernaryOperators: true
    29	BreakConstructorInitializersBeforeComma: false
    30	#uncomment for clang 3.9
    31	#BreakStringLiterals: false
    32	ColumnLimit: 100
    33	CommentPragmas:  '\*\<'
    34	ConstructorInitializerAllOnOneLineOrOnePerLine: false
    35	ConstructorInitializerIndentWidth: 4
    36	ContinuationIndentWidth: 4
    37	Cpp11BracedListStyle: false
    38	DerivePointerAlignment: false
    39	DisableFormat: false
    40	ExperimentalAutoDetectBinPacking: false
    41	#Uncomment for clang 3.9
    42	#IncludeCategories:
    43	#  - Regex: '^"'
    44	#    Priority: 1
    45	# IncludeIsMainRegex: (project doesn't use a main includes that can add other includes via regex)
    46	IndentCaseLabels: false
    47	IndentWidth: 8
    48	IndentWrappedFunctionNames: false
    49	# JavaScriptQuotes: (not javascript)
    50	KeepEmptyLinesAtTheStartOfBlocks: false
    51	Language: Cpp
    52	MacroBlockBegin: ''
    53	MacroBlockEnd:   ''
    54	MaxEmptyLinesToKeep: 1
    55	NamespaceIndentation: None
    56	# ObjCBlockIndentWidth: (not objc)
    57	# ObjCSpaceAfterProperty: (not objc)
    58	# ObjCSpaceBeforeProtocolList: (not objc)
    59	PenaltyBreakBeforeFirstCallParameter: 400
    60	PenaltyBreakComment: 0
    61	# PenaltyBreakFirstLessLess: (not cpp)
    62	PenaltyBreakString: 500
    63	PenaltyExcessCharacter: 10000
    64	PenaltyReturnTypeOnItsOwnLine: 600
    65	PointerAlignment: Right
    66	#uncomment for clang 3.9
    67	#ReflowComments: true
    68	#uncomment for clang 3.9
    69	#SortIncludes: true
    70	SpaceAfterCStyleCast: false
    71	SpaceBeforeAssignmentOperators: true
    72	SpaceBeforeParens: ControlStatements
    73	SpaceInEmptyParentheses: false
    74	SpacesBeforeTrailingComments: 1
    75	SpacesInAngles: false
    76	SpacesInCStyleCastParentheses: false
    77	# SpacesInContainerLiterals: (not objc or javascript)
    78	SpacesInParentheses: false
    79	SpacesInSquareBrackets: false
    80	Standard:        Cpp11
    81	TabWidth:        8
    82	UseTab:          ForIndentation
    83	...
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/data/appmenu-budgie.desktop.in
--------------------------------------------------------------------------------
     1	[Plugin]
     2	Module=appmenu-budgie.so
     3	Name=Global Menu
     4	Description=Show menus from windows
     5	Authors=Konstantin Pugin
     6	Copyright=Copyright © 2016 Konstantin Pugin
     7	Website=https://github.com/rilian-la-te/vala-panel-appmenu
     8	Icon=view-grid-symbolic
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/data/appmenu.desktop.in
--------------------------------------------------------------------------------
     1	[Xfce Panel]
     2	Type=X-XFCE-PanelPlugin
     3	Encoding=UTF-8
     4	Name=AppMenu Plugin
     5	Comment=Display AppMenu (Global Menu)
     6	Icon=applications-system
     7	X-XFCE-Module=appmenu-xfce
     8	X-XFCE-API=2.0
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/data/appmenu-mate.plugin.desktop.in
--------------------------------------------------------------------------------
     1	[Applet Factory]
     2	Id=AppmenuAppletFactory
     3	Location=@CMAKE_INSTALL_FULL_LIBDIR@/mate-panel/libappmenu-mate.so
     4	Name=Appmenu applet factory
     5	InProcess=true
     6	
     7	[AppmenuApplet]
     8	Name=Global Application Menu
     9	Description=All menus will hosts here
    10	Icon=applications-system
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/data/appmenu.plugin.desktop.in
--------------------------------------------------------------------------------
     1	[Plugin]
     2	Module=appmenu
     3	Name=AppMenu Plugin
     4	Description=Display AppMenu (Global Menu)
     5	Icon=preferences-system-symbolic
     6	Website=https://gitlab.com/vala-panel-project/vala-panel-appmenu
     7	HelpURI=https://gitlab.com/vala-panel-project/vala-panel-appmenu
     8	License=lgpl
     9	X-ValaPanel-Expandable=true
    10	Expandable=true
    11	Version=@VERSION@
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/data/.gitignore
--------------------------------------------------------------------------------
     1	/org.valapanel.appmenu.desktop.in
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/data/meson.build
--------------------------------------------------------------------------------
     1	cdata = configuration_data()
     2	cdata.set('CMAKE_INSTALL_FULL_LIBDIR', join_paths(prefix,get_option('libdir')))
     3	cdata.set('CMAKE_INSTALL_FULL_DATAROOTDIR', join_paths(prefix,datadir))
     4	
     5	if vala_panel_found
     6	    vp_applets_datadir = vp.get_variable(pkgconfig:'applets_data')
     7	    desktop = vcs_tag(
     8		    command : ['git','describe','--tags'],
     9		    input: 'appmenu.plugin.desktop.in',
    10		    output: 'appmenu.plugin.in',
    11		    replace_string: '@VERSION@',
    12	    )
    13	    i18n.merge_file(
    14	      input: desktop,
    15	      output: 'org.valapanel.appmenu.plugin',
    16	      kwargs: desktop_kwargs,
    17	      install_dir: vp_applets_datadir
    18	    )
    19	endif
    20	
    21	if mate_found
    22	    mate_applet_datadir = join_paths(mp.get_variable(pkgconfig:'prefix'),datadir,'mate-panel','applets')
    23	    mate_desktop = configure_file(input : 'appmenu-mate.plugin.desktop.in',
    24	               output : 'appmenu-mate.desktop.in',
    25				   configuration : cdata)
    26	    i18n.merge_file(
    27	      input: mate_desktop,
    28	      output: 'org.vala-panel.appmenu.mate-panel-applet',
    29	      kwargs: desktop_kwargs,
    30	      install_dir: mate_applet_datadir
    31	    )
    32	endif
    33	
    34	if xfce_found
    35	    xfce_applet_datadir = join_paths(xp.get_variable(pkgconfig:'prefix'),datadir,'xfce4','panel','plugins')
    36	    i18n.merge_file(
    37	      input: 'appmenu.desktop.in',
    38	      output: 'appmenu.desktop',
    39	      kwargs: desktop_kwargs,
    40	      install_dir: xfce_applet_datadir
    41	    )
    42	endif
    43	
    44	if budgie_found
    45	    i18n.merge_file(
    46	      input: 'appmenu-budgie.desktop.in',
    47	      output: 'appmenu-budgie.plugin',
    48	      kwargs: desktop_kwargs,
    49	      install_dir: budgie_applet_libdir
    50	    )
    51	endif
    52	
    53	if mate_found or vala_panel_found or budgie_found
    54	    install_data([
    55		    'org.valapanel.appmenu.gschema.xml'
    56	    ], install_dir: schema_dir)
    57	endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/data/org.valapanel.appmenu.gschema.xml
--------------------------------------------------------------------------------
     1	<schemalist>
     2	  <schema id="org.valapanel.toplevel.appmenu">
     3	    <key name="compact-mode" type="b">
     4	      <default>false</default>
     5	    </key>
     6	    <key name="bold-application-name" type="b">
     7	      <default>false</default>
     8	    </key>
     9	  </schema>
    10	  <schema id="org.valapanel.appmenu">
    11	    <key name="compact-mode" type="b">
    12	      <default>false</default>
    13	    </key>
    14	    <key name="bold-application-name" type="b">
    15	      <default>false</default>
    16	    </key>
    17	  </schema>
    18	</schemalist>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/.git
--------------------------------------------------------------------------------
     1	gitdir: ../../.git/modules/external/vala-panel-appmenu
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/.gitattributes
--------------------------------------------------------------------------------
     1	subprojects/* linguist-vendored
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/.gitignore
--------------------------------------------------------------------------------
     1	*.debhelper
     2	*.la
     3	*.lo
     4	*.log
     5	*.m4
     6	*.pc
     7	*.pyc
     8	*.stamp
     9	*.substvars
    10	.deps
    11	.libs
    12	.cache
    13	Makefile
    14	Makefile.in
    15	autom4te.cache
    16	build
    17	build-aux
    18	config.log
    19	config.status
    20	configure
    21	debian/autoreconf.after
    22	debian/autoreconf.before
    23	debian/files
    24	debian/libunity-gtk-parser-dev
    25	debian/libunity-gtk-parser-dev-common
    26	debian/libunity-gtk-parser0
    27	debian/libunity-gtk2-parser-dev
    28	debian/libunity-gtk2-parser0
    29	debian/libunity-gtk3-parser-dev
    30	debian/libunity-gtk3-parser0
    31	debian/tmp
    32	debian/unity-gtk-module
    33	debian/unity-gtk-module-common
    34	debian/unity-gtk2-module
    35	debian/unity-gtk3-module
    36	docs/reference/unity-gtk-module/html
    37	docs/reference/unity-gtk-module/xml
    38	docs/reference/unity-gtk-module/unity-gtk-module-decl-list.txt
    39	docs/reference/unity-gtk-module/unity-gtk-module-decl.txt
    40	docs/reference/unity-gtk-module/unity-gtk-module-undeclared.txt
    41	docs/reference/unity-gtk-module/unity-gtk-module-undocumented.txt
    42	docs/reference/unity-gtk-module/unity-gtk-module-unused.txt
    43	docs/reference/unity-gtk-module/unity-gtk-module.args
    44	docs/reference/unity-gtk-module/unity-gtk-module.hierarchy
    45	docs/reference/unity-gtk-module/unity-gtk-module.interfaces
    46	docs/reference/unity-gtk-module/unity-gtk-module.prerequisites
    47	docs/reference/unity-gtk-module/unity-gtk-module.signals
    48	libtool
    49	data/appmenu.desktop.plugin.in--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/.gitlab-ci.yml
--------------------------------------------------------------------------------
     1	stages:
     2	  - build
     3	  - release
     4	before_script:
     5	  - mkdir -p _ccache
     6	  - export CCACHE_BASEDIR=${PWD}
     7	  - export CCACHE_DIR=${PWD}/_ccache
     8	
     9	cache:
    10	  paths:
    11	    - _ccache/
    12	
    13	build-applet-alpine:
    14	  image: alpine:edge
    15	  stage: build
    16	  script:
    17	   - apk add --no-cache python3 gobject-introspection-dev gtk+3.0-dev vala meson ninja xz libwnck3-dev build-base git
    18	   - git clone https://gitlab.com/vala-panel-project/vala-panel.git
    19	   - meson --prefix=/usr vp-build vala-panel && meson install -C vp-build && rm -rf vala-panel && rm -rf vp-build
    20	   - meson --prefix=/usr -Dregistrar=disabled -Djayatana=disabled -Dappmenu-gtk-module=disabled build
    21	   - meson compile -C build
    22	   - meson install -C build --no-rebuild
    23	   - meson dist -C build --no-tests
    24	  artifacts:
    25	    paths:
    26	    - "build/meson-dist/vala-panel-appmenu*.tar.xz"
    27	    expire_in: 1 week
    28	
    29	build-gtk-module-main:
    30	  image: alpine:edge
    31	  stage: build
    32	  script:
    33	   - apk add --no-cache python3 gtk+3.0-dev gtk+2.0-dev xz meson ninja libwnck3-dev build-base git
    34	   - export VERSION=$(git describe --abbrev=0)
    35	   - meson --prefix=/usr build subprojects/appmenu-gtk-module
    36	   - meson compile -C build
    37	   - meson install -C build --no-rebuild
    38	   - meson dist -C build --no-tests
    39	  artifacts:
    40	    paths:
    41	    - "build/meson-dist/appmenu-gtk-module*.tar.xz"
    42	    expire_in: 1 week
    43	
    44	build-glib-translator-main:
    45	  image: alpine:edge
    46	  stage: build
    47	  script:
    48	   - apk add --no-cache python3 glib-dev gobject-introspection-dev vala xz meson build-base git
    49	   - export VERSION=$(git describe --abbrev=0)
    50	   - meson --prefix=/usr build subprojects/appmenu-glib-translator
    51	   - meson compile -C build
    52	   - meson install -C build --no-rebuild
    53	   - meson dist -C build --no-tests
    54	  artifacts:
    55	    paths:
    56	    - "build/meson-dist/appmenu-glib-translator*.tar.xz"
    57	    expire_in: 1 week
    58	
    59	build-registrar-main:
    60	  image: alpine:edge
    61	  stage: build
    62	  script:
    63	   - apk add --no-cache python3 glib-dev meson xz build-base git
    64	   - export VERSION=$(git describe --abbrev=0)
    65	   - meson --prefix=/usr --libexecdir=lib build subprojects/registrar
    66	   - meson compile -C build
    67	   - meson install -C build --no-rebuild
    68	   - meson dist -C build --no-tests
    69	  artifacts:
    70	    paths:
    71	    - "build/meson-dist/registrar*.tar.xz"
    72	    expire_in: 1 week
    73	
    74	
    75	build-jayatana-main:
    76	  image: alpine:edge
    77	  stage: build
    78	  script:
    79	   - apk add --no-cache libdbusmenu-glib-dev python3 build-base ninja libxkbcommon-dev git libx11-dev meson glib-dev java-common openjdk21-jdk
    80	   - meson --prefix=/usr --libexecdir=lib build subprojects/jayatana
    81	   - meson compile -C build
    82	   - meson install -C build --no-rebuild
    83	   - meson dist -C build --no-tests
    84	  artifacts:
    85	    paths:
    86	    - "build/meson-dist/jayatana*.tar.xz"
    87	    expire_in: 1 week
    88	
    89	
    90	release-main:
    91	  image: alpine:edge
    92	  stage: release
    93	  script:
    94	    - apk add --no-cache python3 py3-pip
    95	    - pip3 install --break-system-packages gitlab-release
    96	    - gitlab-release --link-in-desc --link-artifact *.tar.xz
    97	  artifacts:
    98	    paths:
    99	      # Must include files passed to gitlab_release
   100	    - "build/meson-dist/appmenu-glib-translator*.tar.xz"
   101	    - "build/meson-dist/appmenu-gtk-module*.tar.xz"
   102	    - "build/meson-dist/registrar*.tar.xz"
   103	    - "build/meson-dist/vala-panel-appmenu*.tar.xz"
   104	    - "build/meson-dist/jayatana*.tar.xz"
   105	  only:
   106	    - tags
   107	
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/.gitmodules
--------------------------------------------------------------------------------
     1	[submodule "cmake"]
     2		path = cmake
     3		url = https://gitlab.com/vala-panel-project/cmake-vala.git
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/appmenu-abstractions.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2015 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	using Gtk;
    21	
    22	namespace Appmenu
    23	{
    24	    public enum ModelType
    25	    {
    26	        NONE,
    27	        STUB,
    28	        DESKTOP,
    29	        MENUMODEL,
    30	        DBUSMENU
    31	    }
    32	    internal abstract class Helper: Object
    33	    {
    34	
    35	    }
    36	    public abstract class Backend : Object
    37	    {
    38	        protected ModelType type = ModelType.NONE;
    39	        protected static DBusMenuRegistrarProxy proxy;
    40	        static construct
    41	        {
    42	            proxy = new DBusMenuRegistrarProxy();
    43	        }
    44	        construct
    45	        {
    46	            try
    47	            {
    48	                var con = Bus.get_sync(BusType.SESSION);
    49	                con.call.begin(
    50	                    "org.valapanel.AppMenu.Registrar",
    51	                    "/org/valapanel/AppMenu/Registrar",
    52	                    "org.valapanel.AppMenu.Registrar",
    53	                    "Reference",
    54	                    null,null,
    55	                    DBusCallFlags.NONE, -1);
    56	            }
    57	            catch(Error e)
    58	            {
    59	                stderr.printf("%s\n",e.message);
    60	            }
    61	        }
    62	        ~Backend()
    63	        {
    64	            try
    65	            {
    66	                var con = Bus.get_sync(BusType.SESSION,null);
    67	                con.call.begin(
    68	                    "org.valapanel.AppMenu.Registrar",
    69	                    "/org/valapanel/AppMenu/Registrar",
    70	                    "org.valapanel.AppMenu.Registrar",
    71	                    "UnReference",
    72	                    null,null,
    73	                    DBusCallFlags.NO_AUTO_START, -1);
    74	            }
    75	            catch(Error e)
    76	            {
    77	                stderr.printf("%s\n",e.message);
    78	            }
    79	        }
    80	        public signal void active_model_changed();
    81	        public abstract void set_active_window_menu(MenuWidget widget);
    82	    }
    83	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/appmenu.css
--------------------------------------------------------------------------------
     1	.-vala-panel-appmenu-private {
     2	    background-color: transparent;
     3	    background-image: none;
     4	    color: inherit;
     5	    box-shadow: inset 0 0px;
     6	}
     7	
     8	.-vala-panel-appmenu-core scrolledwindow,
     9	.-vala-panel-appmenu-private > menuitem,
    10	.-vala-panel-appmenu-private > menuitem:first-child > label {
    11	    margin-top: 0;
    12	    margin-bottom: 0;
    13	    padding-top: 0;
    14	    padding-bottom: 0;
    15	}
    16	
    17	menubar.-vala-panel-appmenu-bold > menuitem:first-child > label {
    18	   font-weight: bolder;
    19	}
    20	
    21	.-vala-panel-appmenu-private > separator {
    22		
    23	    background-color: transparent;
    24	    background-image: none;
    25		opacity: 0;
    26	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/appmenu-wnck.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2015 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	using Gtk;
    21	
    22	namespace Appmenu
    23	{
    24	    internal class BackendImpl : Backend
    25	    {
    26	        private HashTable<uint,unowned Wnck.Window> desktop_menus;
    27	        private ValaPanel.Matcher matcher = ValaPanel.Matcher.get();
    28	        private Helper helper;
    29	        private Wnck.Window active_window;
    30	        private int menu_update_delay = 500; // should be close enough to avoid flickering
    31	        private uint delayed_menu_update_id = 0;
    32	        private unowned Wnck.Screen screen;
    33	        construct
    34	        {
    35	            desktop_menus = new HashTable<uint,unowned Wnck.Window>(direct_hash,direct_equal);
    36	            screen = Wnck.Screen.get_default();
    37	            proxy.window_registered.connect(register_menu_window);
    38	            proxy.window_unregistered.connect(unregister_menu_window);
    39	            proxy.registrar_changed.connect((h)=>{
    40	                on_active_window_changed(this.active_window);
    41	            });
    42	            screen.active_window_changed.connect(on_active_window_changed);
    43	            screen.window_opened.connect(on_window_opened);
    44	            screen.window_closed.connect(on_window_closed);
    45	            foreach (unowned Wnck.Window window in screen.get_windows())
    46	                on_window_opened(window);
    47	            on_active_window_changed(screen.get_active_window());
    48	        }
    49	        public BackendImpl()
    50	        {
    51	            Object();
    52	        }
    53	        ~BackendImpl()
    54	        {
    55	            SignalHandler.disconnect_by_data(proxy,this);
    56	            SignalHandler.disconnect_by_data(screen,this);
    57	        }
    58	        public override void set_active_window_menu(MenuWidget widget)
    59	        {
    60	            helper = null;
    61	            if(type == ModelType.MENUMODEL)
    62	                helper = get_menu_model_helper_with_wnck(widget, active_window);
    63	            else if(type == ModelType.DBUSMENU)
    64	               create_dbusmenu_for_wnck_window(widget,active_window);
    65	            else if(type == ModelType.DESKTOP)
    66	                helper = new DesktopHelper(widget);
    67	            else if(type == ModelType.STUB)
    68	            {
    69	                helper = get_stub_helper_with_wnck(widget,active_window);
    70	                widget.set_menubar(null);
    71	            }
    72	        }
    73	        DBusMenuHelper get_dbus_menu_helper_with_wnck(MenuWidget w, string name, ObjectPath path, Wnck.Window win)
    74	        {
    75	            string? title = null;
    76	            DesktopAppInfo? info = libwnck_aux_match_wnck_window(matcher, win);
    77	            if (info != null)
    78	                title = info.get_name();
    79	            if (title == null)
    80	            {
    81	                Wnck.Application app = win.get_application();
    82	                if(app != null)
    83	                    title = app.get_name();
    84	                else
    85	                    title = win.get_name();
    86	            }
    87	            return new DBusMenuHelper(w,name,path,title,info);
    88	        }
    89	        MenuModelHelper get_menu_model_helper_with_wnck(MenuWidget w, Wnck.Window win)
    90	        {
    91	            ulong xid = win.get_xid();
    92	            var gtk_unique_bus_name = libwnck_aux_get_utf8_prop(xid,"_GTK_UNIQUE_BUS_NAME");
    93	            var app_menu_path = libwnck_aux_get_utf8_prop(xid,"_GTK_APP_MENU_OBJECT_PATH");
    94	            var menubar_path = libwnck_aux_get_utf8_prop(xid,"_GTK_MENUBAR_OBJECT_PATH");
    95	            var application_path = libwnck_aux_get_utf8_prop(xid,"_GTK_APPLICATION_OBJECT_PATH");
    96	            var window_path = libwnck_aux_get_utf8_prop(xid,"_GTK_WINDOW_OBJECT_PATH");
    97	            var unity_path = libwnck_aux_get_utf8_prop(xid,"_UNITY_OBJECT_PATH");
    98	            DesktopAppInfo? info = libwnck_aux_match_wnck_window(matcher, win);
    99	            string? title = null;
   100	            if (info != null)
   101	                title = info.get_name();
   102	            if (title == null)
   103	            {
   104	                Wnck.Application app = win.get_application();
   105	                if(app != null)
   106	                    title = app.get_name();
   107	                else
   108	                    title = win.get_name();
   109	            }
   110	            return new MenuModelHelper(w,gtk_unique_bus_name,app_menu_path,menubar_path,application_path,window_path,unity_path,title,info);
   111	        }
   112	        DBusAppMenu get_stub_helper_with_wnck(MenuWidget w, Wnck.Window win)
   113	        {
   114	            string? title = null;
   115	            DesktopAppInfo? info = libwnck_aux_match_wnck_window(ValaPanel.Matcher.get(), win);
   116	            if (info != null)
   117	                title = info.get_name();
   118	            if (title == null)
   119	            {
   120	                Wnck.Application app = win.get_application();
   121	                if(app != null)
   122	                    title = app.get_name();
   123	                else
   124	                    title = win.get_name();
   125	            }
   126	            return new DBusAppMenu(w,title,null,info);
   127	        }
   128	        private void register_menu_window(uint window_id, string sender, ObjectPath menu_object_path)
   129	        {
   130	            if (window_id != screen.get_active_window().get_xid())
   131	                return;
   132	            this.active_window = screen.get_active_window();
   133	            this.type = ModelType.DBUSMENU;
   134	            active_model_changed();
   135	        }
   136	        private void unregister_menu_window(uint window_id)
   137	        {
   138	            desktop_menus.remove(window_id);
   139	        }
   140	        private void create_dbusmenu_for_wnck_window(MenuWidget menu,Wnck.Window window)
   141	        {
   142	            ulong xid = window.get_xid();
   143	            string name;
   144	            ObjectPath path;
   145	            proxy.get_menu_for_window((uint)xid,out name, out path);
   146	            helper = get_dbus_menu_helper_with_wnck(menu,name,path, window);
   147	        }
   148	        private void on_window_opened(Wnck.Window window)
   149	        {
   150	            if (window.get_window_type() == Wnck.WindowType.DESKTOP)
   151	                desktop_menus.insert((uint)window.get_xid(),window);
   152	        }
   153	        private void reset_menu_update_timeout() {
   154	            if (delayed_menu_update_id > 0) {
   155	                Source.remove(delayed_menu_update_id);
   156	            }
   157	            delayed_menu_update_id = 0;
   158	        }
   159	        private void on_window_closed(Wnck.Window window)
   160	        {
   161	            unregister_menu_window((uint)window.get_xid());
   162	            delayed_menu_update_id = Timeout.add(menu_update_delay, menu_update_timeout);
   163	        }
   164	        private bool menu_update_timeout() {
   165	            unowned Wnck.Window win = screen.get_active_window();
   166	            type = ModelType.NONE;
   167	            lookup_menu(win);
   168	            active_model_changed();
   169	            delayed_menu_update_id = 0;
   170	            return false;
   171	        }
   172	        private void on_active_window_changed(Wnck.Window? prev)
   173	        {
   174	            reset_menu_update_timeout();
   175	            unowned Wnck.Window win = screen.get_active_window();
   176	            type = ModelType.NONE;
   177	            lookup_menu(win);
   178	            active_model_changed();
   179	        }
   180	        private void lookup_menu(Wnck.Window? window)
   181	        {
   182	            ulong xid = 0;
   183	            Wnck.Window? win = window;
   184	            while (win != null && type == ModelType.NONE)
   185	            {
   186	                xid = window.get_xid();
   187	                unowned Wnck.Application app = window.get_application();
   188	                if (type == ModelType.NONE)
   189	                {
   190	                    string name;
   191	                    ObjectPath path;
   192	                    proxy.get_menu_for_window((uint)xid,out name, out path);
   193	                    /* Check DBusMenu sanity to differ it from MenuModel*/
   194	                    if (!(name.length <= 0 && path == "/"))
   195	                    {
   196	                        this.active_window = win;
   197	                        this.type = ModelType.DBUSMENU;
   198	                    }
   199	                }
   200	                /* First look to see if we can get these from the
   201	                   GMenuModel access */
   202	                if (type == ModelType.NONE)
   203	                {
   204	                    var uniquename = libwnck_aux_get_utf8_prop (win.get_xid(), "_GTK_UNIQUE_BUS_NAME");
   205	                    if (uniquename != null)
   206	                    {
   207	                        this.active_window = win;
   208	                        this.type = ModelType.MENUMODEL;
   209	                    }
   210	                }
   211	                if (type == ModelType.NONE && window.get_window_type() == Wnck.WindowType.DESKTOP)
   212	                {
   213	                    this.active_window = win;
   214	                    this.type = ModelType.DESKTOP;
   215	                }
   216	                if (type == ModelType.NONE)
   217	                {
   218	                    debug("Looking for parent window on XID %lu", xid);
   219	                    win = win.get_transient();
   220	                    if (win == null && app != null)
   221	                    {
   222	                        this.active_window = window;
   223	                        type = ModelType.STUB;
   224	                    }
   225	                }
   226	            }
   227	            if (type == ModelType.NONE)
   228	            {
   229	                this.active_window = null;
   230	                type = ModelType.DESKTOP;
   231	            }
   232	            return;
   233	        }
   234	    }
   235	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/desktop-menus.ui
--------------------------------------------------------------------------------
     1	<?xml version="1.0" encoding="UTF-8"?>
     2	<interface domain="vala-panel-appmenu">
     3	  <menu id="appmenu-desktop">
     4	    <section>
     5	        <item>
     6	          <attribute name="label" translatable="yes">_Desktop Settings</attribute>
     7	          <attribute name="action">menu.desktop-settings</attribute>
     8	        </item>
     9	        <item>
    10	          <attribute name="label" translatable="yes">_System Settings</attribute>
    11	          <attribute name="action">menu.control-center</attribute>
    12	        </item>
    13	    </section>
    14	  </menu>
    15	  <menu id="menubar">
    16	      <submenu id="files">
    17	          <attribute name="label" translatable="yes">_Files</attribute>
    18	          <attribute name="submenu-action">menu.populate-files</attribute>
    19	      </submenu>
    20	      <submenu id="docs">
    21	          <attribute name="label" translatable="yes">_Documents</attribute>
    22	          <attribute name="submenu-action">menu.populate-docs</attribute>
    23	      </submenu>
    24	      <submenu id="music">
    25	          <attribute name="label" translatable="yes">_Music</attribute>
    26	          <attribute name="submenu-action">menu.populate-music</attribute>
    27	      </submenu>
    28	      <submenu id="picts">
    29	          <attribute name="label" translatable="yes">_Pictures</attribute>
    30	          <attribute name="submenu-action">menu.populate-picts</attribute>
    31	      </submenu>
    32	      <submenu id="video">
    33	          <attribute name="label" translatable="yes">_Video</attribute>
    34	          <attribute name="submenu-action">menu.populate-video</attribute>
    35	      </submenu>
    36	  </menu>
    37	  <menu id="appmenu-stub">
    38	      <section>
    39			  <item>
    40			      <attribute name="label" translatable="yes">_New</attribute>
    41			      <attribute name="action">conf.new</attribute>
    42			      <attribute name="hidden-when">action-missing</attribute>
    43			  </item>
    44		  </section>
    45		  <section id="desktop-actions">
    46		  </section>
    47		  <section id="unity-actions">
    48		  </section>
    49	      <section>
    50			  <item>
    51			      <attribute name="label" translatable="yes">_Quit</attribute>
    52			      <attribute name="action">conf.quit</attribute>
    53			      <attribute name="hidden-when">action-missing</attribute>
    54			  </item>
    55		  </section>
    56	  </menu>
    57	</interface>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/helper-dbusmenu.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	using Gtk;
    21	
    22	namespace Appmenu
    23	{
    24	    internal class DBusMenuHelper: Helper
    25	    {
    26	        private DBusMenu.Importer importer = null;
    27	        private Helper dbus_helper = null;
    28	        private ulong connect_handler = 0;
    29	        public DBusMenuHelper(MenuWidget w, string name, ObjectPath path, string? title, DesktopAppInfo? info)
    30	        {
    31	            dbus_helper = new DBusAppMenu(w, title, name, info);
    32	            importer = new DBusMenu.Importer(name,(string)path);
    33	            connect_handler = Signal.connect(importer,"notify::model",(GLib.Callback)on_model_changed_cb,w);
    34	        }
    35	        private static void on_model_changed_cb(DBusMenu.Importer importer, GLib.ParamSpec pspec, MenuWidget w)
    36	        {
    37	            w.insert_action_group("dbusmenu",importer.action_group);
    38	            w.set_menubar(importer.model);
    39	        }
    40	        ~DBusMenuHelper()
    41	        {
    42	            importer.disconnect(connect_handler);
    43	        }
    44	    }
    45	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/helper-dbus.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	using Gtk;
    21	
    22	namespace Appmenu
    23	{
    24	    public const string DBUS_DEFAULT_PATH = "/org/freedesktop/DBus";
    25	    public const string DBUS_DEFAULT_NAME= "org.freedesktop.DBus";
    26	    [DBus (name = "org.freedesktop.DBus")]
    27	    public interface DBusMain : DBusProxy
    28	    {
    29	        [DBus (name = "GetConnectionUnixProcessID")]
    30	        public abstract uint get_connection_unix_process_id(string id) throws Error;
    31	        public abstract int start_service_by_name(string service, int flags) throws Error;
    32	        public abstract string[] list_activatable_names() throws Error;
    33	    }
    34	    internal class DBusAppMenu : Helper
    35	    {
    36	        private const string UNITY_QUICKLISTS_KEY = "X-Ayatana-Desktop-Shortcuts";
    37	        private const string UNITY_QUICKLISTS_SHORTCUT_GROUP_NAME = "%s Shortcut Group";
    38	        private const string UNITY_QUICKLISTS_TARGET_KEY = "TargetEnvironment";
    39	        private const string UNITY_QUICKLISTS_TARGET_VALUE = "Unity";
    40	
    41	
    42	        private DBusMain dbus;
    43	        private DesktopAppInfo? info = null;
    44	        private string? connection = null;
    45	        private unowned MenuWidget widget;
    46	        private GLib.Menu all_menu = new GLib.Menu();
    47	
    48	        private const GLib.ActionEntry[] entries =
    49	        {
    50	            {"new", activate_new, null, null, null},
    51	            {"activate-action", activate_action, "s", null, null},
    52	            {"activate-unity-desktop-shortcut",activate_unity,"s",null,null},
    53	            {"quit", activate_quit, null, null, null},
    54	        };
    55	        construct
    56	        {
    57	            try {
    58	                dbus = Bus.get_proxy_sync(BusType.SESSION, DBUS_DEFAULT_NAME, DBUS_DEFAULT_PATH);
    59	            } catch (Error e) {
    60	                debug("%s\n",e.message);
    61	            }
    62	        }
    63	        public DBusAppMenu(MenuWidget w, string? name, string? connection, DesktopAppInfo? info)
    64	        {
    65	            this.widget = w;
    66	            var configurator = new SimpleActionGroup();
    67	            configurator.add_action_entries(entries,this);
    68	            var builder = new Builder.from_resource("/org/vala-panel/appmenu/desktop-menus.ui");
    69	            builder.set_translation_domain(Config.GETTEXT_PACKAGE);
    70	            unowned GLib.Menu menu = builder.get_object("appmenu-stub") as GLib.Menu;
    71	            if(connection != null)
    72	                this.connection = connection;
    73	            else
    74	                (configurator.lookup_action("quit") as SimpleAction).set_enabled(false);
    75	            if (info != null)
    76	            {
    77	                this.info = info;
    78	                unowned GLib.Menu section = builder.get_object("desktop-actions") as GLib.Menu;
    79	                foreach(unowned string action in info.list_actions())
    80	                    section.append(info.get_action_name(action),"conf.activate-action('%s')".printf(action));
    81	                section.freeze();
    82	                try{
    83	                    section = builder.get_object("unity-actions") as GLib.Menu;
    84	                    var keyfile = new KeyFile();
    85	                    keyfile.load_from_file(info.get_filename(),KeyFileFlags.NONE);
    86	                    var unity_list = keyfile.get_string_list(KeyFileDesktop.GROUP,UNITY_QUICKLISTS_KEY);
    87	                    foreach(unowned string action in unity_list)
    88	                    {
    89	                        var action_name = keyfile.get_locale_string(UNITY_QUICKLISTS_SHORTCUT_GROUP_NAME.printf(action),KeyFileDesktop.KEY_NAME);
    90	                        section.append(action_name,"conf.activate-unity-desktop-shortcut('%s')".printf(action));
    91	                    }
    92	                    section.freeze();
    93	                } catch (Error e) {
    94	                    debug("%s\n",e.message);
    95	                }
    96	            }
    97	            else if (connection == null)
    98	            {
    99	                (configurator.lookup_action("new") as SimpleAction).set_enabled(false);
   100	            }
   101	            string res_name = name ?? _("Application");
   102	            if (name.length >= 28)
   103	                res_name = name[0:25]+"...";
   104	            all_menu.append_submenu(res_name,menu);
   105	            all_menu.freeze();
   106	            widget.insert_action_group("conf",configurator);
   107	            widget.set_appmenu(all_menu);
   108	        }
   109	        private void activate_new(GLib.SimpleAction action, Variant? param)
   110	        {
   111	            if (info != null)
   112	            {
   113	                MenuMaker.launch(info,new List<string>(),widget);
   114	            }
   115	            else if (connection != null)
   116	            {
   117	                //FIXME: Now using only first part, not parameters
   118	                try {
   119	                    string str = "/proc/%u/cmdline".printf(dbus.get_connection_unix_process_id(this.connection));
   120	                    string exec = Launcher.posix_get_cmdline_string(str);
   121	                    var appinfo  = AppInfo.create_from_commandline(exec,null,0) as DesktopAppInfo;
   122	                    MenuMaker.launch(appinfo,new List<string>(),widget);
   123	                } catch (Error e) {
   124	                    stderr.printf("%s\n",e.message);
   125	                }
   126	            }
   127	        }
   128	        private void activate_quit(GLib.SimpleAction action, Variant? param)
   129	        {
   130	            try {
   131	                Posix.kill((Posix.pid_t)dbus.get_connection_unix_process_id(this.connection), Posix.Signal.QUIT);
   132	            } catch (Error e) {
   133	                stderr.printf("%s\n",e.message);
   134	            }
   135	        }
   136	        private void activate_action(GLib.SimpleAction action, Variant? param)
   137	        {
   138	            var action_name = param.get_string();
   139	            info.launch_action(action_name,widget.get_display().get_app_launch_context());
   140	        }
   141	        private void activate_unity(GLib.SimpleAction action, Variant? param)
   142	        {
   143	            unowned string action_name = param.get_string();
   144	            try {
   145	                var keyfile = new KeyFile();
   146	                keyfile.load_from_file(info.get_filename(),KeyFileFlags.NONE);
   147	                var exec = keyfile.get_string(UNITY_QUICKLISTS_SHORTCUT_GROUP_NAME.printf(action_name),KeyFileDesktop.KEY_EXEC);
   148	                var appinfo  = AppInfo.create_from_commandline(exec,null,0) as DesktopAppInfo;
   149	                MenuMaker.launch(appinfo,new List<string>(),widget);
   150	            } catch (Error e) {
   151	                stderr.printf("%s\n",e.message);
   152	            }
   153	        }
   154	    }
   155	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/helper-desktop.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	using Gtk;
    21	
    22	namespace Appmenu
    23	{
    24	    internal class DesktopHelper: Helper
    25	    {
    26	        private GLib.Menu files_menu;
    27	        private GLib.Menu documents_menu;
    28	        private GLib.Menu pictures_menu;
    29	        private GLib.Menu music_menu;
    30	        private GLib.Menu videos_menu;
    31	        private unowned MenuWidget widget;
    32	        private const GLib.ActionEntry[] menu_entries =
    33	        {
    34	            {"launch-id", activate_menu_id, "s", null, null},
    35	            {"launch-uri", activate_menu_uri, "s", null, null},
    36	            {"launch-command", activate_menu_command, "s", null, null},
    37	            {"launch-type", activate_menu_launch_type, "s", null, null},
    38	            {"desktop-settings", activate_desktop, null, null, null},
    39	            {"control-center", activate_control, null, null, null},
    40	            {"populate-files", null, "b", "false", state_populate_files},
    41	            {"populate-docs", null, "b", "false", state_populate_docs},
    42	            {"populate-music", null, "b", "false", state_populate_music},
    43	            {"populate-picts", null, "b", "false", state_populate_picts},
    44	            {"populate-video", null, "b", "false", state_populate_video}
    45	        };
    46	        public DesktopHelper(MenuWidget w)
    47	        {
    48	    //            if(window != null)
    49	    //                base(w,null,window);
    50	            this.widget = w;
    51	            var group = new SimpleActionGroup();
    52	            group.add_action_entries(menu_entries,this);
    53	            w.insert_action_group("menu",group);
    54	            var builder = new Builder.from_resource("/org/vala-panel/appmenu/desktop-menus.ui");
    55	            builder.set_translation_domain(Config.GETTEXT_PACKAGE);
    56	            unowned GLib.Menu gmenu = builder.get_object("appmenu-desktop") as GLib.Menu;
    57	            var menu = new GLib.Menu();
    58	            string? name = GLib.dgettext(Config.GETTEXT_PACKAGE,"_Desktop");
    59	            menu.append_submenu(name,gmenu);
    60	            menu.freeze();
    61	            widget.set_appmenu(menu);
    62	            GLib.Menu append_menu = new GLib.Menu();
    63	            widget.set_menubar(append_menu);
    64	            files_menu = builder.get_object("files") as GLib.Menu;
    65	            documents_menu = builder.get_object("docs") as GLib.Menu;
    66	            music_menu = builder.get_object("music") as GLib.Menu;
    67	            pictures_menu = builder.get_object("picts") as GLib.Menu;
    68	            videos_menu = builder.get_object("video") as GLib.Menu;
    69	            gmenu = builder.get_object("menubar") as GLib.Menu;
    70	            append_menu.append_section(null,gmenu);
    71	            append_menu.freeze();
    72	        }
    73	        internal void activate_menu_id(SimpleAction action, Variant? param)
    74	        {
    75	            Launcher.activate_menu_launch_id(action,param,this);
    76	        }
    77	        internal void activate_menu_uri(SimpleAction action, Variant? param)
    78	        {
    79	            Launcher.activate_menu_launch_uri(action,param,this);
    80	        }
    81	        internal void activate_menu_command(SimpleAction action, Variant? param)
    82	        {
    83	            Launcher.activate_menu_launch_command(action,param,this);
    84	        }
    85	        public void activate_menu_launch_type(SimpleAction action, Variant? param)
    86	        {
    87	            unowned string type = param.get_string();
    88	            var info = GLib.AppInfo.get_default_for_type(type,false) as DesktopAppInfo;
    89	            MenuMaker.launch(info,null,widget);
    90	        }
    91	        public void activate_desktop(SimpleAction action, Variant? param)
    92	        {
    93	            try{
    94	                unowned string desktop = Environment.get_variable("XDG_CURRENT_DESKTOP");
    95	                DesktopAppInfo? info = null;
    96	                switch(desktop)
    97	                {
    98	                    case "MATE":
    99	                        info = new DesktopAppInfo("mate-appearance-properties.desktop");
   100	                        break;
   101	                    case "XFCE":
   102	                        info = new DesktopAppInfo("xfce-backdrop-settings.desktop");
   103	                        break;
   104	                    case "LXDE":
   105	                        info = AppInfo.create_from_commandline("pcmanfm --desktop-pref",null,
   106	                        AppInfoCreateFlags.SUPPORTS_STARTUP_NOTIFICATION) as DesktopAppInfo;
   107	                        break;
   108	                    case "UnityX":
   109	                        info = new DesktopAppInfo("unityx-appearance-panel.desktop");
   110	                        break;
   111	                    case "Budgie:GNOME":
   112	                        info = AppInfo.create_from_commandline("budgie-desktop-settings",null,
   113	                        AppInfoCreateFlags.SUPPORTS_STARTUP_NOTIFICATION) as DesktopAppInfo;
   114	                        break;
   115	                    default:
   116	                        warning("Unknown desktop environment\n");
   117	                        info = AppInfo.create_from_commandline("gnome-control-center backgrounds",null,
   118	                        AppInfoCreateFlags.SUPPORTS_STARTUP_NOTIFICATION) as DesktopAppInfo;
   119	                        break;
   120	                }
   121	                MenuMaker.launch(info,null,widget);
   122	            } catch (GLib.Error e){stderr.printf("%s\n",e.message);}
   123	        }
   124	        public void activate_control(SimpleAction action, Variant? param)
   125	        {
   126	            try{
   127	                unowned string desktop = Environment.get_variable("XDG_CURRENT_DESKTOP");
   128	                DesktopAppInfo? info = null;
   129	                switch(desktop)
   130	                {
   131	                    case "XFCE":
   132	                        info = new DesktopAppInfo("xfce-settings-manager.desktop");
   133	                        break;
   134	                    case "MATE":
   135	                        info = AppInfo.create_from_commandline("mate-control-center",null,
   136	                        AppInfoCreateFlags.SUPPORTS_STARTUP_NOTIFICATION) as DesktopAppInfo;
   137	                        break;
   138	                    case "LXDE":
   139	                        info = new DesktopAppInfo("lxappearance.desktop");
   140	                        break;
   141	                    case "UnityX":
   142	                        info = new DesktopAppInfo("unityx-control-center.desktop");
   143	                        break;
   144	                    case "Budgie:GNOME":
   145	                        string control_center = "gnome-control-center";
   146	                        if (Environment.find_program_in_path("budgie-control-center") != null) {
   147	                            control_center = "budgie-control-center";
   148	                        }
   149	                        info = AppInfo.create_from_commandline(control_center,null,
   150	                        AppInfoCreateFlags.SUPPORTS_STARTUP_NOTIFICATION) as DesktopAppInfo;
   151	                        break;
   152	                    default:
   153	                        warning("Unknown desktop environment\n");
   154	                        info = AppInfo.create_from_commandline("gnome-control-center",null,
   155	                        AppInfoCreateFlags.SUPPORTS_STARTUP_NOTIFICATION) as DesktopAppInfo;
   156	                        break;
   157	                }
   158	                MenuMaker.launch(info,null,widget);
   159	            } catch (GLib.Error e){stderr.printf("%s\n",e.message);}
   160	        }
   161	        public void state_populate_files(SimpleAction action, Variant? param)
   162	        {
   163	            populate_menu(files_menu,UserDirectory.DOWNLOAD);
   164	            action.set_state(new Variant.boolean(true));
   165	        }
   166	        public void state_populate_docs(SimpleAction action, Variant? param)
   167	        {
   168	            populate_menu(documents_menu,UserDirectory.DOCUMENTS);
   169	            action.set_state(new Variant.boolean(true));
   170	        }
   171	        public void state_populate_music(SimpleAction action, Variant? param)
   172	        {
   173	            populate_menu(music_menu,UserDirectory.MUSIC);
   174	            action.set_state(new Variant.boolean(true));
   175	        }
   176	        public void state_populate_picts(SimpleAction action, Variant? param)
   177	        {
   178	            populate_menu(pictures_menu,UserDirectory.PICTURES);
   179	            action.set_state(new Variant.boolean(true));
   180	        }
   181	        public void state_populate_video(SimpleAction action, Variant? param)
   182	        {
   183	            populate_menu(videos_menu,UserDirectory.VIDEOS);
   184	            action.set_state(new Variant.boolean(true));
   185	        }
   186	        private void populate_menu(GLib.Menu menu, GLib.UserDirectory udir)
   187	        {
   188	            var desktop_dir = Environment.get_user_special_dir(udir);
   189	            menu.remove_all();
   190	            try
   191	            {
   192	                var dir = Dir.open(desktop_dir);
   193	                for(var name = dir.read_name();name != null; name = dir.read_name())
   194	                {
   195	                    var file = File.new_for_path(desktop_dir + "/" + name);
   196	                    var info = file.query_info(FileAttribute.STANDARD_DISPLAY_NAME+","
   197	                                               +FileAttribute.STANDARD_IS_HIDDEN,
   198	                                               FileQueryInfoFlags.NOFOLLOW_SYMLINKS);
   199	                    if (!info.get_is_hidden())
   200	                    {
   201	                        var item = new GLib.MenuItem(info.get_display_name(),null);
   202	                        item.set_action_and_target("menu.launch-uri", "s", file.get_uri() );
   203	                        menu.append_item(item);
   204	                    }
   205	                }
   206	            } catch (Error e) {
   207	                stderr.printf("%s\n",e.message);
   208	            }
   209	            if (menu.get_n_items() == 0)
   210	                menu.append(GLib.dgettext(Config.GETTEXT_PACKAGE,"No files"),"ls.this-should-not-be-reached");
   211	        }
   212	        ~DesktopHelper()
   213	        {
   214	            files_menu = null;
   215	            documents_menu = null;
   216	            pictures_menu = null;
   217	            music_menu = null;
   218	            videos_menu = null;
   219	        }
   220	    }
   221	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/helper-menumodel.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2015 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	using Gtk;
    21	
    22	namespace Appmenu
    23	{
    24	    internal class MenuModelHelper: Helper
    25	    {
    26	        private Helper dbus_helper = null;
    27	        public MenuModelHelper(MenuWidget w,
    28	                               string? gtk_unique_bus_name,
    29	                               string? app_menu_path,
    30	                               string? menubar_path,
    31	                               string? application_path,
    32	                               string? window_path,
    33	                               string? unity_path,
    34	                               string? title,
    35	                               DesktopAppInfo? info)
    36	        {
    37	            GLib.ActionGroup? appmenu_actions = null;
    38	            GLib.ActionGroup? menubar_actions = null;
    39	            GLib.ActionGroup? unity_actions = null;
    40	            DBusConnection? dbusconn = null;
    41	            try {
    42	                dbusconn = Bus.get_sync(BusType.SESSION);
    43	            } catch (Error e) {
    44	                stderr.printf("%s\n",e.message);
    45	                return;
    46	            }
    47	            if (application_path != null)
    48	                appmenu_actions = DBusActionGroup.get(dbusconn,gtk_unique_bus_name,application_path);
    49	            if (unity_path != null)
    50	                unity_actions = DBusActionGroup.get(dbusconn,gtk_unique_bus_name,unity_path);
    51	            if (window_path != null)
    52	                menubar_actions = DBusActionGroup.get(dbusconn,gtk_unique_bus_name,window_path);
    53	            GLib.MenuModel? appmenu = null;
    54	            if (app_menu_path != null)
    55	            {
    56	                appmenu = new GLib.Menu();
    57	                (appmenu as GLib.Menu).append_submenu(title,DBusMenuModel.get(dbusconn,gtk_unique_bus_name,app_menu_path));
    58	                w.set_appmenu(appmenu);
    59	            }
    60	            else
    61	                dbus_helper = new DBusAppMenu(w, title, gtk_unique_bus_name, info);
    62	            if (menubar_path != null)
    63	            {
    64	                var menubar = DBusMenuModel.get(dbusconn,gtk_unique_bus_name,menubar_path);
    65	                w.set_menubar(menubar);
    66	            }
    67	            else
    68	                w.set_menubar(null);
    69	            if (appmenu_actions != null)
    70	                w.insert_action_group("app",appmenu_actions);
    71	            if (menubar_actions != null)
    72	                w.insert_action_group("win",menubar_actions);
    73	            if (unity_actions != null)
    74	                w.insert_action_group("unity",unity_actions);
    75	        }
    76	    }
    77	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/launcher.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel
     3	 * Copyright (C) 2015-2016 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include <fcntl.h>
    20	#include <stdbool.h>
    21	#include <string.h>
    22	#include <sys/stat.h>
    23	#include <sys/types.h>
    24	#include <unistd.h>
    25	
    26	#include "launcher.h"
    27	
    28	typedef struct
    29	{
    30		pid_t pid;
    31	} SpawnData;
    32	
    33	void child_spawn_func(void *data)
    34	{
    35		setpgid(0, getpgid(getppid()));
    36	}
    37	
    38	bool vala_panel_launch(GDesktopAppInfo *app_info, GList *uris, GtkWidget *parent)
    39	{
    40		g_autoptr(GError) err            = NULL;
    41		g_autoptr(GAppLaunchContext) cxt = G_APP_LAUNCH_CONTEXT(
    42		    gdk_display_get_app_launch_context(gtk_widget_get_display(parent)));
    43		bool ret = g_desktop_app_info_launch_uris_as_manager(G_DESKTOP_APP_INFO(app_info),
    44		                                                     uris,
    45		                                                     cxt,
    46		                                                     G_SPAWN_SEARCH_PATH,
    47		                                                     child_spawn_func,
    48		                                                     NULL,
    49		                                                     NULL,
    50		                                                     NULL,
    51		                                                     &err);
    52		if (err)
    53			g_warning("%s\n", err->message);
    54		return ret;
    55	}
    56	
    57	GAppInfo *vala_panel_get_default_for_uri(const char *uri)
    58	{
    59		/* g_file_query_default_handler() calls
    60		 * g_app_info_get_default_for_uri_scheme() too, but we have to do it
    61		 * here anyway in case GFile can't parse @uri correctly.
    62		 */
    63		GAppInfo *app_info          = NULL;
    64		g_autofree char *uri_scheme = g_uri_parse_scheme(uri);
    65		if (uri_scheme != NULL && strlen(uri_scheme) <= 0)
    66			app_info = g_app_info_get_default_for_uri_scheme(uri_scheme);
    67		if (app_info == NULL)
    68		{
    69			g_autoptr(GFile) file = g_file_new_for_uri(uri);
    70			app_info              = g_file_query_default_handler(file, NULL, NULL);
    71		}
    72		return app_info;
    73	}
    74	
    75	void menu_launch_id(GSimpleAction *action, GVariant *param, gpointer user_data)
    76	{
    77		const char *id                  = g_variant_get_string(param, NULL);
    78		g_autoptr(GDesktopAppInfo) info = g_desktop_app_info_new(id);
    79		GtkWidget *window               = GTK_WIDGET(user_data);
    80		vala_panel_launch(info, NULL, GTK_WIDGET(window));
    81	}
    82	
    83	void menu_launch_uri(GSimpleAction *action, GVariant *param, gpointer user_data)
    84	{
    85		const char *uri                 = g_variant_get_string(param, NULL);
    86		g_autoptr(GList) uris           = g_list_append(NULL, (gpointer)uri);
    87		g_autoptr(GDesktopAppInfo) info = G_DESKTOP_APP_INFO(vala_panel_get_default_for_uri(uri));
    88		GtkWidget *window               = GTK_WIDGET(user_data);
    89		vala_panel_launch(info, uris, GTK_WIDGET(window));
    90	}
    91	
    92	void menu_launch_command(GSimpleAction *action, GVariant *param, gpointer user_data)
    93	{
    94		g_autoptr(GError) err           = NULL;
    95		const char *commandline         = g_variant_get_string(param, NULL);
    96		g_autoptr(GDesktopAppInfo) info = G_DESKTOP_APP_INFO(
    97		    g_app_info_create_from_commandline(commandline,
    98		                                       NULL,
    99		                                       G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION,
   100		                                       &err));
   101		if (err)
   102			g_warning("%s\n", err->message);
   103		GtkWidget *window = GTK_WIDGET(user_data);
   104		vala_panel_launch(info, NULL, GTK_WIDGET(window));
   105	}
   106	
   107	// FIXME: reads only first section
   108	char *posix_get_cmdline_string(const char *filename)
   109	{
   110		char *ret = (char *)g_malloc0(1024);
   111		int fd    = open(filename, O_RDONLY);
   112		bool rr   = read(fd, ret, 1024);
   113		if (rr)
   114			return ret;
   115		else
   116		{
   117			g_free(ret);
   118			return NULL;
   119		}
   120	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/launcher.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel
     3	 * Copyright (C) 2015-2016 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef LAUNCHER_H
    20	#define LAUNCHER_H
    21	
    22	#include <gdk/gdk.h>
    23	#include <gio/gdesktopappinfo.h>
    24	#include <gtk/gtk.h>
    25	#include <stdbool.h>
    26	
    27	bool vala_panel_launch(GDesktopAppInfo *app_info, GList *uris, GtkWidget *parent);
    28	GAppInfo *vala_panel_get_default_for_uri(const char *uri);
    29	void child_spawn_func(void *data);
    30	char *posix_get_cmdline_string(const char *filename);
    31	void menu_launch_id(GSimpleAction *action, GVariant *param, gpointer user_data);
    32	void menu_launch_uri(GSimpleAction *action, GVariant *param, gpointer user_data);
    33	void menu_launch_command(GSimpleAction *action, GVariant *param, gpointer user_data);
    34	
    35	#endif // LAUNCHER_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/launcher.vapi
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel
     3	 * Copyright (C) 2016 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using Gtk;
    20	using GLib;
    21	
    22	[CCode (cprefix="")]
    23	namespace Launcher
    24	{
    25	    [CCode (cheader_filename="launcher.h",cname="menu_launch_id")]
    26	    public static void activate_menu_launch_id(SimpleAction? action, Variant? param, void* user_data);
    27	    [CCode (cheader_filename="launcher.h",cname="menu_launch_uri")]
    28	    public static void activate_menu_launch_uri(SimpleAction? action, Variant? param, void* user_data);
    29	    [CCode (cheader_filename="launcher.h",cname="menu_launch_command")]
    30	    public static void activate_menu_launch_command(SimpleAction? action, Variant? param, void* user_data);
    31	    [CCode (cname="posix_get_cmdline_string",cheader_filename="launcher.h")]
    32	    public static string? posix_get_cmdline_string(string filename);
    33	}
    34	[CCode (cprefix="")]
    35	namespace MenuMaker
    36	{
    37	    [CCode (cheader_filename="launcher.h",cname="vala_panel_launch")]
    38	    public static bool launch(DesktopAppInfo info, GLib.List<string>? uris, Gtk.Widget parent);
    39	    [CCode (cheader_filename="launcher.h",cname="vala_panel_get_default_for_uri")]
    40	    public static AppInfo get_default_for_uri(string uri);
    41	}
    42	
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/libappmenu.gresource.xml
--------------------------------------------------------------------------------
     1	<?xml version="1.0" encoding="UTF-8"?>
     2	
     3	<gresources>
     4	  <gresource prefix="/org/vala-panel/appmenu">
     5	    <file compressed="true" preprocess="xml-stripblanks">desktop-menus.ui</file>
     6	    <file compressed="true">appmenu.css</file>
     7	  </gresource>
     8	</gresources>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/libwnck-aux.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel
     3	 * Copyright (C) 2020 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include <X11/Xatom.h>
    20	#include <gdk/gdkx.h>
    21	
    22	#include "libwnck-aux.h"
    23	
    24	static Display *get_xdisplay(gboolean *opened)
    25	{
    26		Display *xdisplay;
    27		xdisplay = gdk_x11_get_default_xdisplay();
    28	
    29		if (opened)
    30			*opened = FALSE;
    31	
    32		if (!xdisplay)
    33		{
    34			xdisplay = XOpenDisplay(NULL);
    35	
    36			if (xdisplay)
    37			{
    38				if (opened)
    39					*opened = TRUE;
    40			}
    41		}
    42	
    43		return xdisplay;
    44	}
    45	
    46	static void libwnck_aux_get_string_window_hint(ulong xid, const char *atom_name, char **return_hint)
    47	{
    48		Display *XDisplay;
    49		gint format;
    50		gulong numItems;
    51		gulong bytesAfter;
    52		Atom type;
    53		unsigned char *buffer;
    54		gboolean close_display;
    55	
    56		if (return_hint)
    57			*return_hint = NULL;
    58	
    59		g_return_if_fail(xid != 0);
    60		g_return_if_fail(return_hint);
    61	
    62		close_display = FALSE;
    63		XDisplay      = get_xdisplay(&close_display);
    64	
    65		if (!XDisplay)
    66		{
    67			g_warning("%s: Unable to get a valid XDisplay", G_STRFUNC);
    68			return;
    69		}
    70	
    71		gdk_x11_display_error_trap_push(GDK_X11_DISPLAY(gdk_display_get_default()));
    72	
    73		int result = XGetWindowProperty(XDisplay,
    74		                                xid,
    75		                                gdk_x11_get_xatom_by_name(atom_name),
    76		                                0,
    77		                                G_MAXINT,
    78		                                False,
    79		                                AnyPropertyType,
    80		                                &type,
    81		                                &format,
    82		                                &numItems,
    83		                                &bytesAfter,
    84		                                &buffer);
    85	
    86		bool x_error = gdk_x11_display_error_trap_pop(GDK_X11_DISPLAY(gdk_display_get_default()));
    87	
    88		if (close_display)
    89			XCloseDisplay(XDisplay);
    90	
    91		if (x_error)
    92		{
    93			XFree(buffer);
    94			return;
    95		}
    96	
    97		if (result == Success && numItems > 0)
    98		{
    99			if (return_hint && buffer && buffer[0] != '\0')
   100			{
   101				if (type == XA_STRING || type == gdk_x11_get_xatom_by_name("UTF8_STRING"))
   102					*return_hint = g_strdup((char *)buffer);
   103			}
   104	
   105			XFree(buffer);
   106		}
   107	}
   108	
   109	/**
   110	 * Obtain utf8 property for a given window
   111	 */
   112	char *libwnck_aux_get_utf8_prop(ulong window, const char *prop)
   113	{
   114		char *ret;
   115		libwnck_aux_get_string_window_hint(window, prop, &ret);
   116		return ret;
   117	}
   118	
   119	GDesktopAppInfo *libwnck_aux_match_wnck_window(ValaPanelMatcher *self, WnckWindow *window)
   120	{
   121		if (!window)
   122			return NULL;
   123		ulong xid               = wnck_window_get_xid(window);
   124		int64_t pid             = wnck_window_get_pid(window);
   125		const char *cls_name    = wnck_window_get_class_instance_name(window);
   126		const char *grp_name    = wnck_window_get_class_group_name(window);
   127		g_autofree char *gtk_id = libwnck_aux_get_utf8_prop(xid, "_GTK_APPLICATION_ID");
   128		return vala_panel_matcher_match_arbitrary(self, cls_name, grp_name, gtk_id, pid);
   129	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/libwnck-aux.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel
     3	 * Copyright (C) 2020 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include "matcher.h"
    20	#include <libwnck/libwnck.h>
    21	
    22	#ifndef WNCK_AUX_INCLUDED
    23	#define WNCK_AUX_INCLUDED
    24	
    25	G_BEGIN_DECLS
    26	
    27	char *libwnck_aux_get_utf8_prop(ulong window, const char *prop);
    28	GDesktopAppInfo *libwnck_aux_match_wnck_window(ValaPanelMatcher *self, WnckWindow *window);
    29	
    30	G_END_DECLS
    31	
    32	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/matcher.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include "matcher.h"
    20	
    21	struct _ValaPanelMatcher
    22	{
    23		GObject parent_instance;
    24		GHashTable *startupids;
    25		GHashTable *simpletons;
    26		GHashTable *desktops;
    27		GHashTable *exec_cache;
    28		GHashTable *pid_cache;
    29		GAppInfoMonitor *monitor;
    30		bool invalidated;
    31		GRecMutex __lock_invalidated;
    32		GDBusConnection *bus;
    33	};
    34	
    35	static uint app_changed_singal;
    36	
    37	G_DEFINE_TYPE(ValaPanelMatcher, vala_panel_matcher, G_TYPE_OBJECT)
    38	
    39	static ValaPanelMatcher *default_matcher = NULL;
    40	
    41	static void vala_panel_matcher_finalize(GObject *obj)
    42	{
    43		ValaPanelMatcher *self = VALA_PANEL_MATCHER(obj);
    44		g_clear_pointer(&self->startupids, g_hash_table_unref);
    45		g_clear_pointer(&self->simpletons, g_hash_table_unref);
    46		g_clear_pointer(&self->desktops, g_hash_table_unref);
    47		g_clear_pointer(&self->exec_cache, g_hash_table_unref);
    48		g_clear_pointer(&self->pid_cache, g_hash_table_unref);
    49		g_rec_mutex_clear(&self->__lock_invalidated);
    50		g_clear_object(&self->bus);
    51		g_clear_object(&self->monitor);
    52		G_OBJECT_CLASS(vala_panel_matcher_parent_class)->finalize(obj);
    53	}
    54	
    55	static void create_simpletons(ValaPanelMatcher *self)
    56	{
    57		g_hash_table_insert(self->simpletons,
    58		                    g_strdup("google-chrome-stable"),
    59		                    g_strdup("google-chrome"));
    60		g_hash_table_insert(self->simpletons, g_strdup("calibre-gui"), g_strdup("calibre"));
    61		g_hash_table_insert(self->simpletons, g_strdup("code - oss"), g_strdup("vscode-oss"));
    62		g_hash_table_insert(self->simpletons, g_strdup("code"), g_strdup("vscode"));
    63		g_hash_table_insert(self->simpletons, g_strdup("psppire"), g_strdup("pspp"));
    64		g_hash_table_insert(self->simpletons,
    65		                    g_strdup("gnome-twitch"),
    66		                    g_strdup("com.vinszent.gnometwitch"));
    67		g_hash_table_insert(self->simpletons, g_strdup("anoise.py"), g_strdup("anoise"));
    68	}
    69	
    70	static void vala_panel_matcher_init(ValaPanelMatcher *self)
    71	{
    72		self->simpletons = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
    73		create_simpletons(self);
    74		self->pid_cache  = g_hash_table_new_full(g_direct_hash, g_direct_equal, NULL, g_free);
    75		self->desktops   = NULL;
    76		self->exec_cache = NULL;
    77		self->startupids = NULL;
    78		self->monitor    = g_app_info_monitor_get();
    79		g_rec_mutex_init(&self->__lock_invalidated);
    80		self->invalidated = false;
    81	}
    82	
    83	static void matcher_reload_ids(ValaPanelMatcher *self)
    84	{
    85		g_clear_pointer(&self->startupids, g_hash_table_unref);
    86		g_clear_pointer(&self->desktops, g_hash_table_unref);
    87		g_clear_pointer(&self->exec_cache, g_hash_table_unref);
    88		self->startupids = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
    89		self->desktops   = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_object_unref);
    90		self->exec_cache = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_free);
    91		GList *app_info_list = g_app_info_get_all();
    92		for (GList *l = app_info_list; l != NULL; l = g_list_next(l))
    93		{
    94			GDesktopAppInfo *dinfo = G_DESKTOP_APP_INFO(l->data);
    95			const char *id         = g_app_info_get_id(G_APP_INFO(dinfo));
    96			if (g_desktop_app_info_get_startup_wm_class(dinfo) != NULL)
    97			{
    98				char *down_index =
    99				    g_utf8_strdown(g_desktop_app_info_get_startup_wm_class(dinfo), -1);
   100				g_hash_table_insert(self->startupids, down_index, g_strdup(id));
   101			}
   102			char *down_index = g_utf8_strdown(id, -1);
   103			g_hash_table_insert(self->desktops, down_index, dinfo);
   104	
   105			/* Get TryExec if we can, otherwise just Exec */
   106			char *try_exec = g_desktop_app_info_get_string(dinfo, "TryExec");
   107			if (try_exec == NULL)
   108			{
   109				const char *exec = g_app_info_get_executable(G_APP_INFO(dinfo));
   110				try_exec         = exec ? g_strdup(exec) : NULL;
   111			}
   112			if (try_exec == NULL)
   113				continue;
   114			/* Sanitize it */
   115			char *exec = g_uri_unescape_string(try_exec, NULL);
   116			g_clear_pointer(&try_exec, g_free);
   117			try_exec = g_path_get_basename(exec);
   118			g_clear_pointer(&exec, g_free);
   119			g_hash_table_insert(self->exec_cache, try_exec, g_strdup(id));
   120		}
   121		g_list_free(app_info_list);
   122	}
   123	
   124	static void matcher_bus_signal_subscribe(GDBusConnection *connection, const gchar *sender_name,
   125	                                         const gchar *object_path, const gchar *interface_name,
   126	                                         const gchar *signal_name, GVariant *parameters,
   127	                                         gpointer user_data)
   128	{
   129		ValaPanelMatcher *self              = VALA_PANEL_MATCHER(user_data);
   130		g_autoptr(GVariant) desktop_variant = NULL;
   131		int64_t pid                         = 0;
   132		g_variant_get(parameters,
   133		              "(@aysxas@a{sv})",
   134		              &desktop_variant,
   135		              NULL,
   136		              &pid,
   137		              NULL,
   138		              NULL,
   139		              NULL);
   140		const char *desktop_file = g_variant_get_bytestring(desktop_variant);
   141		if (!g_strcmp0(desktop_file, "") || !pid)
   142			return;
   143	
   144		g_hash_table_insert(self->pid_cache, GINT_TO_POINTER(pid), g_strdup(desktop_file));
   145		g_signal_emit(self, app_changed_singal, 0, desktop_file);
   146	}
   147	
   148	static void matcher_bus_get_finish(GObject *source_object, GAsyncResult *res, gpointer user_data)
   149	{
   150		g_autoptr(GError) err  = NULL;
   151		ValaPanelMatcher *self = VALA_PANEL_MATCHER(user_data);
   152		self->bus              = g_bus_get_finish(res, &err);
   153		if (err)
   154		{
   155			g_warning("%s\n", err->message);
   156			return;
   157		}
   158		g_dbus_connection_signal_subscribe(self->bus,
   159		                                   NULL,
   160		                                   "org.gtk.gio.DesktopAppInfo",
   161		                                   "Launched",
   162		                                   "/org/gtk/gio/DesktopAppInfo",
   163		                                   NULL,
   164		                                   (GDBusSignalFlags)0,
   165		                                   matcher_bus_signal_subscribe,
   166		                                   self,
   167		                                   NULL);
   168	}
   169	
   170	static bool invalidate_ids(void *data)
   171	{
   172		ValaPanelMatcher *self = VALA_PANEL_MATCHER(data);
   173		g_rec_mutex_lock(&self->__lock_invalidated);
   174		self->invalidated = true;
   175		g_rec_mutex_unlock(&self->__lock_invalidated);
   176		return false;
   177	}
   178	
   179	static void on_monitor_changed(GAppInfoMonitor *gappinfomonitor, gpointer user_data)
   180	{
   181		g_idle_add((GSourceFunc)invalidate_ids, user_data);
   182	}
   183	
   184	static GObject *vala_panel_matcher_constructor(GType type, guint n_construct_properties,
   185	                                               GObjectConstructParam *construct_properties)
   186	{
   187		GObjectClass *parent_class = G_OBJECT_CLASS(vala_panel_matcher_parent_class);
   188		GObject *obj =
   189		    parent_class->constructor(type, n_construct_properties, construct_properties);
   190		ValaPanelMatcher *self = VALA_PANEL_MATCHER(obj);
   191		g_bus_get(G_BUS_TYPE_SESSION, NULL, matcher_bus_get_finish, self);
   192		self->monitor = g_app_info_monitor_get();
   193		g_signal_connect(self->monitor, "changed", G_CALLBACK(on_monitor_changed), self);
   194		matcher_reload_ids(self);
   195		return obj;
   196	}
   197	
   198	static void matcher_check_invalidated(ValaPanelMatcher *self)
   199	{
   200		if (self->invalidated)
   201		{
   202			g_rec_mutex_lock(&self->__lock_invalidated);
   203			matcher_reload_ids(self);
   204			self->invalidated = false;
   205			g_rec_mutex_unlock(&self->__lock_invalidated);
   206		}
   207	}
   208	
   209	ValaPanelMatcher *vala_panel_matcher_get()
   210	{
   211		if (VALA_PANEL_IS_MATCHER(default_matcher))
   212			return g_object_ref(default_matcher);
   213	
   214		return (default_matcher = g_object_new(vala_panel_matcher_get_type(), NULL));
   215	}
   216	
   217	GDesktopAppInfo *vala_panel_matcher_match_arbitrary(ValaPanelMatcher *self, const char *class,
   218	                                                    const char *group, const char *gtk, int64_t pid)
   219	{
   220		matcher_check_invalidated(self);
   221		const char *checks[] = { class, group };
   222		for (int i = 0; i < 2; i++)
   223		{
   224			if (!checks[i])
   225				continue;
   226	
   227			/* First, check startupids for this app */
   228			g_autofree char *check = g_utf8_strdown(checks[i], -1);
   229			if (g_hash_table_contains(self->startupids, check))
   230			{
   231				g_autofree char *dname =
   232				    g_utf8_strdown((const char *)g_hash_table_lookup(self->startupids,
   233				                                                     check),
   234				                   -1);
   235				if (g_hash_table_contains(self->desktops, dname))
   236					return G_DESKTOP_APP_INFO(
   237					    g_hash_table_lookup(self->desktops, dname));
   238			}
   239			/* Then try class -> desktop match */
   240			g_autofree char *dname = g_strdup_printf("%s.desktop", check);
   241			if (g_hash_table_contains(self->desktops, dname))
   242				return G_DESKTOP_APP_INFO(g_hash_table_lookup(self->desktops, dname));
   243		}
   244	
   245		/* If no classes matched, try PID cache */
   246		if (g_hash_table_contains(self->pid_cache, GINT_TO_POINTER(pid)))
   247		{
   248			const char *filename =
   249			    (const char *)g_hash_table_lookup(self->pid_cache, GINT_TO_POINTER(pid));
   250			return g_desktop_app_info_new_from_filename(filename);
   251		}
   252	
   253		/* Next, check GtkApplication ID */
   254		if (gtk != NULL)
   255		{
   256			g_autofree char *app_id = g_utf8_strdown(gtk, -1);
   257			g_autofree char *gtk_id = g_strdup_printf("%s.desktop", app_id);
   258			if (g_hash_table_contains(self->desktops, gtk_id))
   259				return G_DESKTOP_APP_INFO(g_hash_table_lookup(self->desktops, gtk_id));
   260		}
   261	
   262		/* Check hardcoded matches */
   263		if (group)
   264		{
   265			g_autofree char *grp = g_utf8_strdown(group, -1);
   266			if (g_hash_table_contains(self->simpletons, grp))
   267			{
   268				g_autofree char *dname = g_strdup_printf("%s.desktop", grp);
   269				if (g_hash_table_contains(self->desktops, dname))
   270					return G_DESKTOP_APP_INFO(
   271					    g_hash_table_lookup(self->desktops, dname));
   272			}
   273		}
   274		if (class)
   275		{
   276			g_autofree char *grp = g_utf8_strdown(class, -1);
   277			if (g_hash_table_contains(self->simpletons, grp))
   278			{
   279				g_autofree char *dname = g_strdup_printf("%s.desktop", grp);
   280				if (g_hash_table_contains(self->desktops, dname))
   281					return G_DESKTOP_APP_INFO(
   282					    g_hash_table_lookup(self->desktops, dname));
   283			}
   284		}
   285	
   286		/* Lastly, try to match an exec line */
   287		for (int i = 0; i < 2; i++)
   288		{
   289			if (!checks[i])
   290				continue;
   291	
   292			g_autofree char *check = g_utf8_strdown(checks[i], -1);
   293			const char *id         = (const char *)g_hash_table_lookup(self->exec_cache, check);
   294			if (id == NULL)
   295				continue;
   296			GDesktopAppInfo *a = G_DESKTOP_APP_INFO(g_hash_table_lookup(self->desktops, id));
   297			if (a != NULL)
   298				return a;
   299		}
   300	
   301		/* IDK. Sorry. */
   302		return NULL;
   303	}
   304	
   305	static void vala_panel_matcher_class_init(ValaPanelMatcherClass *klass)
   306	{
   307		vala_panel_matcher_parent_class    = g_type_class_peek_parent(klass);
   308		G_OBJECT_CLASS(klass)->constructor = vala_panel_matcher_constructor;
   309		G_OBJECT_CLASS(klass)->finalize    = vala_panel_matcher_finalize;
   310		app_changed_singal                 = g_signal_new("app-launched",
   311	                                          vala_panel_matcher_get_type(),
   312	                                          G_SIGNAL_RUN_LAST,
   313	                                          0,
   314	                                          NULL,
   315	                                          NULL,
   316	                                          g_cclosure_marshal_VOID__STRING,
   317	                                          G_TYPE_NONE,
   318	                                          1,
   319	                                          G_TYPE_STRING);
   320	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/matcher.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef MATCHER_H
    20	#define MATCHER_H
    21	
    22	#include <gio/gdesktopappinfo.h>
    23	#include <gio/gio.h>
    24	#include <libwnck/libwnck.h>
    25	#include <stdbool.h>
    26	
    27	G_BEGIN_DECLS
    28	
    29	G_DECLARE_FINAL_TYPE(ValaPanelMatcher, vala_panel_matcher, VALA_PANEL, MATCHER, GObject)
    30	
    31	ValaPanelMatcher *vala_panel_matcher_get();
    32	GDesktopAppInfo *vala_panel_matcher_match_arbitrary(ValaPanelMatcher *self, const char *class,
    33	                                                    const char *group, const char *gtk,
    34	                                                    int64_t pid);
    35	
    36	G_END_DECLS
    37	
    38	#endif // MATCHER_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/matcher.vapi
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	[CCode(cheader_filename="matcher.h")]
    20	public class ValaPanel.Matcher : GLib.Object
    21	{
    22	    [CCode (has_construct_function = false)]
    23	    private Matcher();
    24	    public static Matcher @get();
    25	    public unowned GLib.DesktopAppInfo match_arbitrary(string class, string group, string gtk_id, int pid);
    26	}
    27	
    28	[CCode(cheader_filename="libwnck-aux.h")]
    29	public unowned GLib.DesktopAppInfo libwnck_aux_match_wnck_window(ValaPanel.Matcher matcher, Wnck.Window win);
    30	public string libwnck_aux_get_utf8_prop(ulong xid, string prop);
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/menu-widget.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2015 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	
    21	namespace Key
    22	{
    23	    public const string COMPACT_MODE = "compact-mode";
    24	    public const string BOLD_APPLICATION_NAME = "bold-application-name";
    25	}
    26	
    27	namespace Appmenu
    28	{
    29	    public class MenuWidget: Gtk.Bin
    30	    {
    31	        public bool compact_mode {get; set; default = false;}
    32	        public bool bold_application_name {get; set; default = false;}
    33	        private Gtk.Adjustment? scroll_adj = null;
    34	        private Gtk.ScrolledWindow? scroller = null;
    35	        private Gtk.CssProvider provider;
    36	        private GLib.MenuModel? appmenu = null;
    37	        private GLib.MenuModel? menubar = null;
    38	        private Backend backend = new BackendImpl();
    39	        private Gtk.MenuBar mwidget = new Gtk.MenuBar();
    40	        private ulong backend_connector = 0;
    41	        private ulong compact_connector = 0;
    42	        construct
    43	        {
    44	            provider = new Gtk.CssProvider();
    45	            provider.load_from_resource("/org/vala-panel/appmenu/appmenu.css");
    46	            unowned Gtk.StyleContext context = this.get_style_context();
    47	            context.add_class("-vala-panel-appmenu-core");
    48	            unowned Gtk.StyleContext mcontext = mwidget.get_style_context();
    49	            Signal.connect(this,"notify",(GLib.Callback)restock,null);
    50	            backend_connector = backend.active_model_changed.connect(()=>{
    51	                Timeout.add(50,()=>{
    52	                    backend.set_active_window_menu(this);
    53	                    return Source.REMOVE;
    54	                });
    55	            });
    56	            mcontext.add_class("-vala-panel-appmenu-private");
    57	            Gtk.StyleContext.add_provider_for_screen(this.get_screen(), provider,Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
    58	            //Setup menubar
    59	            scroll_adj = new Gtk.Adjustment(0, 0, 0, 20, 20, 0);
    60	            scroller = new Gtk.ScrolledWindow(scroll_adj, null);
    61	            scroller.set_hexpand(true);
    62	            scroller.set_policy(Gtk.PolicyType.EXTERNAL, Gtk.PolicyType.NEVER);
    63	            scroller.set_shadow_type(Gtk.ShadowType.NONE);
    64	            scroller.scroll_event.connect(on_scroll_event);
    65	            scroller.set_min_content_width(16);
    66	            scroller.set_min_content_height(16);
    67	            scroller.set_propagate_natural_height(true);
    68	            scroller.set_propagate_natural_width(true);
    69	            this.add(scroller);
    70	            scroller.add(mwidget);
    71	            mwidget.show();
    72	            scroller.show();
    73	            this.show();
    74	        }
    75	        public MenuWidget()
    76	        {
    77	            Object();
    78	        }
    79	        private void restock()
    80	        {
    81	            var menu = new GLib.Menu();
    82	            if (this.appmenu != null)
    83	                menu.append_section(null,this.appmenu);
    84	            if (this.menubar != null)
    85	                menu.append_section(null,this.menubar);
    86	
    87	            int items = -1;
    88	            if (this.menubar != null)
    89	                items = this.menubar.get_n_items();
    90	
    91	            if (this.compact_mode && items == 0)
    92	            {
    93	                compact_connector = this.menubar.items_changed.connect((a,b,c)=>{
    94	                    restock();
    95	                });
    96	            }
    97	            if (this.compact_mode && items > 0)
    98	            {
    99	                if(compact_connector > 0)
   100	                {
   101	                    this.menubar.disconnect(compact_connector);
   102	                    compact_connector = 0;
   103	                }
   104	                var compact = new GLib.Menu();
   105	                string? name = null;
   106	                if(this.appmenu != null)
   107	                    this.appmenu.get_item_attribute(0,"label","s",&name);
   108	                else
   109	                    name = GLib.dgettext(Config.GETTEXT_PACKAGE,"Compact Menu");
   110	                compact.append_submenu(name,menu);
   111	                mwidget.bind_model(compact,null,true);
   112	            }
   113	            else
   114	                mwidget.bind_model(menu,null,true);
   115	            unowned Gtk.StyleContext mcontext = mwidget.get_style_context();
   116	            if(bold_application_name)
   117	                mcontext.add_class("-vala-panel-appmenu-bold");
   118	            else
   119	                mcontext.remove_class("-vala-panel-appmenu-bold");
   120	        }
   121	        public void set_appmenu(GLib.MenuModel? appmenu_model)
   122	        {
   123	            this.appmenu = appmenu_model;
   124	            this.restock();
   125	        }
   126	        public void set_menubar(GLib.MenuModel? menubar_model)
   127	        {
   128	            this.menubar = menubar_model;
   129	            this.restock();
   130	        }
   131	        protected bool on_scroll_event(Gtk.Widget w, Gdk.EventScroll event)
   132	        {
   133	            var val = scroll_adj.get_value();
   134	            var incr = scroll_adj.get_step_increment();
   135	            if (event.direction == Gdk.ScrollDirection.UP)
   136	            {
   137	                scroll_adj.set_value(val - incr);
   138	                return true;
   139	            }
   140	            if (event.direction == Gdk.ScrollDirection.DOWN)
   141	            {
   142	                scroll_adj.set_value(val + incr);
   143	                return true;
   144	            }
   145	            if (event.direction == Gdk.ScrollDirection.LEFT)
   146	            {
   147	                scroll_adj.set_value(val - incr);
   148	                return true;
   149	            }
   150	            if (event.direction == Gdk.ScrollDirection.RIGHT)
   151	            {
   152	                scroll_adj.set_value(val + incr);
   153	                return true;
   154	            }
   155	            if (event.direction == Gdk.ScrollDirection.SMOOTH)
   156	            {
   157	                scroll_adj.set_value(val + incr * (event.delta_y + event.delta_x));
   158	                return true;
   159	            }
   160	            return false;
   161	        }
   162	        protected override void map()
   163	        {
   164	            base.map();
   165	            unowned Gtk.Settings gtksettings = this.get_settings();
   166	            gtksettings.gtk_shell_shows_app_menu = false;
   167	            gtksettings.gtk_shell_shows_menubar = false;
   168	        }
   169	        protected override void get_preferred_height(out int minimum_height, out int natural_height)
   170	        {
   171	            int min, nat;
   172	            scroller.get_preferred_height(out min, null);
   173	            mwidget.get_preferred_height(null, out nat);
   174	            minimum_height = int.min(min, nat);
   175	            natural_height = int.max(min, nat);
   176	        }
   177	        protected override void get_preferred_width(out int minimum_height, out int natural_height)
   178	        {
   179	            int min, nat;
   180	            scroller.get_preferred_width(out min, null);
   181	            mwidget.get_preferred_width(null, out nat);
   182	            minimum_height = int.min(min, nat);
   183	            natural_height = int.max(min, nat);
   184	        }
   185	    }
   186	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/meson.build
--------------------------------------------------------------------------------
     1	sources = files(
     2	    'appmenu-abstractions.vala',
     3	    'registrar.vala',
     4	    'menu-widget.vala',
     5	    'helper-desktop.vala',
     6	    'helper-dbus.vala',
     7	    'helper-dbusmenu.vala',
     8	    'helper-menumodel.vala',
     9	    'launcher.vapi',
    10	    'launcher.c',
    11	    'launcher.h'
    12	)
    13	
    14	wnck_src = files(
    15	    'appmenu-wnck.vala',
    16	    'matcher.c',
    17	    'matcher.h',
    18	    'libwnck-aux.c',
    19	    'libwnck-aux.h',
    20	    'matcher.vapi'
    21	)
    22	
    23	libres = gnome.compile_resources(
    24	    'lib', 'libappmenu.gresource.xml',
    25	    source_dir: '.',
    26	    c_name: 'lib'
    27	)
    28	valac = meson.get_compiler('vala')
    29	posix_dep = valac.find_library('posix')
    30	
    31	importer_dep = dependency('appmenu-glib-translator', fallback : ['appmenu-glib-translator', 'importer_dep'])
    32	
    33	appmenu_deps = [giounix, gtk, importer_dep, posix_dep]
    34	appmenu_cflags = []
    35	if backend_wnck
    36	    sources += wnck_src
    37	    appmenu_deps += wnck
    38	    appmenu_cflags += ['-DWNCK_I_KNOW_THIS_IS_UNSTABLE']
    39	endif
    40	
    41	appmenu_lib = static_library('libappmenu',
    42	        sources, config,
    43	        dependencies: appmenu_deps,
    44	        c_args: appmenu_cflags,
    45	        pic: true
    46	    )
    47	appmenu_inc = include_directories('.')
    48	
    49	appmenu_dep = declare_dependency(
    50	    include_directories: appmenu_inc,
    51	    dependencies: [gtk, giounix],
    52	    link_whole: appmenu_lib
    53	)
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/lib/registrar.vala
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2015 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	using GLib;
    20	
    21	namespace Appmenu
    22	{
    23	    public const string DBUS_NAME = "com.canonical.AppMenu.Registrar";
    24	    public const string REG_IFACE = "com.canonical.AppMenu.Registrar";
    25	    public const string REG_OBJECT = "/com/canonical/AppMenu/Registrar";
    26	    public const string KDE_APPMENU_NAME = "org.kde.kappmenu";
    27	    public const string KDE_APPMENU_VIEW_NAME = "org.kde.kappmenuview";
    28	    public const string KDE_APPMENU_OBJECT = "/KAppMenu";
    29	
    30	    [DBus (name = "com.canonical.AppMenu.Registrar")]
    31	    public interface OuterRegistrar : DBusProxy
    32	    {
    33	        public signal void window_registered(uint window_id, string service, ObjectPath path);
    34	        public signal void window_unregistered(uint window_id);
    35	        public abstract void register_window(uint window, ObjectPath menu_object_path) throws Error;
    36	        public abstract void unregister_window(uint window) throws Error;
    37	        public abstract void get_menu_for_window(uint window, out string service, out ObjectPath path) throws Error;
    38	        public abstract void get_menus([DBus (signature="a(uso)")] out Variant menus) throws Error;
    39	    }
    40	    [DBus (name = "org.kde.kappmenu")]
    41	    public interface KDEAppMenu : DBusProxy
    42	    {
    43	        public abstract void show_menu(int x,int y,string service, ObjectPath path,int actionId) throws Error;
    44	        public abstract void reconfigure() throws Error;
    45	        public signal void reconfigured();
    46	        public signal void show_request(string service, ObjectPath path,int actionId);
    47	        public signal void menu_shown(string service, ObjectPath path);
    48	        public signal void menu_hidden(string service, ObjectPath path);
    49	    }
    50	    public class DBusMenuRegistrarProxy: Object
    51	    {
    52	        public bool have_registrar {get; private set;}
    53	        private OuterRegistrar outer_registrar;
    54	        private uint watched_name;
    55	        public DBusMenuRegistrarProxy()
    56	        {
    57	            Object();
    58	        }
    59	        public signal void registrar_changed(bool have_registrar);
    60	        public signal void window_registered(uint window_id, string service, ObjectPath path);
    61	        public signal void window_unregistered(uint window_id);
    62	        private void create_outer_registrar()
    63	        {
    64	            watched_name = Bus.watch_name(BusType.SESSION,REG_IFACE,GLib.BusNameWatcherFlags.NONE,
    65	                                                    () => {
    66	                                                        try{
    67	                                                            outer_registrar = Bus.get_proxy_sync(BusType.SESSION,REG_IFACE,REG_OBJECT);
    68	                                                            outer_registrar.window_registered.connect((w,s,p)=>{this.window_registered(w,s,p);});
    69	                                                            outer_registrar.window_unregistered.connect((w)=>{this.window_unregistered(w);});
    70	                                                            have_registrar = true;
    71	                                                            registrar_changed(true);
    72	                                                        } catch (Error e) {stderr.printf("%s\n",e.message);}
    73	                                                        },
    74	                                                    () => {
    75	                                                        have_registrar = false;
    76	                                                        outer_registrar = null;
    77	                                                        registrar_changed(false);
    78	                                                        }
    79	                                                    );
    80	        }
    81	        construct
    82	        {
    83	            have_registrar = false;
    84	            try{
    85	                var con = Bus.get_sync(BusType.SESSION);
    86	                con.call_sync(
    87	                    DBUS_NAME,
    88	                    REG_OBJECT,
    89	                    REG_IFACE,
    90	                    "GetMenus",
    91	                    null,null,
    92	                    DBusCallFlags.NONE, -1);
    93	            }
    94	            catch(Error e)
    95	            {
    96	                stderr.printf("%s\n",e.message);
    97	            }
    98	            create_outer_registrar();
    99	        }
   100	        public void get_menu_for_window(uint window, out string name, out ObjectPath path)
   101	        {
   102	            name = "";
   103	            path = new ObjectPath("/");
   104	            if (!have_registrar)
   105	                return;
   106	            try{
   107	                outer_registrar.get_menu_for_window(window,out name, out path);
   108	            } catch (Error e) {stderr.printf("%s\n",e.message);}
   109	        }
   110	        ~DBusMenuRegistrarProxy()
   111	        {
   112	            Bus.unwatch_name(watched_name);
   113	        }
   114	    }
   115	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/LICENSE
--------------------------------------------------------------------------------
     1	
     2	GNU LESSER GENERAL PUBLIC LICENSE
     3	
     4	Version 3, 29 June 2007
     5	
     6	Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/>
     7	
     8	Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.
     9	
    10	This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.
    11	0. Additional Definitions.
    12	
    13	As used herein, “this License” refers to version 3 of the GNU Lesser General Public License, and the “GNU GPL” refers to version 3 of the GNU General Public License.
    14	
    15	“The Library” refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.
    16	
    17	An “Application” is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.
    18	
    19	A “Combined Work” is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the “Linked Version”.
    20	
    21	The “Minimal Corresponding Source” for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.
    22	
    23	The “Corresponding Application Code” for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.
    24	1. Exception to Section 3 of the GNU GPL.
    25	
    26	You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.
    27	2. Conveying Modified Versions.
    28	
    29	If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:
    30	
    31	    a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or
    32	    b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.
    33	
    34	3. Object Code Incorporating Material from Library Header Files.
    35	
    36	The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:
    37	
    38	    a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License.
    39	    b) Accompany the object code with a copy of the GNU GPL and this license document.
    40	
    41	4. Combined Works.
    42	
    43	You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:
    44	
    45	    a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License.
    46	    b) Accompany the Combined Work with a copy of the GNU GPL and this license document.
    47	    c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document.
    48	    d) Do one of the following:
    49	        0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.
    50	        1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version.
    51	    e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)
    52	
    53	5. Combined Libraries.
    54	
    55	You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:
    56	
    57	    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License.
    58	    b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.
    59	
    60	6. Revised Versions of the GNU Lesser General Public License.
    61	
    62	The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.
    63	
    64	Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.
    65	
    66	If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/meson.build
--------------------------------------------------------------------------------
     1	project(
     2	  'vala-panel-appmenu',
     3	  'vala',
     4	  'c',
     5	version : '25.04',
     6	meson_version : '>=0.51.0',
     7	license : 'LGPL-3.0-or-later',
     8	default_options : ['c_std=gnu11', 'buildtype=debugoptimized', 'warning_level=1']
     9	)
    10	
    11	am_cflags = [
    12	    '-fstack-protector',
    13	    '-DGETTEXT_PACKAGE="@0@"'.format(meson.project_name()),
    14	]
    15	add_project_arguments(am_cflags, language: 'c')
    16	
    17	vapi_dir = join_paths(meson.current_source_dir(), 'vapi')
    18	add_project_arguments(['--vapidir', vapi_dir], language: 'vala')
    19	
    20	##################
    21	# Module imports #
    22	##################
    23	
    24	gnome = import('gnome')
    25	i18n = import('i18n')
    26	
    27	###############
    28	# Directories #
    29	###############
    30	prefix = get_option('prefix')
    31	datadir = get_option('datadir')
    32	localedir = get_option('localedir')
    33	schema_dir = join_paths(get_option('datadir'), 'glib-2.0', 'schemas')
    34	
    35	
    36	################
    37	# Dependencies #
    38	################
    39	glib_ver = '>=2.52.0'
    40	giounix = dependency('gio-unix-2.0', version: glib_ver)
    41	
    42	gdkpixbuf = dependency('gdk-pixbuf-2.0', required: false)
    43	
    44	gtk_ver = '>=3.22.0'
    45	gtk = dependency('gtk+-3.0', version: gtk_ver)
    46	
    47	backend_opt = get_option('wm_backend')
    48	backend_wnck = false
    49	
    50	wnck_ver = '>=3.4.8'
    51	wnck = dependency('libwnck-3.0', version: wnck_ver, required: backend_opt == 'wnck')
    52	
    53	if(wnck.found() and (backend_opt == 'wnck' or backend_opt == 'auto'))
    54	    backend_wnck = true
    55	endif
    56	
    57	if(not (backend_wnck))
    58	    error('No backend available (libwnck3 required)')
    59	endif
    60	
    61	vp_ver = '>=24.03'
    62	vp = dependency('vala-panel', version:  vp_ver, required: get_option('valapanel'))
    63	vala_panel_found = vp.found()
    64	
    65	mp_ver = '>=1.20'
    66	mp = dependency('libmatepanelapplet-4.0', version: mp_ver, required: get_option('mate'))
    67	mate_found = mp.found()
    68	
    69	xp = dependency('libxfce4panel-2.0', required: get_option('xfce'))
    70	xc = dependency('libxfconf-0', required: get_option('xfce'))
    71	xfce_found = xp.found() and xc.found()
    72	
    73	bp = dependency('budgie-1.0', required: get_option('budgie'))
    74	budgie_found = bp.found()
    75	
    76	
    77	#################
    78	# Configuration #
    79	#################
    80	conf_data = configuration_data()
    81	conf_data.set('GETTEXT_PACKAGE', meson.project_name())
    82	conf_data.set('LOCALE_DIR', join_paths(prefix,localedir))
    83	conf_data.set('CMAKE_INSTALL_PREFIX', prefix)
    84	
    85	config = configure_file(input : join_paths('vapi','config.vala.in'),
    86	               output : 'config.vala',
    87				   configuration : conf_data)
    88	
    89	desktop_kwargs = {
    90	      'type': 'desktop',
    91	      'args' : ['--keyword=Name','--keyword=Description','--keyword=Comment', '--keyword=Help'],
    92	      'po_dir': join_paths(meson.current_source_dir(),'po'),
    93	      'install': true,
    94	}
    95	
    96	#################
    97	#  Subprojects  #
    98	#################
    99	subproject('registrar', required: get_option('registrar'))
   100	subproject('jayatana', required: get_option('jayatana'))
   101	subproject('appmenu-gtk-module', required: get_option('appmenu-gtk-module'))
   102	
   103	subdir('lib')
   104	subdir('applets')
   105	subdir('data')
   106	subdir('po')
   107	
   108	install_data('README.md', install_dir : join_paths(get_option('datadir'), 'doc', meson.project_name()))
   109	install_data('LICENSE', install_dir : join_paths(get_option('datadir'), 'licenses', meson.project_name()))
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/meson_options.txt
--------------------------------------------------------------------------------
     1	option('wm_backend', type: 'combo', choices: ['auto','wnck'], value: 'auto', description: 'Backend for appmenu')
     2	
     3	option('valapanel', type: 'feature', value: 'auto', description: 'Vala Panel Integration - 0.5.x')
     4	option('xfce', type: 'feature', value: 'auto', description: 'Xfce Panel Integration')
     5	option('mate', type: 'feature', value: 'auto', description: 'MATE Panel Integration')
     6	option('budgie', type: 'feature', value: 'auto', description: 'Budgie Desktop Integration')
     7	
     8	option('registrar', type: 'feature', value: 'auto', description: 'DBusMenu registrar')
     9	option('appmenu-gtk-module', type: 'feature', value: 'auto', description: 'Gtk+ module for AppMenu')
    10	option('jayatana', type: 'feature', value: 'auto', description: 'Java support for global menus')
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/aa.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ab.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ae.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/af.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ak.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/am.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/an.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ar.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"Project-Id-Version: \n"
     4	"Report-Msgid-Bugs-To: \n"
     5	"POT-Creation-Date: 2024-01-05 15:47+0300\n"
     6	"PO-Revision-Date: 2024-01-05 15:47+0300\n"
     7	"Last-Translator: Mohamed Benkouider <mbkasr@gmail.com>\n"
     8	"Language-Team: \n"
     9	"Language: ar\n"
    10	"MIME-Version: 1.0\n"
    11	"Content-Type: text/plain; charset=UTF-8\n"
    12	"Content-Transfer-Encoding: 8bit\n"
    13	"X-Generator: Poedit 2.0.4\n"
    14	
    15	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    16	#: ../lib/helper-desktop.vala:58
    17	msgid "_Desktop"
    18	msgstr "_سطح المكتب"
    19	
    20	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    21	#: ../lib/helper-desktop.vala:192
    22	msgid "No files"
    23	msgstr "لا ملفات"
    24	
    25	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    26	msgid "_New Window..."
    27	msgstr "_نافذة جديدة"
    28	
    29	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    30	msgid "Close _This"
    31	msgstr "_أغلق هذا"
    32	
    33	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    34	msgid "Close _All"
    35	msgstr "أغلق ال_كل"
    36	
    37	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    38	msgid "_Application"
    39	msgstr "_تطبيق"
    40	
    41	#: ../lib/desktop-menus.ui:6
    42	msgid "_Desktop Settings"
    43	msgstr "_إعدادات سطح المكتب"
    44	
    45	#: ../lib/desktop-menus.ui:10
    46	msgid "_System Settings"
    47	msgstr "إعدادات الن_ظام"
    48	
    49	#: ../lib/desktop-menus.ui:17
    50	msgid "_Files"
    51	msgstr "_الملفات"
    52	
    53	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    54	#: ../data/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.in:5
    55	#: ../data/appmenu.plugin.desktop.in:4
    56	#: ../data/org.valapanel.appmenu.desktop.in:4
    57	msgid "AppMenu Plugin"
    58	msgstr "لاحقة AppMenu"
    59	
    60	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    61	#: ../data/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.in:6
    62	#: ../data/appmenu.plugin.desktop.in:5
    63	#: ../data/org.valapanel.appmenu.desktop.in:5
    64	msgid "Display AppMenu (Global Menu)"
    65	msgstr "أظهر AppMenu (القائمة العامة)"
    66	
    67	#: ../data/xfce/appmenu.desktop.xfce.in:7
    68	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    69	#: ../data/appmenu-mate.desktop.in:11 ../data/appmenu-mate.plugin.desktop.in:11
    70	#: ../data/appmenu.desktop.in:7
    71	msgid "applications-system"
    72	msgstr "نظام-التطبيقات"
    73	
    74	#: ../lib/desktop-menus.ui:21
    75	msgid "_Documents"
    76	msgstr "ال_مستندات"
    77	
    78	#: ../lib/desktop-menus.ui:25
    79	msgid "_Music"
    80	msgstr "الم_وسيقى"
    81	
    82	#: ../lib/desktop-menus.ui:29
    83	msgid "_Pictures"
    84	msgstr "ال_صور"
    85	
    86	#: ../lib/desktop-menus.ui:33
    87	msgid "_Video"
    88	msgstr "م_قاطع الفيديو"
    89	
    90	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    91	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    92	#: ../lib/xfce4-plugin-appmenu.vala:56 ../lib/valapanel-plugin-appmenu.vala:67
    93	msgid "Use Compact mode (all menus in application menu)"
    94	msgstr "استعمل الوضع المدمج (كل القوائم في قائمة التطبيقات)"
    95	
    96	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
    97	#: ../lib/valapanel-plugin-appmenu.vala:76
    98	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
    99	#: ../lib/valapanel-plugin-appmenu.vala:70
   100	msgid "Use bold application name"
   101	msgstr "استعمل اسم تطبيق عريض"
   102	
   103	#: ../lib/helper-dbus.vala:101
   104	msgid "Application"
   105	msgstr "التطبيق"
   106	
   107	#: ../lib/mate-plugin-appmenu.vala:36
   108	msgid "_Preferences"
   109	msgstr "ال_تفضيلات"
   110	
   111	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   112	#: ../lib/xfce4-plugin-appmenu.vala:52
   113	msgid "Configure AppMenu"
   114	msgstr "أعدّ AppMenu"
   115	
   116	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   117	msgid "Use Compact mode (all menus in application menu"
   118	msgstr "استعمل الوضع المدمج (كل القوائم في قائمة التطبيقات"
   119	
   120	#: ../lib/xfce4-plugin-appmenu.vala:62
   121	msgid "Expand plugin on panel"
   122	msgstr "وسّع ملحق في اللوحة"
   123	
   124	#: ../lib/desktop-menus.ui:40
   125	msgid "_New"
   126	msgstr "_جديد"
   127	
   128	#: ../lib/desktop-menus.ui:51
   129	msgid "_Quit"
   130	msgstr "أ_غلق"
   131	
   132	#: ../data/appmenu-budgie.desktop.plugin.in:4
   133	#: ../data/appmenu-budgie.desktop.in:4
   134	msgid "Global Menu"
   135	msgstr "القائمة العامة"
   136	
   137	#: ../data/appmenu-budgie.desktop.plugin.in:5
   138	#: ../data/appmenu-budgie.desktop.in:5
   139	msgid "Show menus from windows"
   140	msgstr "اعرض قوائم من النوافذ"
   141	
   142	#: ../data/appmenu-budgie.desktop.plugin.in:9
   143	#: ../data/appmenu-budgie.desktop.in:9
   144	msgid "view-grid-symbolic"
   145	msgstr "عرض-شبكة-رمزي"
   146	
   147	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   148	#: ../data/appmenu-mate.plugin.desktop.in:5
   149	msgid "Appmenu applet factory"
   150	msgstr "مصنع التطبيقات المصغرة لـ Appmenu"
   151	
   152	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   153	#: ../data/appmenu-mate.plugin.desktop.in:9
   154	msgid "Global Application Menu"
   155	msgstr "قائمة التطبيقات العامة"
   156	
   157	#: ../data/appmenu-mate.desktop.plugin.in:10 ../data/appmenu-mate.desktop.in:10
   158	#: ../data/appmenu-mate.plugin.desktop.in:10
   159	msgid "All menus will hosts here"
   160	msgstr "كل القوائم ستستضاف هنا"
   161	
   162	#: ../lib/menu-widget.vala:114
   163	msgid "Compact Menu"
   164	msgstr "القائمة المدمجة"
   165	
   166	#: ../data/appmenu.desktop.plugin.in:6 ../data/appmenu.plugin.desktop.in:6
   167	#: ../data/org.valapanel.appmenu.desktop.in:6
   168	msgid "preferences-system-symbolic"
   169	msgstr "تفضيلات-نظام-رمزي"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/as.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ast.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/av.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ay.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/az.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ba.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/be.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/bg.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/bh.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/bi.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/bm.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/bn.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/bo.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/br.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/bs.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ca.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ce.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ch.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ckb.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/co.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/cr.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/cs.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/cu.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/cv.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/cy.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/da.po
--------------------------------------------------------------------------------
     1	# Danish translation for vala-panel-appmenu
     2	# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
     3	# This file is distributed under the same license as the PACKAGE package.
     4	# scootergrisen, 2019.
     5	msgid ""
     6	msgstr ""
     7	"Project-Id-Version: vala-panel-appmenu\n"
     8	"Report-Msgid-Bugs-To: https://gitlab.com/vala-panel-project/vala-panel-"
     9	"appmenu/\n"
    10	"POT-Creation-Date: 2019-04-24 16:13+0300\n"
    11	"PO-Revision-Date: 2019-06-07 18:31+0200\n"
    12	"Last-Translator: scootergrisen\n"
    13	"Language-Team: Danish\n"
    14	"Language: da\n"
    15	"MIME-Version: 1.0\n"
    16	"Content-Type: text/plain; charset=UTF-8\n"
    17	"Content-Transfer-Encoding: 8bit\n"
    18	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    19	
    20	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    21	#: ../lib/helper-desktop.vala:58
    22	msgid "_Desktop"
    23	msgstr "_Skrivebord"
    24	
    25	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    26	#: ../lib/helper-desktop.vala:192
    27	msgid "No files"
    28	msgstr "Ingen filer"
    29	
    30	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    31	msgid "_New Window..."
    32	msgstr "_Nyt vindue ..."
    33	
    34	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    35	msgid "Close _This"
    36	msgstr "Luk _dette"
    37	
    38	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    39	msgid "Close _All"
    40	msgstr "Luk _alle"
    41	
    42	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    43	msgid "_Application"
    44	msgstr "_Program"
    45	
    46	#: ../lib/desktop-menus.ui:6
    47	msgid "_Desktop Settings"
    48	msgstr "_Skrivebordsindstillinger"
    49	
    50	#: ../lib/desktop-menus.ui:10
    51	msgid "_System Settings"
    52	msgstr "_Systemindstillinger"
    53	
    54	#: ../lib/desktop-menus.ui:17
    55	msgid "_Files"
    56	msgstr "_Filer"
    57	
    58	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    59	#: ../data/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.in:5
    60	#: ../data/appmenu.plugin.desktop.in:4
    61	#: ../data/org.valapanel.appmenu.desktop.in:4
    62	msgid "AppMenu Plugin"
    63	msgstr "Programmenu-plugin"
    64	
    65	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    66	#: ../data/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.in:6
    67	#: ../data/appmenu.plugin.desktop.in:5
    68	#: ../data/org.valapanel.appmenu.desktop.in:5
    69	msgid "Display AppMenu (Global Menu)"
    70	msgstr "Vis programmenu (global menu)"
    71	
    72	#: ../data/xfce/appmenu.desktop.xfce.in:7
    73	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    74	#: ../data/appmenu-mate.desktop.in:11 ../data/appmenu-mate.plugin.desktop.in:11
    75	#: ../data/appmenu.desktop.in:7
    76	msgid "applications-system"
    77	msgstr "applications-system"
    78	
    79	#: ../lib/desktop-menus.ui:21
    80	msgid "_Documents"
    81	msgstr "_Dokumenter"
    82	
    83	#: ../lib/desktop-menus.ui:25
    84	msgid "_Music"
    85	msgstr "_Musik"
    86	
    87	#: ../lib/desktop-menus.ui:29
    88	msgid "_Pictures"
    89	msgstr "_Billeder"
    90	
    91	#: ../lib/desktop-menus.ui:33
    92	msgid "_Video"
    93	msgstr "_Video"
    94	
    95	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    96	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    97	#: ../lib/xfce4-plugin-appmenu.vala:56 ../lib/valapanel-plugin-appmenu.vala:67
    98	msgid "Use Compact mode (all menus in application menu)"
    99	msgstr "Brug kompakt tilstand (alle menuer i programmenu)"
   100	
   101	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
   102	#: ../lib/valapanel-plugin-appmenu.vala:76
   103	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
   104	#: ../lib/valapanel-plugin-appmenu.vala:70
   105	msgid "Use bold application name"
   106	msgstr "Brug fed tekst for programnavn"
   107	
   108	#: ../lib/helper-dbus.vala:101
   109	msgid "Application"
   110	msgstr "Program"
   111	
   112	#: ../lib/mate-plugin-appmenu.vala:36
   113	msgid "_Preferences"
   114	msgstr "_Præferencer"
   115	
   116	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   117	#: ../lib/xfce4-plugin-appmenu.vala:52
   118	msgid "Configure AppMenu"
   119	msgstr "Konfigurer programmenu"
   120	
   121	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   122	msgid "Use Compact mode (all menus in application menu"
   123	msgstr "Brug kompakt tilstand (alle menuer i programmenu"
   124	
   125	#: ../lib/xfce4-plugin-appmenu.vala:62
   126	msgid "Expand plugin on panel"
   127	msgstr "Udvid plugin på panel"
   128	
   129	#: ../lib/desktop-menus.ui:40
   130	msgid "_New"
   131	msgstr "_Nyt"
   132	
   133	#: ../lib/desktop-menus.ui:51
   134	msgid "_Quit"
   135	msgstr "_Afslut"
   136	
   137	#: ../data/appmenu-budgie.desktop.plugin.in:4
   138	#: ../data/appmenu-budgie.desktop.in:4
   139	msgid "Global Menu"
   140	msgstr "Global menu"
   141	
   142	#: ../data/appmenu-budgie.desktop.plugin.in:5
   143	#: ../data/appmenu-budgie.desktop.in:5
   144	msgid "Show menus from windows"
   145	msgstr "Vis menuer fra vinduer"
   146	
   147	#: ../data/appmenu-budgie.desktop.plugin.in:9
   148	#: ../data/appmenu-budgie.desktop.in:9
   149	msgid "view-grid-symbolic"
   150	msgstr "view-grid-symbolic"
   151	
   152	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   153	#: ../data/appmenu-mate.plugin.desktop.in:5
   154	msgid "Appmenu applet factory"
   155	msgstr "Programmenu-applet-fabrik"
   156	
   157	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   158	#: ../data/appmenu-mate.plugin.desktop.in:9
   159	msgid "Global Application Menu"
   160	msgstr "Global programmenu"
   161	
   162	#: ../data/appmenu-mate.desktop.plugin.in:10 ../data/appmenu-mate.desktop.in:10
   163	#: ../data/appmenu-mate.plugin.desktop.in:10
   164	msgid "All menus will hosts here"
   165	msgstr "Her vises alle menuer"
   166	
   167	#: ../lib/menu-widget.vala:114
   168	msgid "Compact Menu"
   169	msgstr "Kompakt menu"
   170	
   171	#: ../data/appmenu.desktop.plugin.in:6 ../data/appmenu.plugin.desktop.in:6
   172	#: ../data/org.valapanel.appmenu.desktop.in:6
   173	msgid "preferences-system-symbolic"
   174	msgstr "preferences-system-symbolic"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/de.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/dv.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/dz.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ee.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/el.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/en_AU.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/en_CA.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/en_GB.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/eo.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/es.po
--------------------------------------------------------------------------------
     1	
     2	# SOME DESCRIPTIVE TITLE.
     3	# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
     4	# This file is distributed under the same license as the PACKAGE package.
     5	# Joel Barrios <darkshram@gmail.com>, 2017.
     6	#
     7	#, fuzzy
     8	msgid ""
     9	msgstr ""
    10	"Project-Id-Version: \n"
    11	"Report-Msgid-Bugs-To: \n"
    12	"POT-Creation-Date: 2015-04-02 13:41+0600\n"
    13	"PO-Revision-Date: 2017-12-02 06:49-0600\n"
    14	"Last-Translator: Joel Barrios <darkshram@gmail.com>\n"
    15	"Language-Team: \n"
    16	"Language: es\n"
    17	"MIME-Version: 1.0\n"
    18	"Content-Type: text/plain; charset=UTF-8\n"
    19	"Content-Transfer-Encoding: 8bit\n"
    20	
    21	#: ../lib/appmenu-desktop.vala:39
    22	msgid "_Desktop"
    23	msgstr "_Escritorio"
    24	
    25	msgid "Use Compact mode (all menus in application menu)"
    26	msgstr "Utilizar modo compacto (Todos los menus en un menu)"
    27	
    28	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
    29	#: ../lib/valapanel-plugin-appmenu.vala:76
    30	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
    31	msgid "Use bold application name"
    32	msgstr "Resaltar nombre de la aplicación en negrita"
    33	
    34	#: ../lib/appmenu-desktop.vala:153
    35	msgid "No files"
    36	msgstr "Sin archivos"
    37	
    38	#: ../lib/appmenu-bamf.vala:37
    39	msgid "_New Window..."
    40	msgstr "_Nueva ventana"
    41	
    42	#: ../lib/appmenu-bamf.vala:38
    43	msgid "Close _This"
    44	msgstr "Cerrar _Esto"
    45	
    46	#: ../lib/appmenu-bamf.vala:39
    47	msgid "Close _All"
    48	msgstr "Cerrar _Todo"
    49	
    50	#: ../lib/menu-widget-menumodel.vala:42
    51	msgid "_Application"
    52	msgstr "_Aplicación"
    53	
    54	#: ../lib/desktop-menus.ui:6
    55	msgid "_Desktop Settings"
    56	msgstr "Configuración del _Escritorio"
    57	
    58	#: ../lib/desktop-menus.ui:10
    59	msgid "_System Settings"
    60	msgstr "Configuración del _Sistema"
    61	
    62	#: ../lib/desktop-menus.ui:17
    63	msgid "_Files"
    64	msgstr "_Archivos"
    65	
    66	
    67	
    68	
    69	#: ../lib/desktop-menus.ui:21
    70	msgid "_Documents"
    71	msgstr "_Documentos"
    72	
    73	#: ../lib/desktop-menus.ui:25
    74	msgid "_Music"
    75	msgstr "_Música"
    76	
    77	#: ../lib/desktop-menus.ui:29
    78	msgid "_Pictures"
    79	msgstr "_Imágenes"
    80	
    81	#: ../lib/desktop-menus.ui:33
    82	msgid "_Video"
    83	msgstr "_Videos"
    84	
    85	
    86	
    87	
    88	
    89	#: ../data/xfce/appmenu.desktop.xfce.in:5
    90	msgid "AppMenu Plugin"
    91	msgstr "Módulo AppMenu"
    92	
    93	#: ../data/xfce/appmenu.desktop.xfce.in:6
    94	msgid "Display AppMenu (Global Menu)"
    95	msgstr "Mostrar AppMenu (Menú Global)"
    96	
    97	#: ../data/xfce/appmenu.desktop.xfce.in:7
    98	msgid "applications-system"
    99	msgstr "aplicaciones-sistema"
   100	
   101	msgid "_New"
   102	msgstr "_Nuevo"
   103	
   104	msgid "_Quit"
   105	msgstr "_Salir"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/et.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/eu.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/fa.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ff.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/fi.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/fj.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/fo.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/fr_CA.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"Project-Id-Version: \n"
     4	"Report-Msgid-Bugs-To: \n"
     5	"POT-Creation-Date: 2018-02-19 02:58+0300\n"
     6	"PO-Revision-Date: \n"
     7	"Last-Translator: Quentin Bouteiller <translates@quent1.fr>\n"
     8	"Language-Team: \n"
     9	"Language: fr\n"
    10	"MIME-Version: 1.0\n"
    11	"Content-Type: text/plain; charset=UTF-8\n"
    12	"Content-Transfer-Encoding: 8bit\n"
    13	"Plural-Forms: nplurals=2; plural=n>1;\n"
    14	"X-Generator: Poedit 2.0.4\n"
    15	
    16	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    17	msgid "_Desktop"
    18	msgstr "_Bureau"
    19	
    20	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    21	msgid "No files"
    22	msgstr "Aucun fichier"
    23	
    24	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    25	msgid "_New Window..."
    26	msgstr "_Nouvelle fenêtre..."
    27	
    28	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    29	msgid "Close _This"
    30	msgstr "_Fermer"
    31	
    32	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    33	msgid "Close _All"
    34	msgstr "Fermer _tout"
    35	
    36	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    37	msgid "_Application"
    38	msgstr "_Application"
    39	
    40	#: ../lib/desktop-menus.ui:6
    41	msgid "_Desktop Settings"
    42	msgstr "Paramètres du _bureau"
    43	
    44	#: ../lib/desktop-menus.ui:10
    45	msgid "_System Settings"
    46	msgstr "Paramètres _système"
    47	
    48	#: ../lib/desktop-menus.ui:17
    49	msgid "_Files"
    50	msgstr "_Fichiers"
    51	
    52	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    53	#: ../data/appmenu.desktop.xfce.in:5
    54	msgid "AppMenu Plugin"
    55	msgstr "Extension AppMenu"
    56	
    57	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    58	#: ../data/appmenu.desktop.xfce.in:6
    59	msgid "Display AppMenu (Global Menu)"
    60	msgstr "Afficher AppMenu (menu global)"
    61	
    62	#: ../data/xfce/appmenu.desktop.xfce.in:7
    63	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    64	#: ../data/appmenu-mate.desktop.in:11
    65	msgid "applications-system"
    66	msgstr ""
    67	
    68	#: ../lib/desktop-menus.ui:21
    69	msgid "_Documents"
    70	msgstr "_Documents"
    71	
    72	#: ../lib/desktop-menus.ui:25
    73	msgid "_Music"
    74	msgstr "_Musique"
    75	
    76	#: ../lib/desktop-menus.ui:29
    77	msgid "_Pictures"
    78	msgstr "_Images"
    79	
    80	#: ../lib/desktop-menus.ui:33
    81	msgid "_Video"
    82	msgstr "_Vidéos"
    83	
    84	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    85	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    86	#: ../lib/xfce4-plugin-appmenu.vala:56
    87	msgid "Use Compact mode (all menus in application menu)"
    88	msgstr "Utiliser le mode compact (tous les menus dans le menu de l'application)"
    89	
    90	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
    91	#: ../lib/valapanel-plugin-appmenu.vala:76
    92	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
    93	msgid "Use bold application name"
    94	msgstr "Mettre le nom de l'application en gras"
    95	
    96	#: ../lib/helper-dbus.vala:101
    97	msgid "Application"
    98	msgstr "Application"
    99	
   100	#: ../lib/mate-plugin-appmenu.vala:36
   101	msgid "_Preferences"
   102	msgstr "_Préférences"
   103	
   104	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   105	#: ../lib/xfce4-plugin-appmenu.vala:52
   106	msgid "Configure AppMenu"
   107	msgstr "Configurer AppMenu"
   108	
   109	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   110	msgid "Use Compact mode (all menus in application menu"
   111	msgstr "Utiliser le mode compact (tous les menus dans le menu de l'application"
   112	
   113	#: ../lib/xfce4-plugin-appmenu.vala:62
   114	msgid "Expand plugin on panel"
   115	msgstr "Étendre l'extension sur le tableau de bord"
   116	
   117	#: ../lib/desktop-menus.ui:40
   118	msgid "_New"
   119	msgstr "_Nouveau"
   120	
   121	#: ../lib/desktop-menus.ui:51
   122	msgid "_Quit"
   123	msgstr "_Quitter"
   124	
   125	#: ../data/appmenu-budgie.desktop.plugin.in:4
   126	msgid "Global Menu"
   127	msgstr "Menu global"
   128	
   129	#: ../data/appmenu-budgie.desktop.plugin.in:5
   130	msgid "Show menus from windows"
   131	msgstr "Afficher les menus des fenêtres"
   132	
   133	#: ../data/appmenu-budgie.desktop.plugin.in:9
   134	msgid "view-grid-symbolic"
   135	msgstr ""
   136	
   137	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   138	msgid "Appmenu applet factory"
   139	msgstr "Constructeur d'extension AppMenu"
   140	
   141	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   142	msgid "Global Application Menu"
   143	msgstr "Menu global d'application"
   144	
   145	#: ../data/appmenu-mate.desktop.plugin.in:10
   146	msgid "All menus will hosts here"
   147	msgstr "Tous les menus apparaîtront ici"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/fr.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"Project-Id-Version: \n"
     4	"Report-Msgid-Bugs-To: \n"
     5	"POT-Creation-Date: 2018-02-19 02:58+0300\n"
     6	"PO-Revision-Date: \n"
     7	"Last-Translator: Quentin Bouteiller <translates@quent1.fr>\n"
     8	"Language-Team: \n"
     9	"Language: fr\n"
    10	"MIME-Version: 1.0\n"
    11	"Content-Type: text/plain; charset=UTF-8\n"
    12	"Content-Transfer-Encoding: 8bit\n"
    13	"Plural-Forms: nplurals=2; plural=n>1;\n"
    14	"X-Generator: Poedit 2.0.4\n"
    15	
    16	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    17	msgid "_Desktop"
    18	msgstr "_Bureau"
    19	
    20	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    21	msgid "No files"
    22	msgstr "Aucun fichier"
    23	
    24	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    25	msgid "_New Window..."
    26	msgstr "_Nouvelle fenêtre..."
    27	
    28	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    29	msgid "Close _This"
    30	msgstr "_Fermer"
    31	
    32	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    33	msgid "Close _All"
    34	msgstr "Fermer _tout"
    35	
    36	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    37	msgid "_Application"
    38	msgstr "_Application"
    39	
    40	#: ../lib/desktop-menus.ui:6
    41	msgid "_Desktop Settings"
    42	msgstr "Paramètres du _bureau"
    43	
    44	#: ../lib/desktop-menus.ui:10
    45	msgid "_System Settings"
    46	msgstr "Paramètres _système"
    47	
    48	#: ../lib/desktop-menus.ui:17
    49	msgid "_Files"
    50	msgstr "_Fichiers"
    51	
    52	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    53	#: ../data/appmenu.desktop.xfce.in:5
    54	msgid "AppMenu Plugin"
    55	msgstr "Extension AppMenu"
    56	
    57	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    58	#: ../data/appmenu.desktop.xfce.in:6
    59	msgid "Display AppMenu (Global Menu)"
    60	msgstr "Afficher AppMenu (menu global)"
    61	
    62	#: ../data/xfce/appmenu.desktop.xfce.in:7
    63	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    64	#: ../data/appmenu-mate.desktop.in:11
    65	msgid "applications-system"
    66	msgstr ""
    67	
    68	#: ../lib/desktop-menus.ui:21
    69	msgid "_Documents"
    70	msgstr "_Documents"
    71	
    72	#: ../lib/desktop-menus.ui:25
    73	msgid "_Music"
    74	msgstr "_Musique"
    75	
    76	#: ../lib/desktop-menus.ui:29
    77	msgid "_Pictures"
    78	msgstr "_Images"
    79	
    80	#: ../lib/desktop-menus.ui:33
    81	msgid "_Video"
    82	msgstr "_Vidéos"
    83	
    84	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    85	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    86	#: ../lib/xfce4-plugin-appmenu.vala:56
    87	msgid "Use Compact mode (all menus in application menu)"
    88	msgstr "Utiliser le mode compact (tous les menus dans le menu de l'application)"
    89	
    90	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
    91	#: ../lib/valapanel-plugin-appmenu.vala:76
    92	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
    93	msgid "Use bold application name"
    94	msgstr "Mettre le nom de l'application en gras"
    95	
    96	#: ../lib/helper-dbus.vala:101
    97	msgid "Application"
    98	msgstr "Application"
    99	
   100	#: ../lib/mate-plugin-appmenu.vala:36
   101	msgid "_Preferences"
   102	msgstr "_Préférences"
   103	
   104	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   105	#: ../lib/xfce4-plugin-appmenu.vala:52
   106	msgid "Configure AppMenu"
   107	msgstr "Configurer AppMenu"
   108	
   109	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   110	msgid "Use Compact mode (all menus in application menu"
   111	msgstr "Utiliser le mode compact (tous les menus dans le menu de l'application"
   112	
   113	#: ../lib/xfce4-plugin-appmenu.vala:62
   114	msgid "Expand plugin on panel"
   115	msgstr "Étendre l'extension sur le tableau de bord"
   116	
   117	#: ../lib/desktop-menus.ui:40
   118	msgid "_New"
   119	msgstr "_Nouveau"
   120	
   121	#: ../lib/desktop-menus.ui:51
   122	msgid "_Quit"
   123	msgstr "_Quitter"
   124	
   125	#: ../data/appmenu-budgie.desktop.plugin.in:4
   126	msgid "Global Menu"
   127	msgstr "Menu global"
   128	
   129	#: ../data/appmenu-budgie.desktop.plugin.in:5
   130	msgid "Show menus from windows"
   131	msgstr "Afficher les menus des fenêtres"
   132	
   133	#: ../data/appmenu-budgie.desktop.plugin.in:9
   134	msgid "view-grid-symbolic"
   135	msgstr ""
   136	
   137	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   138	msgid "Appmenu applet factory"
   139	msgstr "Constructeur d'extension AppMenu"
   140	
   141	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   142	msgid "Global Application Menu"
   143	msgstr "Menu global d'application"
   144	
   145	#: ../data/appmenu-mate.desktop.plugin.in:10
   146	msgid "All menus will hosts here"
   147	msgstr "Tous les menus apparaîtront ici"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/fy.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ga.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/gd.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/gl.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/gn.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/gu.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/gv.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ha.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/he.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/hi.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ho.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/hr.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ht.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/hu.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
     3	# This file is distributed under the same license as the PACKAGE package.
     4	# Kardos László <hu@li.org>, 2018.
     5	#
     6	msgid ""
     7	msgstr ""
     8	"Project-Id-Version: \n"
     9	"Report-Msgid-Bugs-To: \n"
    10	"POT-Creation-Date: 2018-11-22 11:11+0200\n"
    11	"PO-Revision-Date: 2018-11-22 12:08+0100\n"
    12	"Last-Translator: Kardos László <hu@li.org>\n"
    13	"Language-Team: Hungarian <hu@li.org>\n"
    14	"Language: hu\n"
    15	"MIME-Version: 1.0\n"
    16	"Content-Type: text/plain; charset=UTF-8\n"
    17	"Content-Transfer-Encoding: 8bit\n"
    18	"X-Generator: Poedit 2.1.1\n"
    19	"X-Poedit-SourceCharset: UTF-8\n"
    20	
    21	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    22	msgid "_Desktop"
    23	msgstr "_Asztal"
    24	
    25	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    26	msgid "No files"
    27	msgstr "Nincsenek fájlok"
    28	
    29	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    30	msgid "_New Window..."
    31	msgstr "_Új ablak..."
    32	
    33	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    34	msgid "Close _This"
    35	msgstr "_Bezárás"
    36	
    37	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    38	msgid "Close _All"
    39	msgstr "_Összes bezárása"
    40	
    41	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    42	msgid "_Application"
    43	msgstr "_Alkalmazás"
    44	
    45	#: ../lib/desktop-menus.ui:6
    46	msgid "_Desktop Settings"
    47	msgstr "_Asztal beállítások"
    48	
    49	#: ../lib/desktop-menus.ui:10
    50	msgid "_System Settings"
    51	msgstr "_Rendszerbeállítások"
    52	
    53	#: ../lib/desktop-menus.ui:17
    54	msgid "_Files"
    55	msgstr "_Fájlok"
    56	
    57	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    58	#: ../data/appmenu.desktop.xfce.in:5
    59	msgid "AppMenu Plugin"
    60	msgstr "Alkalmazásmenü bővítmény"
    61	
    62	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    63	#: ../data/appmenu.desktop.xfce.in:6
    64	msgid "Display AppMenu (Global Menu)"
    65	msgstr "Alkalmazásmenü (Kiterjesztett menü)"
    66	
    67	#: ../data/xfce/appmenu.desktop.xfce.in:7
    68	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    69	#: ../data/appmenu-mate.desktop.in:11
    70	msgid "applications-system"
    71	msgstr "applications-system"
    72	
    73	#: ../lib/desktop-menus.ui:21
    74	msgid "_Documents"
    75	msgstr "_Dokumentumok"
    76	
    77	#: ../lib/desktop-menus.ui:25
    78	msgid "_Music"
    79	msgstr "_Zenék"
    80	
    81	#: ../lib/desktop-menus.ui:29
    82	msgid "_Pictures"
    83	msgstr "_Képek"
    84	
    85	#: ../lib/desktop-menus.ui:33
    86	msgid "_Video"
    87	msgstr "_Videó"
    88	
    89	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    90	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    91	#: ../lib/xfce4-plugin-appmenu.vala:56 ../lib/valapanel-plugin-appmenu.vala:67
    92	msgid "Use Compact mode (all menus in application menu)"
    93	msgstr "Kompakt mód használata (összes menü az alkalmazásmenüben)"
    94	
    95	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
    96	#: ../lib/valapanel-plugin-appmenu.vala:76
    97	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
    98	#: ../lib/valapanel-plugin-appmenu.vala:70
    99	msgid "Use bold application name"
   100	msgstr "Feltünő alkalmazásnév használata"
   101	
   102	#: ../lib/helper-dbus.vala:101
   103	msgid "Application"
   104	msgstr "Alkalmazás"
   105	
   106	#: ../lib/mate-plugin-appmenu.vala:36
   107	msgid "_Preferences"
   108	msgstr "Beállítások"
   109	
   110	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   111	#: ../lib/xfce4-plugin-appmenu.vala:52
   112	msgid "Configure AppMenu"
   113	msgstr "Alkalmazásmenü beállítások"
   114	
   115	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   116	msgid "Use Compact mode (all menus in application menu"
   117	msgstr "Kompakt mód használata (összes menü az alkalmazásmenüben)"
   118	
   119	#: ../lib/xfce4-plugin-appmenu.vala:62
   120	msgid "Expand plugin on panel"
   121	msgstr "Bővítmény kibontása a panelen"
   122	
   123	#: ../lib/desktop-menus.ui:40
   124	msgid "_New"
   125	msgstr "_Új"
   126	
   127	#: ../lib/desktop-menus.ui:51
   128	msgid "_Quit"
   129	msgstr "_Kilépés"
   130	
   131	#: ../data/appmenu-budgie.desktop.plugin.in:4
   132	msgid "Global Menu"
   133	msgstr "Kiterjesztett menü"
   134	
   135	#: ../data/appmenu-budgie.desktop.plugin.in:5
   136	msgid "Show menus from windows"
   137	msgstr "Menü megjelenítése az ablakokban"
   138	
   139	#: ../data/appmenu-budgie.desktop.plugin.in:9
   140	msgid "view-grid-symbolic"
   141	msgstr "view-grid-symbolic"
   142	
   143	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   144	msgid "Appmenu applet factory"
   145	msgstr "Alkalmazásmenü kisalkalmazás"
   146	
   147	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   148	msgid "Global Application Menu"
   149	msgstr "Kiterjesztett alkalmazásmenü"
   150	
   151	#: ../data/appmenu-mate.desktop.plugin.in:10
   152	msgid "All menus will hosts here"
   153	msgstr "Összes menü fogadása itt"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/hy.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/hz.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ia.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/id.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ie.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ig.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ii.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ik.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/io.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/is.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/it.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
     3	# This file is distributed under the same license as the PACKAGE package.
     4	# Gianvito Cavasoli <gianvito@gmx.it>, 2020.
     5	#
     6	msgid ""
     7	msgstr ""
     8	"Project-Id-Version: vala-panel-appmenu\n"
     9	"Report-Msgid-Bugs-To: \n"
    10	"POT-Creation-Date: 2019-04-24 16:13+0300\n"
    11	"PO-Revision-Date: 2020-05-06 18:30+0200\n"
    12	"Last-Translator: Gianvito Cavasoli <gianvito@gmx.it>\n"
    13	"Language-Team: Italian <gnome-it-list@gnome.org>\n"
    14	"Language: it\n"
    15	"MIME-Version: 1.0\n"
    16	"Content-Type: text/plain; charset=UTF-8\n"
    17	"Content-Transfer-Encoding: 8bit\n"
    18	"Plural-Forms: nplurals=2; plural=(n != 1)\n"
    19	"X-Generator: Gtranslator 3.36.0\n"
    20	
    21	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    22	#: ../lib/helper-desktop.vala:58
    23	msgid "_Desktop"
    24	msgstr "_Scrivania"
    25	
    26	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    27	#: ../lib/helper-desktop.vala:192
    28	msgid "No files"
    29	msgstr "Nessun file"
    30	
    31	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    32	msgid "_New Window..."
    33	msgstr "_Nuova finestra…"
    34	
    35	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    36	msgid "Close _This"
    37	msgstr "Chiudi _questo"
    38	
    39	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    40	msgid "Close _All"
    41	msgstr "Chiudi tutto"
    42	
    43	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    44	msgid "_Application"
    45	msgstr "_Applicazione"
    46	
    47	#: ../lib/desktop-menus.ui:6
    48	msgid "_Desktop Settings"
    49	msgstr "Impostazioni della _scrivania"
    50	
    51	#: ../lib/desktop-menus.ui:10
    52	msgid "_System Settings"
    53	msgstr "Impostazioni del s_istema"
    54	
    55	#: ../lib/desktop-menus.ui:17
    56	msgid "_Files"
    57	msgstr "_File"
    58	
    59	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    60	#: ../data/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.in:5
    61	#: ../data/appmenu.plugin.desktop.in:4
    62	#: ../data/org.valapanel.appmenu.desktop.in:4
    63	msgid "AppMenu Plugin"
    64	msgstr "Plugin AppMenu"
    65	
    66	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    67	#: ../data/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.in:6
    68	#: ../data/appmenu.plugin.desktop.in:5
    69	#: ../data/org.valapanel.appmenu.desktop.in:5
    70	msgid "Display AppMenu (Global Menu)"
    71	msgstr "Mostra il AppMenu (menù globale)"
    72	
    73	#: ../data/xfce/appmenu.desktop.xfce.in:7
    74	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    75	#: ../data/appmenu-mate.desktop.in:11 ../data/appmenu-mate.plugin.desktop.in:11
    76	#: ../data/appmenu.desktop.in:7
    77	msgid "applications-system"
    78	msgstr "applications-system"
    79	
    80	#: ../lib/desktop-menus.ui:21
    81	msgid "_Documents"
    82	msgstr "_Documenti"
    83	
    84	#: ../lib/desktop-menus.ui:25
    85	msgid "_Music"
    86	msgstr "_Musica"
    87	
    88	#: ../lib/desktop-menus.ui:29
    89	msgid "_Pictures"
    90	msgstr "_Immagini"
    91	
    92	#: ../lib/desktop-menus.ui:33
    93	msgid "_Video"
    94	msgstr "_Video"
    95	
    96	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    97	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    98	#: ../lib/xfce4-plugin-appmenu.vala:56 ../lib/valapanel-plugin-appmenu.vala:67
    99	msgid "Use Compact mode (all menus in application menu)"
   100	msgstr "Usa la modalità compatta (tutti i menù nel menù dell'applicazione)"
   101	
   102	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
   103	#: ../lib/valapanel-plugin-appmenu.vala:76
   104	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
   105	#: ../lib/valapanel-plugin-appmenu.vala:70
   106	msgid "Use bold application name"
   107	msgstr "Usa il grassetto per il nome dell'applicazione"
   108	
   109	#: ../lib/helper-dbus.vala:101
   110	msgid "Application"
   111	msgstr "Applicazione"
   112	
   113	#: ../lib/mate-plugin-appmenu.vala:36
   114	msgid "_Preferences"
   115	msgstr "Preferen_ze"
   116	
   117	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   118	#: ../lib/xfce4-plugin-appmenu.vala:52
   119	msgid "Configure AppMenu"
   120	msgstr "Configura AppMenu"
   121	
   122	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   123	msgid "Use Compact mode (all menus in application menu"
   124	msgstr "Usa la modalità compatta (tutti i menù nel menù dell'applicazione)"
   125	
   126	#: ../lib/xfce4-plugin-appmenu.vala:62
   127	msgid "Expand plugin on panel"
   128	msgstr "Espandi il plugin sul pannello"
   129	
   130	#: ../lib/desktop-menus.ui:40
   131	msgid "_New"
   132	msgstr "_Nuova"
   133	
   134	#: ../lib/desktop-menus.ui:51
   135	msgid "_Quit"
   136	msgstr "_Esci"
   137	
   138	#: ../data/appmenu-budgie.desktop.plugin.in:4
   139	#: ../data/appmenu-budgie.desktop.in:4
   140	msgid "Global Menu"
   141	msgstr "Menù globale"
   142	
   143	#: ../data/appmenu-budgie.desktop.plugin.in:5
   144	#: ../data/appmenu-budgie.desktop.in:5
   145	msgid "Show menus from windows"
   146	msgstr "Mostra i menù dalle finestre"
   147	
   148	#: ../data/appmenu-budgie.desktop.plugin.in:9
   149	#: ../data/appmenu-budgie.desktop.in:9
   150	msgid "view-grid-symbolic"
   151	msgstr "view-grid-symbolic"
   152	
   153	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   154	#: ../data/appmenu-mate.plugin.desktop.in:5
   155	msgid "Appmenu applet factory"
   156	msgstr "Fattoria applet appmenu"
   157	
   158	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   159	#: ../data/appmenu-mate.plugin.desktop.in:9
   160	msgid "Global Application Menu"
   161	msgstr "Menù globale dell'applicazione"
   162	
   163	#: ../data/appmenu-mate.desktop.plugin.in:10 ../data/appmenu-mate.desktop.in:10
   164	#: ../data/appmenu-mate.plugin.desktop.in:10
   165	msgid "All menus will hosts here"
   166	msgstr "Tutti i menù saranno ospitati qui"
   167	
   168	#: ../lib/menu-widget.vala:114
   169	msgid "Compact Menu"
   170	msgstr "Menù compatto"
   171	
   172	#: ../data/appmenu.desktop.plugin.in:6 ../data/appmenu.plugin.desktop.in:6
   173	#: ../data/org.valapanel.appmenu.desktop.in:6
   174	msgid "preferences-system-symbolic"
   175	msgstr "preferences-system-symbolic"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/iu.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ja.po
--------------------------------------------------------------------------------
     1	# Japanese traslation for Vala Panel Application Menu
     2	# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
     3	# This file is distributed under the same license as the Vala Panel Application Menu package.
     4	# Tarot Osuji <tarot@sdf.lonestar.org>, 2019.
     5	#
     6	msgid ""
     7	msgstr ""
     8	"Project-Id-Version: Vala Panel Application Menu 0.6.94\n"
     9	"Report-Msgid-Bugs-To: \n"
    10	"POT-Creation-Date: 2019-04-24 16:13+0300\n"
    11	"PO-Revision-Date: 2019-09-28 20:00+0900\n"
    12	"Last-Translator: Tarot Osuji <tarot@sdf.lonestar.org>\n"
    13	"Language-Team: Japanese <ja@li.org>\n"
    14	"Language: ja\n"
    15	"MIME-Version: 1.0\n"
    16	"Content-Type: text/plain; charset=UTF-8\n"
    17	"Content-Transfer-Encoding: 8bit\n"
    18	
    19	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    20	#: ../lib/helper-desktop.vala:58
    21	msgid "_Desktop"
    22	msgstr "デスクトップ"
    23	
    24	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    25	#: ../lib/helper-desktop.vala:192
    26	msgid "No files"
    27	msgstr "ファイルがありません"
    28	
    29	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    30	msgid "_New Window..."
    31	msgstr "新しいウィンドウ(_N)..."
    32	
    33	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    34	msgid "Close _This"
    35	msgstr "閉じる(_T)"
    36	
    37	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    38	msgid "Close _All"
    39	msgstr "すべて閉じる(_A)"
    40	
    41	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    42	msgid "_Application"
    43	msgstr "アプリケーション(_A)"
    44	
    45	#: ../lib/desktop-menus.ui:6
    46	msgid "_Desktop Settings"
    47	msgstr "デスクトップ設定(_D)"
    48	
    49	#: ../lib/desktop-menus.ui:10
    50	msgid "_System Settings"
    51	msgstr "システム設定(_S)"
    52	
    53	#: ../lib/desktop-menus.ui:17
    54	msgid "_Files"
    55	msgstr "ファイル"
    56	
    57	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    58	#: ../data/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.in:5
    59	#: ../data/appmenu.plugin.desktop.in:4
    60	#: ../data/org.valapanel.appmenu.desktop.in:4
    61	msgid "AppMenu Plugin"
    62	msgstr "AppMenu プラグイン"
    63	
    64	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    65	#: ../data/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.in:6
    66	#: ../data/appmenu.plugin.desktop.in:5
    67	#: ../data/org.valapanel.appmenu.desktop.in:5
    68	msgid "Display AppMenu (Global Menu)"
    69	msgstr "AppMenu (グローバルメニュー) を表示します"
    70	
    71	#: ../data/xfce/appmenu.desktop.xfce.in:7
    72	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    73	#: ../data/appmenu-mate.desktop.in:11 ../data/appmenu-mate.plugin.desktop.in:11
    74	#: ../data/appmenu.desktop.in:7
    75	msgid "applications-system"
    76	msgstr "applications-system"
    77	
    78	#: ../lib/desktop-menus.ui:21
    79	msgid "_Documents"
    80	msgstr "ドキュメント"
    81	
    82	#: ../lib/desktop-menus.ui:25
    83	msgid "_Music"
    84	msgstr "ミュージック"
    85	
    86	#: ../lib/desktop-menus.ui:29
    87	msgid "_Pictures"
    88	msgstr "ピクチャ"
    89	
    90	#: ../lib/desktop-menus.ui:33
    91	msgid "_Video"
    92	msgstr "ビデオ"
    93	
    94	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    95	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    96	#: ../lib/xfce4-plugin-appmenu.vala:56 ../lib/valapanel-plugin-appmenu.vala:67
    97	msgid "Use Compact mode (all menus in application menu)"
    98	msgstr "コンパクトモードを使用する"
    99	
   100	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
   101	#: ../lib/valapanel-plugin-appmenu.vala:76
   102	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
   103	#: ../lib/valapanel-plugin-appmenu.vala:70
   104	msgid "Use bold application name"
   105	msgstr "太字のアプリケーション名を使用する"
   106	
   107	#: ../lib/helper-dbus.vala:101
   108	msgid "Application"
   109	msgstr "アプリケーション"
   110	
   111	#: ../lib/mate-plugin-appmenu.vala:36
   112	msgid "_Preferences"
   113	msgstr "設定(_P)"
   114	
   115	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   116	#: ../lib/xfce4-plugin-appmenu.vala:52
   117	msgid "Configure AppMenu"
   118	msgstr "AppMenu の設定"
   119	
   120	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   121	msgid "Use Compact mode (all menus in application menu"
   122	msgstr "コンパクトモードを使用する"
   123	
   124	#: ../lib/xfce4-plugin-appmenu.vala:62
   125	msgid "Expand plugin on panel"
   126	msgstr "パネルにプラグインを展開する"
   127	
   128	#: ../lib/desktop-menus.ui:40
   129	msgid "_New"
   130	msgstr "新規(_N)"
   131	
   132	#: ../lib/desktop-menus.ui:51
   133	msgid "_Quit"
   134	msgstr "終了(_Q)"
   135	
   136	#: ../data/appmenu-budgie.desktop.plugin.in:4
   137	#: ../data/appmenu-budgie.desktop.in:4
   138	msgid "Global Menu"
   139	msgstr "グローバルメニュー"
   140	
   141	#: ../data/appmenu-budgie.desktop.plugin.in:5
   142	#: ../data/appmenu-budgie.desktop.in:5
   143	msgid "Show menus from windows"
   144	msgstr "ウィンドウのメニューを表示します"
   145	
   146	#: ../data/appmenu-budgie.desktop.plugin.in:9
   147	#: ../data/appmenu-budgie.desktop.in:9
   148	msgid "view-grid-symbolic"
   149	msgstr "view-grid-symbolic"
   150	
   151	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   152	#: ../data/appmenu-mate.plugin.desktop.in:5
   153	msgid "Appmenu applet factory"
   154	msgstr "AppMenu アプレットファクトリ"
   155	
   156	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   157	#: ../data/appmenu-mate.plugin.desktop.in:9
   158	msgid "Global Application Menu"
   159	msgstr "グローバル・アプリケーションメニュー"
   160	
   161	#: ../data/appmenu-mate.desktop.plugin.in:10 ../data/appmenu-mate.desktop.in:10
   162	#: ../data/appmenu-mate.plugin.desktop.in:10
   163	msgid "All menus will hosts here"
   164	msgstr "すべてのメニューはここに表示されます"
   165	
   166	#: ../lib/menu-widget.vala:114
   167	msgid "Compact Menu"
   168	msgstr "コンパクトメニュー"
   169	
   170	#: ../data/appmenu.desktop.plugin.in:6 ../data/appmenu.plugin.desktop.in:6
   171	#: ../data/org.valapanel.appmenu.desktop.in:6
   172	msgid "preferences-system-symbolic"
   173	msgstr "preferences-system-symbolic"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/jv.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ka.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/kg.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ki.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/kj.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/kk.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/kl.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/km.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/kn.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ko.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n == 1 ? 0 : 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/kr.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ks.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ku.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/kv.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/kw.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ky.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/la.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/lb.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/lg.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/LINGUAS
--------------------------------------------------------------------------------
     1	aa ab ae af ak am an ar as ast av ay az ba be bg bh bi bm bn bo br bs ca ce ch ckb co cr cs cu cv cy da de dv dz ee el en_AU en_CA en_GB eo es et eu fa ff fi fj fo fr fr_CA fy ga gd gl gn gu gv ha he hi ho hr ht hu hy hz ia id ie ig ii ik io is it iu ja jv ka kg ki kj kk kl km kn ko kr ks ku kv kw ky la lb lg li ln lo lt lu lv mg mh mi mk ml mn mo mr ms mt my na nb nd ne ng nl nn nr nv ny oc oj om or os pa pi pl ps pt pt_BR qu rm rn ro ru rue rw sa sc sd se sg si sk sl sm sma sn so sq sr ss st su sv sw ta te tg th ti tk tl tn to tr ts tt tw ty ug uk ur uz ve vi vo wa wo xh yi yo za zh zh_CN zh_HK zh_TW zu
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/LINGUAS.in
--------------------------------------------------------------------------------
     1	@LINGUAS@
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/li.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ln.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/lo.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/lt.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/lu.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/lv.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/meson.build
--------------------------------------------------------------------------------
     1	i18n.gettext(meson.project_name(), preset: 'glib')
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/mg.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/mh.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/mi.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/mk.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ml.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/mn.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/mo.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/mr.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ms.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/mt.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/my.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/na.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/nb.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/nd.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ne.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ng.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/nl.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/nn.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/nr.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/nv.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ny.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/oc.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/oj.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/om.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/or.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/os.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/pa.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/pi.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/pl.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
     3	# This file is distributed under the same license as the PACKAGE package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	#
     6	msgid ""
     7	msgstr ""
     8	"Project-Id-Version: \n"
     9	"Report-Msgid-Bugs-To: \n"
    10	"POT-Creation-Date: 2018-02-19 02:58+0300\n"
    11	"PO-Revision-Date: 2018-07-01 14:06+0200\n"
    12	"Language-Team: \n"
    13	"MIME-Version: 1.0\n"
    14	"Content-Type: text/plain; charset=UTF-8\n"
    15	"Content-Transfer-Encoding: 8bit\n"
    16	"X-Generator: Poedit 2.0.6\n"
    17	"Last-Translator: \n"
    18	"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
    19	"Language: pl\n"
    20	
    21	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    22	msgid "_Desktop"
    23	msgstr "_Pulpit"
    24	
    25	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    26	msgid "No files"
    27	msgstr "Brak plików"
    28	
    29	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    30	msgid "_New Window..."
    31	msgstr "_Nowe okno..."
    32	
    33	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    34	msgid "Close _This"
    35	msgstr "Zamknij _okno"
    36	
    37	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    38	msgid "Close _All"
    39	msgstr "Zamknij _wszystko"
    40	
    41	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    42	msgid "_Application"
    43	msgstr "_Program"
    44	
    45	#: ../lib/desktop-menus.ui:6
    46	msgid "_Desktop Settings"
    47	msgstr "_Ustawienia pulpitu"
    48	
    49	#: ../lib/desktop-menus.ui:10
    50	msgid "_System Settings"
    51	msgstr "_Centrum sterowania"
    52	
    53	#: ../lib/desktop-menus.ui:17
    54	msgid "_Files"
    55	msgstr "_Pliki"
    56	
    57	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    58	#: ../data/appmenu.desktop.xfce.in:5
    59	msgid "AppMenu Plugin"
    60	msgstr "Menu programu"
    61	
    62	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    63	#: ../data/appmenu.desktop.xfce.in:6
    64	msgid "Display AppMenu (Global Menu)"
    65	msgstr "Pokaż globalne menu"
    66	
    67	#: ../data/xfce/appmenu.desktop.xfce.in:7
    68	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    69	#: ../data/appmenu-mate.desktop.in:11
    70	msgid "applications-system"
    71	msgstr ""
    72	
    73	#: ../lib/desktop-menus.ui:21
    74	msgid "_Documents"
    75	msgstr "_Dokumenty"
    76	
    77	#: ../lib/desktop-menus.ui:25
    78	msgid "_Music"
    79	msgstr "_Muzyka"
    80	
    81	#: ../lib/desktop-menus.ui:29
    82	msgid "_Pictures"
    83	msgstr "_Obrazy"
    84	
    85	#: ../lib/desktop-menus.ui:33
    86	msgid "_Video"
    87	msgstr "_Wideo"
    88	
    89	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    90	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    91	#: ../lib/xfce4-plugin-appmenu.vala:56
    92	msgid "Use Compact mode (all menus in application menu)"
    93	msgstr "Tryb kompaktowy"
    94	
    95	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
    96	#: ../lib/valapanel-plugin-appmenu.vala:76
    97	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
    98	msgid "Use bold application name"
    99	msgstr "Pogrubiona nazwa programu"
   100	
   101	#: ../lib/helper-dbus.vala:101
   102	msgid "Application"
   103	msgstr "Program"
   104	
   105	#: ../lib/mate-plugin-appmenu.vala:36
   106	msgid "_Preferences"
   107	msgstr "_Ustawienia"
   108	
   109	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   110	#: ../lib/xfce4-plugin-appmenu.vala:52
   111	msgid "Configure AppMenu"
   112	msgstr "Konfiguruj globalne menu"
   113	
   114	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   115	msgid "Use Compact mode (all menus in application menu"
   116	msgstr "Tryb kompaktowy"
   117	
   118	#: ../lib/xfce4-plugin-appmenu.vala:62
   119	msgid "Expand plugin on panel"
   120	msgstr "Rozszerz wtyczkę na panelu"
   121	
   122	#: ../lib/desktop-menus.ui:40
   123	msgid "_New"
   124	msgstr "_Nowy"
   125	
   126	#: ../lib/desktop-menus.ui:51
   127	msgid "_Quit"
   128	msgstr "_Wyjdź"
   129	
   130	#: ../data/appmenu-budgie.desktop.plugin.in:4
   131	msgid "Global Menu"
   132	msgstr "Menu globalne"
   133	
   134	#: ../data/appmenu-budgie.desktop.plugin.in:5
   135	msgid "Show menus from windows"
   136	msgstr "Pokaż menu z okien"
   137	
   138	#: ../data/appmenu-budgie.desktop.plugin.in:9
   139	msgid "view-grid-symbolic"
   140	msgstr ""
   141	
   142	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   143	msgid "Appmenu applet factory"
   144	msgstr ""
   145	
   146	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   147	msgid "Global Application Menu"
   148	msgstr "Globalne menu programów"
   149	
   150	#: ../data/appmenu-mate.desktop.plugin.in:10
   151	msgid "All menus will hosts here"
   152	msgstr "Wszystkie paski menu będą tutaj"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ps.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/pt_BR.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n>1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/pt.po
--------------------------------------------------------------------------------
     1	# # Portuguese translation for Vala Panel Application Menu.
     2	# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
     3	# This file is distributed under the same license as the PACKAGE package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	#
     6	# Hugo Carvalho <hugokarvalho@hotmail.com>, 2022.
     7	#
     8	msgid ""
     9	msgstr ""
    10	"Project-Id-Version: AppMenu\n"
    11	"Report-Msgid-Bugs-To: \n"
    12	"POT-Creation-Date: 2019-04-24 16:13+0300\n"
    13	"PO-Revision-Date: \n"
    14	"Last-Translator: Hugo Carvalho <hugokarvalho@hotmail.com>\n"
    15	"Language-Team: \n"
    16	"Language: pt\n"
    17	"MIME-Version: 1.0\n"
    18	"Content-Type: text/plain; charset=UTF-8\n"
    19	"Content-Transfer-Encoding: 8bit\n"
    20	"Plural-Forms: nplurals=2; plural=n != 1;\n"
    21	"X-Generator: Poedit 3.0.1\n"
    22	
    23	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    24	#: ../lib/helper-desktop.vala:58
    25	msgid "_Desktop"
    26	msgstr "_Desktop"
    27	
    28	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    29	#: ../lib/helper-desktop.vala:192
    30	msgid "No files"
    31	msgstr "Sem ficheiros"
    32	
    33	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    34	msgid "_New Window..."
    35	msgstr "_Nova janela..."
    36	
    37	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    38	msgid "Close _This"
    39	msgstr "_Fechar isto"
    40	
    41	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    42	msgid "Close _All"
    43	msgstr "Fech_ar tudo"
    44	
    45	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    46	msgid "_Application"
    47	msgstr "_Aplicação"
    48	
    49	#: ../lib/desktop-menus.ui:6
    50	msgid "_Desktop Settings"
    51	msgstr "Definições do Desktop"
    52	
    53	#: ../lib/desktop-menus.ui:10
    54	msgid "_System Settings"
    55	msgstr "Definições do Sistema"
    56	
    57	#: ../lib/desktop-menus.ui:17
    58	msgid "_Files"
    59	msgstr "_Ficheiros"
    60	
    61	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    62	#: ../data/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.in:5
    63	#: ../data/appmenu.plugin.desktop.in:4
    64	#: ../data/org.valapanel.appmenu.desktop.in:4
    65	msgid "AppMenu Plugin"
    66	msgstr "Plugin AppMenu"
    67	
    68	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    69	#: ../data/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.in:6
    70	#: ../data/appmenu.plugin.desktop.in:5
    71	#: ../data/org.valapanel.appmenu.desktop.in:5
    72	msgid "Display AppMenu (Global Menu)"
    73	msgstr "Mostrar AppMenu (Menu Global)"
    74	
    75	#: ../data/xfce/appmenu.desktop.xfce.in:7
    76	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    77	#: ../data/appmenu-mate.desktop.in:11 ../data/appmenu-mate.plugin.desktop.in:11
    78	#: ../data/appmenu.desktop.in:7
    79	msgid "applications-system"
    80	msgstr "applications-system"
    81	
    82	#: ../lib/desktop-menus.ui:21
    83	msgid "_Documents"
    84	msgstr "_Documentos"
    85	
    86	#: ../lib/desktop-menus.ui:25
    87	msgid "_Music"
    88	msgstr "_Música"
    89	
    90	#: ../lib/desktop-menus.ui:29
    91	msgid "_Pictures"
    92	msgstr "_Imagens"
    93	
    94	#: ../lib/desktop-menus.ui:33
    95	msgid "_Video"
    96	msgstr "_Vídeo"
    97	
    98	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    99	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
   100	#: ../lib/xfce4-plugin-appmenu.vala:56 ../lib/valapanel-plugin-appmenu.vala:67
   101	msgid "Use Compact mode (all menus in application menu)"
   102	msgstr "Usar o modo Compacto (todos os menus no menu de aplicações)"
   103	
   104	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
   105	#: ../lib/valapanel-plugin-appmenu.vala:76
   106	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
   107	#: ../lib/valapanel-plugin-appmenu.vala:70
   108	msgid "Use bold application name"
   109	msgstr "Usar nome de aplicação em negrito"
   110	
   111	#: ../lib/helper-dbus.vala:101
   112	msgid "Application"
   113	msgstr "Aplicação"
   114	
   115	#: ../lib/mate-plugin-appmenu.vala:36
   116	msgid "_Preferences"
   117	msgstr "_Preferências"
   118	
   119	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   120	#: ../lib/xfce4-plugin-appmenu.vala:52
   121	msgid "Configure AppMenu"
   122	msgstr "Configurar o AppMenu"
   123	
   124	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   125	msgid "Use Compact mode (all menus in application menu"
   126	msgstr "Usar o modo Compacto (todos os menus no menu de aplicações"
   127	
   128	#: ../lib/xfce4-plugin-appmenu.vala:62
   129	msgid "Expand plugin on panel"
   130	msgstr "Expandir o plugin no painel"
   131	
   132	#: ../lib/desktop-menus.ui:40
   133	msgid "_New"
   134	msgstr "_Novo"
   135	
   136	#: ../lib/desktop-menus.ui:51
   137	msgid "_Quit"
   138	msgstr "_Sair"
   139	
   140	#: ../data/appmenu-budgie.desktop.plugin.in:4
   141	#: ../data/appmenu-budgie.desktop.in:4
   142	msgid "Global Menu"
   143	msgstr "Menu Global"
   144	
   145	#: ../data/appmenu-budgie.desktop.plugin.in:5
   146	#: ../data/appmenu-budgie.desktop.in:5
   147	msgid "Show menus from windows"
   148	msgstr "Mostrar menus das janelas"
   149	
   150	#: ../data/appmenu-budgie.desktop.plugin.in:9
   151	#: ../data/appmenu-budgie.desktop.in:9
   152	msgid "view-grid-symbolic"
   153	msgstr "view-grid-symbolic"
   154	
   155	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   156	#: ../data/appmenu-mate.plugin.desktop.in:5
   157	msgid "Appmenu applet factory"
   158	msgstr "Appmenu applet factory"
   159	
   160	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   161	#: ../data/appmenu-mate.plugin.desktop.in:9
   162	msgid "Global Application Menu"
   163	msgstr "Menu de aplicações global"
   164	
   165	#: ../data/appmenu-mate.desktop.plugin.in:10 ../data/appmenu-mate.desktop.in:10
   166	#: ../data/appmenu-mate.plugin.desktop.in:10
   167	msgid "All menus will hosts here"
   168	msgstr "Todos os menus serão alojados aqui"
   169	
   170	#: ../lib/menu-widget.vala:114
   171	msgid "Compact Menu"
   172	msgstr "Menu Compacto"
   173	
   174	#: ../data/appmenu.desktop.plugin.in:6 ../data/appmenu.plugin.desktop.in:6
   175	#: ../data/org.valapanel.appmenu.desktop.in:6
   176	msgid "preferences-system-symbolic"
   177	msgstr "preferences-system-symbolic"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/qu.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/rm.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/rn.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ro.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/rue.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ru.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"Project-Id-Version: \n"
     4	"Report-Msgid-Bugs-To: \n"
     5	"POT-Creation-Date: 2018-08-17 15:49+0300\n"
     6	"PO-Revision-Date: \n"
     7	"Last-Translator: \n"
     8	"Language-Team: \n"
     9	"Language: ru\n"
    10	"MIME-Version: 1.0\n"
    11	"Content-Type: text/plain; charset=UTF-8\n"
    12	"Content-Transfer-Encoding: 8bit\n"
    13	"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
    14	"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
    15	"X-Generator: Poedit 1.8.7.1\n"
    16	
    17	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    18	msgid "_Desktop"
    19	msgstr "Рабочий _стол"
    20	
    21	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    22	msgid "No files"
    23	msgstr "Нет файлов"
    24	
    25	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    26	msgid "_New Window..."
    27	msgstr "_Новое окно..."
    28	
    29	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    30	msgid "Close _This"
    31	msgstr "Закрыть это _окно"
    32	
    33	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    34	msgid "Close _All"
    35	msgstr "Закрыть _все"
    36	
    37	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    38	msgid "_Application"
    39	msgstr "_Приложение"
    40	
    41	#: ../lib/desktop-menus.ui:6
    42	msgid "_Desktop Settings"
    43	msgstr "Параметры _рабочего стола"
    44	
    45	#: ../lib/desktop-menus.ui:10
    46	msgid "_System Settings"
    47	msgstr "Параметы _системы"
    48	
    49	#: ../lib/desktop-menus.ui:17
    50	msgid "_Files"
    51	msgstr "_Файлы"
    52	
    53	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    54	#: ../data/appmenu.desktop.xfce.in:5
    55	msgid "AppMenu Plugin"
    56	msgstr "Плагин AppMenu"
    57	
    58	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    59	#: ../data/appmenu.desktop.xfce.in:6
    60	msgid "Display AppMenu (Global Menu)"
    61	msgstr "Показывает меню приложений (Глобальное меню)"
    62	
    63	#: ../data/xfce/appmenu.desktop.xfce.in:7
    64	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    65	#: ../data/appmenu-mate.desktop.in:11
    66	msgid "applications-system"
    67	msgstr "applications-system"
    68	
    69	#: ../lib/desktop-menus.ui:21
    70	msgid "_Documents"
    71	msgstr "_Документы"
    72	
    73	#: ../lib/desktop-menus.ui:25
    74	msgid "_Music"
    75	msgstr "_Музыка"
    76	
    77	#: ../lib/desktop-menus.ui:29
    78	msgid "_Pictures"
    79	msgstr "_Рисунки"
    80	
    81	#: ../lib/desktop-menus.ui:33
    82	msgid "_Video"
    83	msgstr "_Видео"
    84	
    85	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    86	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    87	#: ../lib/xfce4-plugin-appmenu.vala:56 ../lib/valapanel-plugin-appmenu.vala:67
    88	msgid "Use Compact mode (all menus in application menu)"
    89	msgstr "Компактный режим (все меню в меню приложения)"
    90	
    91	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
    92	#: ../lib/valapanel-plugin-appmenu.vala:76
    93	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
    94	#: ../lib/valapanel-plugin-appmenu.vala:70
    95	msgid "Use bold application name"
    96	msgstr "Писать название приложения полужирным шрифтом"
    97	
    98	#: ../lib/helper-dbus.vala:101
    99	msgid "Application"
   100	msgstr "Приложение"
   101	
   102	#: ../lib/mate-plugin-appmenu.vala:36
   103	msgid "_Preferences"
   104	msgstr "_Настройки"
   105	
   106	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   107	#: ../lib/xfce4-plugin-appmenu.vala:52
   108	msgid "Configure AppMenu"
   109	msgstr "Настройка AppMenu"
   110	
   111	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   112	msgid "Use Compact mode (all menus in application menu"
   113	msgstr "Компактный режим (все меню в меню приложения)"
   114	
   115	#: ../lib/xfce4-plugin-appmenu.vala:62
   116	msgid "Expand plugin on panel"
   117	msgstr "Расширить плагин на панели"
   118	
   119	#: ../lib/desktop-menus.ui:40
   120	msgid "_New"
   121	msgstr "_Новое окно"
   122	
   123	#: ../lib/desktop-menus.ui:51
   124	msgid "_Quit"
   125	msgstr "_Выход"
   126	
   127	#: ../data/appmenu-budgie.desktop.plugin.in:4
   128	msgid "Global Menu"
   129	msgstr "Глобальное меню"
   130	
   131	#: ../data/appmenu-budgie.desktop.plugin.in:5
   132	msgid "Show menus from windows"
   133	msgstr "Показывает меню окон"
   134	
   135	#: ../data/appmenu-budgie.desktop.plugin.in:9
   136	msgid "view-grid-symbolic"
   137	msgstr "view-grid-symbolic"
   138	
   139	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   140	msgid "Appmenu applet factory"
   141	msgstr "Фабрика апплета Appmenu"
   142	
   143	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   144	msgid "Global Application Menu"
   145	msgstr "Глобальное меню"
   146	
   147	#: ../data/appmenu-mate.desktop.plugin.in:10
   148	msgid "All menus will hosts here"
   149	msgstr "Все меню будут находиться здесь"
   150	
   151	#~ msgid "Desktop Settings"
   152	#~ msgstr "Параметры рабочего стола"
   153	
   154	#~ msgid "System Settings"
   155	#~ msgstr "Параметры системы"
   156	
   157	#~ msgid "Files"
   158	#~ msgstr "Файлы"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/rw.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sa.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sc.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sd.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/se.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sg.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/si.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sk.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sl.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=4; plural=n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sma.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sm.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sn.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/so.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sq.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sr.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ss.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/stamp-it
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/st.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/su.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sv.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/sw.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ta.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/te.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/tg.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/th.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ti.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/tk.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/tl.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/tn.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/to.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/tr.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n != 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ts.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/tt.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/tw.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ty.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ug.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/uk.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ur.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/uz.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/vala-panel-appmenu.pot
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
     3	# This file is distributed under the same license as the PACKAGE package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	#
     6	#, fuzzy
     7	msgid ""
     8	msgstr ""
     9	"Project-Id-Version: PACKAGE VERSION\n"
    10	"Report-Msgid-Bugs-To: \n"
    11	"POT-Creation-Date: 2019-04-24 16:13+0300\n"
    12	"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
    13	"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
    14	"Language-Team: LANGUAGE <LL@li.org>\n"
    15	"Language: \n"
    16	"MIME-Version: 1.0\n"
    17	"Content-Type: text/plain; charset=CHARSET\n"
    18	"Content-Transfer-Encoding: 8bit\n"
    19	
    20	#: ../lib/appmenu-desktop.vala:39 ../lib/appmenu-desktop.vala:65
    21	#: ../lib/helper-desktop.vala:58
    22	msgid "_Desktop"
    23	msgstr ""
    24	
    25	#: ../lib/appmenu-desktop.vala:153 ../lib/appmenu-desktop.vala:205
    26	#: ../lib/helper-desktop.vala:192
    27	msgid "No files"
    28	msgstr ""
    29	
    30	#: ../lib/appmenu-bamf.vala:37 ../lib/desktop-menus.ui:40
    31	msgid "_New Window..."
    32	msgstr ""
    33	
    34	#: ../lib/appmenu-bamf.vala:38 ../lib/desktop-menus.ui:45
    35	msgid "Close _This"
    36	msgstr ""
    37	
    38	#: ../lib/appmenu-bamf.vala:39 ../lib/desktop-menus.ui:50
    39	msgid "Close _All"
    40	msgstr ""
    41	
    42	#: ../lib/menu-widget-menumodel.vala:42 ../lib/menu-widget-menumodel.vala:63
    43	msgid "_Application"
    44	msgstr ""
    45	
    46	#: ../lib/desktop-menus.ui:6
    47	msgid "_Desktop Settings"
    48	msgstr ""
    49	
    50	#: ../lib/desktop-menus.ui:10
    51	msgid "_System Settings"
    52	msgstr ""
    53	
    54	#: ../lib/desktop-menus.ui:17
    55	msgid "_Files"
    56	msgstr ""
    57	
    58	#: ../data/xfce/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.plugin.in:4
    59	#: ../data/appmenu.desktop.xfce.in:5 ../data/appmenu.desktop.in:5
    60	#: ../data/appmenu.plugin.desktop.in:4
    61	#: ../data/org.valapanel.appmenu.desktop.in:4
    62	msgid "AppMenu Plugin"
    63	msgstr ""
    64	
    65	#: ../data/xfce/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.plugin.in:5
    66	#: ../data/appmenu.desktop.xfce.in:6 ../data/appmenu.desktop.in:6
    67	#: ../data/appmenu.plugin.desktop.in:5
    68	#: ../data/org.valapanel.appmenu.desktop.in:5
    69	msgid "Display AppMenu (Global Menu)"
    70	msgstr ""
    71	
    72	#: ../data/xfce/appmenu.desktop.xfce.in:7
    73	#: ../data/appmenu-mate.desktop.plugin.in:11 ../data/appmenu.desktop.xfce.in:7
    74	#: ../data/appmenu-mate.desktop.in:11 ../data/appmenu-mate.plugin.desktop.in:11
    75	#: ../data/appmenu.desktop.in:7
    76	msgid "applications-system"
    77	msgstr ""
    78	
    79	#: ../lib/desktop-menus.ui:21
    80	msgid "_Documents"
    81	msgstr ""
    82	
    83	#: ../lib/desktop-menus.ui:25
    84	msgid "_Music"
    85	msgstr ""
    86	
    87	#: ../lib/desktop-menus.ui:29
    88	msgid "_Pictures"
    89	msgstr ""
    90	
    91	#: ../lib/desktop-menus.ui:33
    92	msgid "_Video"
    93	msgstr ""
    94	
    95	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    96	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    97	#: ../lib/xfce4-plugin-appmenu.vala:56 ../lib/valapanel-plugin-appmenu.vala:67
    98	msgid "Use Compact mode (all menus in application menu)"
    99	msgstr ""
   100	
   101	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
   102	#: ../lib/valapanel-plugin-appmenu.vala:76
   103	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
   104	#: ../lib/valapanel-plugin-appmenu.vala:70
   105	msgid "Use bold application name"
   106	msgstr ""
   107	
   108	#: ../lib/helper-dbus.vala:101
   109	msgid "Application"
   110	msgstr ""
   111	
   112	#: ../lib/mate-plugin-appmenu.vala:36
   113	msgid "_Preferences"
   114	msgstr ""
   115	
   116	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   117	#: ../lib/xfce4-plugin-appmenu.vala:52
   118	msgid "Configure AppMenu"
   119	msgstr ""
   120	
   121	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   122	msgid "Use Compact mode (all menus in application menu"
   123	msgstr ""
   124	
   125	#: ../lib/xfce4-plugin-appmenu.vala:62
   126	msgid "Expand plugin on panel"
   127	msgstr ""
   128	
   129	#: ../lib/desktop-menus.ui:40
   130	msgid "_New"
   131	msgstr ""
   132	
   133	#: ../lib/desktop-menus.ui:51
   134	msgid "_Quit"
   135	msgstr ""
   136	
   137	#: ../data/appmenu-budgie.desktop.plugin.in:4
   138	#: ../data/appmenu-budgie.desktop.in:4
   139	msgid "Global Menu"
   140	msgstr ""
   141	
   142	#: ../data/appmenu-budgie.desktop.plugin.in:5
   143	#: ../data/appmenu-budgie.desktop.in:5
   144	msgid "Show menus from windows"
   145	msgstr ""
   146	
   147	#: ../data/appmenu-budgie.desktop.plugin.in:9
   148	#: ../data/appmenu-budgie.desktop.in:9
   149	msgid "view-grid-symbolic"
   150	msgstr ""
   151	
   152	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   153	#: ../data/appmenu-mate.plugin.desktop.in:5
   154	msgid "Appmenu applet factory"
   155	msgstr ""
   156	
   157	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   158	#: ../data/appmenu-mate.plugin.desktop.in:9
   159	msgid "Global Application Menu"
   160	msgstr ""
   161	
   162	#: ../data/appmenu-mate.desktop.plugin.in:10 ../data/appmenu-mate.desktop.in:10
   163	#: ../data/appmenu-mate.plugin.desktop.in:10
   164	msgid "All menus will hosts here"
   165	msgstr ""
   166	
   167	#: ../lib/menu-widget.vala:114
   168	msgid "Compact Menu"
   169	msgstr ""
   170	
   171	#: ../data/appmenu.desktop.plugin.in:6 ../data/appmenu.plugin.desktop.in:6
   172	#: ../data/org.valapanel.appmenu.desktop.in:6
   173	msgid "preferences-system-symbolic"
   174	msgstr ""
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/ve.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/vi.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
     5	"Plural-Forms: nplurals=2; plural=n == 1 ? 0 : 1;\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/vo.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/wa.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/wo.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/xh.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/yi.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/yo.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/za.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/zh_CN.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"Project-Id-Version: \n"
     4	"Report-Msgid-Bugs-To: \n"
     5	"POT-Creation-Date: 2015-04-02 13:41+0600\n"
     6	"PO-Revision-Date: 2018-02-21 10:45+0800\n"
     7	"Language-Team: \n"
     8	"MIME-Version: 1.0\n"
     9	"Content-Type: text/plain; charset=UTF-8\n"
    10	"Content-Transfer-Encoding: 8bit\n"
    11	"X-Generator: Poedit 2.0.4\n"
    12	"Last-Translator: hosxy <hosxy@live.com>\n"
    13	"Plural-Forms: nplurals=1; plural=0;\n"
    14	"Language: zh_CN\n"
    15	
    16	#: ../lib/appmenu-desktop.vala:39
    17	msgid "_Desktop"
    18	msgstr "桌面"
    19	
    20	#: ../lib/appmenu-desktop.vala:153
    21	msgid "No files"
    22	msgstr "无文件"
    23	
    24	#: ../lib/appmenu-bamf.vala:37
    25	msgid "_New Window..."
    26	msgstr "新建窗口(_N)..."
    27	
    28	#: ../lib/appmenu-bamf.vala:38
    29	msgid "Close _This"
    30	msgstr "关闭当前窗口(_T)"
    31	
    32	#: ../lib/appmenu-bamf.vala:39
    33	msgid "Close _All"
    34	msgstr "关闭所有窗口(_A)"
    35	
    36	#: ../lib/menu-widget-menumodel.vala:42
    37	msgid "_Application"
    38	msgstr "应用程序(_A)"
    39	
    40	#: ../lib/desktop-menus.ui:6
    41	msgid "_Desktop Settings"
    42	msgstr "桌面设置(_D)"
    43	
    44	#: ../lib/desktop-menus.ui:10
    45	msgid "_System Settings"
    46	msgstr "系统设置(_S)"
    47	
    48	#: ../lib/desktop-menus.ui:17
    49	msgid "_Files"
    50	msgstr "文件"
    51	
    52	#: ../data/xfce/appmenu.desktop.xfce.in:5
    53	msgid "AppMenu Plugin"
    54	msgstr "全局菜单插件"
    55	
    56	#: ../data/xfce/appmenu.desktop.xfce.in:6
    57	msgid "Display AppMenu (Global Menu)"
    58	msgstr "显示应用程序菜单(全局菜单)"
    59	
    60	# This is icon name, don't need to translate
    61	#: ../data/xfce/appmenu.desktop.xfce.in:7
    62	msgid "applications-system"
    63	msgstr " "
    64	
    65	#: ../lib/desktop-menus.ui:21
    66	msgid "_Documents"
    67	msgstr "文档"
    68	
    69	#: ../lib/desktop-menus.ui:25
    70	msgid "_Music"
    71	msgstr "音乐"
    72	
    73	#: ../lib/desktop-menus.ui:29
    74	msgid "_Pictures"
    75	msgstr "图片"
    76	
    77	#: ../lib/desktop-menus.ui:33
    78	msgid "_Video"
    79	msgstr "视频"
    80	
    81	#: ../lib/budgie-plugin-appmenu.vala:51 ../lib/valapanel-plugin-appmenu.vala:73
    82	#: ../lib/valapanel-plugin-appmenu.vala:88 ../lib/mate-plugin-appmenu.vala:43
    83	#: ../lib/xfce4-plugin-appmenu.vala:56
    84	msgid "Use Compact mode (all menus in application menu)"
    85	msgstr "使用紧凑模式(应用程序菜单位于应用菜单中)"
    86	
    87	#: ../lib/budgie-plugin-appmenu.vala:54 ../lib/mate-plugin-appmenu.vala:46
    88	#: ../lib/valapanel-plugin-appmenu.vala:76
    89	#: ../lib/valapanel-plugin-appmenu.vala:91 ../lib/xfce4-plugin-appmenu.vala:59
    90	msgid "Use bold application name"
    91	msgstr "应用程序名使用粗体"
    92	
    93	#: ../lib/helper-dbus.vala:101
    94	msgid "Application"
    95	msgstr "应用程序"
    96	
    97	#: ../lib/mate-plugin-appmenu.vala:36
    98	msgid "_Preferences"
    99	msgstr "首选项(_P)"
   100	
   101	#: ../lib/mate-plugin-appmenu.vala:39 ../lib/valapanel-plugin-appmenu.vala:85
   102	#: ../lib/xfce4-plugin-appmenu.vala:52
   103	msgid "Configure AppMenu"
   104	msgstr "配置 AppMenu"
   105	
   106	#: ../lib/mate-plugin-appmenu.vala:43 ../lib/xfce4-plugin-appmenu.vala:56
   107	msgid "Use Compact mode (all menus in application menu"
   108	msgstr "使用紧凑模式(应用程序菜单位于应用菜单中)"
   109	
   110	#: ../lib/xfce4-plugin-appmenu.vala:62
   111	msgid "Expand plugin on panel"
   112	msgstr "扩展面板上的插件"
   113	
   114	#: ../lib/desktop-menus.ui:40
   115	msgid "_New"
   116	msgstr "新建(_N)"
   117	
   118	#: ../lib/desktop-menus.ui:51
   119	msgid "_Quit"
   120	msgstr "退出(_Q)"
   121	
   122	#: ../data/appmenu-budgie.desktop.plugin.in:4
   123	msgid "Global Menu"
   124	msgstr "全局菜单"
   125	
   126	#: ../data/appmenu-budgie.desktop.plugin.in:5
   127	msgid "Show menus from windows"
   128	msgstr "显示窗口菜单"
   129	
   130	#: ../data/appmenu-budgie.desktop.plugin.in:9
   131	msgid "view-grid-symbolic"
   132	msgstr "view-grid-symbolic"
   133	
   134	#: ../data/appmenu-mate.desktop.plugin.in:5 ../data/appmenu-mate.desktop.in:5
   135	msgid "Appmenu applet factory"
   136	msgstr "Appmenu小程序工厂"
   137	
   138	#: ../data/appmenu-mate.desktop.plugin.in:9 ../data/appmenu-mate.desktop.in:9
   139	msgid "Global Application Menu"
   140	msgstr "全局菜单"
   141	
   142	#: ../data/appmenu-mate.desktop.plugin.in:10
   143	msgid "All menus will hosts here"
   144	msgstr "所有菜单位于这里"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/zh_HK.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/zh.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/zh_TW.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/po/zu.po
--------------------------------------------------------------------------------
     1	msgid ""
     2	msgstr ""
     3	"MIME-Version: 1.0\n"
     4	"Content-Type: text/plain; charset=UTF-8\n"
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/README.md
--------------------------------------------------------------------------------
     1	---
     2	Vala Panel Application Menu
     3	---
     4	
     5	Vala Panel Application Menu is a Global Menu applet for use with Vala Panel, xfce4-panel and mate-panel (Budgie 10.x is also planned). unity-gtk-module is used as a backend, and thus must also be installed (see instructions, below).
     6	
     7	**REQUIRED DEPENDENCES**
     8	
     9	 * GLib (>= 2.50.0)
    10	 * GTK+ (>= 3.22.0)
    11	 * valac (>= 0.24.0)
    12	 * libwnck (>=3.4.8)
    13	
    14	---
    15	Compilation Instructions (Non-Distribution-Specific)
    16	---
    17	  * Install all the required dependencies listed above. These packages may have different names depending on your distribution. Please see [below](#dependency-packages) for the package names on some specific distributions (i.e. Ubuntu).
    18	  * Clone this repository to your `home` directory by typing:
    19	  `git clone https://gitlab.com/vala-panel-project/vala-panel-appmenu.git` then `cd` into the directory.
    20	  * You're **almost** ready to run `meson`. First, review the following flags:
    21	    * Meson flags:
    22	      * `-Dxfce=[enabled/disabled]` Use `enabled` to compile applet for XFCE Panel
    23	      * `-Dbudgie=[enabled/disabled]` Use `enabled` to compile for budgie (experimental)
    24	      * `-Dvalapanel=[enabled/disabled]` Use `enabled` to compile for Vala Panel
    25	      * `-Dmate=[enabled/disabled]` Use `enabled` to compile for MATE Panel
    26	      * `-Djayatana=[enabled/disabled]` Use `enabled` to include Jayatana library (enable global menu for java swing applications), requires CMake
    27	      * `-Dappmenu-gtk-module=enabled` Use this flag if you are compiling for a distro other than Arch (see instructions below for including unity-gtk-module with Arch) or Ubuntu (Ubuntu users can install unity-gtk-module from the ubuntu repositories--see 'Post-build Instructions', below).
    28	      * `--prefix=[path]` By default, Vala-Panel-Appmenu will install in the `/usr/local` directory. You can use this flag to change that. For some DEs (XFCE, for example), it is required to match install prefix with panel prefix (`/usr` in most distros), so, do not forget it.
    29	  * once you've decided on any flags you want to include, type (from your build directory) `meson [flags] [dir]`
    30	  * once the build is successful, you can compile and install Vala-Panel-Appmenu by typing `cd [dir] && ninja && sudo ninja install`
    31	---
    32	Post-Build Instructions
    33	---
    34	- Install GTK module using instructions below
    35	- To get QT menus to work, install your distribution's qt4 and qt5 appmenu packages. In Ubuntu 17.04, for example, this involves typing `sudo apt-get install appmenu-qt`
    36	  
    37	To install and enable unity-gtk-module for your distro:
    38	
    39	 **UBUNTU-BASED DISTROS**
    40	 - Install unity-gtk-module by typing `sudo apt-get install unity-gtk-module-common unity-gtk2-module unity-gtk3-module`
    41	 - Follow instructions in (appmenu-gtk-module) [README](subprojects/appmenu-gtk-module/README.md), but replace any occurence of `appmenu-gtk-module` to `unity-gtk-module`
    42	
    43	 **ARCH-BASED DISTROS**
    44	* Install from AUR [appmenu-gtk-module-git](https://aur.archlinux.org/packages/appmenu-gtk-module-git/) for GTK applications to work
    45	* Install [Appmenu](https://aur.archlinux.org/packages/appmenu-qt4) to get appmenu for Qt4 Applications to work. Qt 5.7 must work out of the box.
    46	* Install these [libdbusmenu-glib](https://archlinux.org/packages/libdbusmenu-glib/) [libdbusmenu-gtk3](https://archlinux.org/packages/libdbusmenu-gtk3/) [libdbusmenu-gtk2](https://archlinux.org/packages/libdbusmenu-gtk2/) to get Chromium/Google Chrome to work
    47	 - Follow instructions in the (appmenu-gtk-module) [README](subprojects/appmenu-gtk-module/README.md), if it is not enabled automatically.
    48	
    49	 **DISTROS OTHER THAN ARCH OR UBUNTU**
    50	 - When building vala-panel-appmenu with meson, use the flag, `-Dappmenu-gtk-module=enabled`
    51	 - Follow instructions in the (appmenu-gtk-module) [README](subprojects/appmenu-gtk-module/README.md)
    52	
    53	
    54	**NOTE**: 
    55	Vala-Panel-Appmenu conflicts with [qt5ct](https://sourceforge.net/p/qt5ct/tickets/34/) before 21.04.2017, so, if you are using an older version of qt5ct, use another PlatformTheme.
    56	
    57	---
    58	Desktop Environment-Specific Settings
    59	---
    60	When using the Vala-panel-appmenu as an XFCE or MATE menu applet, you have to configure the appmenu to show in the panel applet, rather than on each individual window. This configuration should remove any 'double' menus you may experience:
    61	
    62	**XFCE**
    63	- If you are using Vala-Panel-Appmenu for XFCE-Panel, type the following lines into your console:
    64	```
    65	xfconf-query -c xsettings -p /Gtk/ShellShowsMenubar -n -t bool -s true
    66	xfconf-query -c xsettings -p /Gtk/ShellShowsAppmenu -n -t bool -s true
    67	```
    68	
    69	**MATE**
    70	- Enable the appmenu and menubar in gtk with these steps:
    71	- If you are using MATE>=1.19 (or 1.18 in Ubuntu), use this commands:
    72	```
    73	gsettings set org.mate.interface gtk-shell-shows-app-menu true
    74	gsettings set org.mate.interface gtk-shell-shows-menubar true
    75	```
    76	
    77	**BUDGIE**
    78	- If you using gnome-settings-daemon, you should go to dconf-editor and set key `org.gnome.settings-daemon.plugins.xsettings.overrides` to `{'Gtk/ShellShowsAppMenu': <0>, 'Gtk/ShellShowsMenubar': <1>}`
    79	
    80	- If commands above does not work, create or edit .config/gtk-3.0/settings.ini file in your home(~) directory and add the following lines to it under `[Settings]`:
    81	```
    82	  gtk-shell-shows-app-menu=true
    83	  gtk-shell-shows-menubar=true
    84	```
    85	
    86	---
    87	Experimental Features
    88	---
    89	**JAyatana**
    90	
    91	JAyatana allows for displaying global menus in Java Swing applications. Because Vala-Panel-Appmenu uses the unity-gtk-module backend, this should theoretically work with JAyatana, although applications such as Netbeans and the JetBrains suite of IDEs require some configuration, which you can figure out with a cursory internet search.
    92	
    93	There are some problems with the implementation, notably that you need to include `env XDG_CURRENT_DESKTOP=Unity` to the beginning of your launch command.
    94	
    95	Basic Instructions for Enabling JAyatana:
    96	* Install OpenJDK >= 9 or JDK >= 1.9
    97	* Build vala-panel-appmenu with `-DENABLE_JAYATANA=ON`
    98	* Add following lines to your ~/.profile and ~/.bashrc, in any order:
    99	```
   100	export _JAVA_OPTIONS="${_JAVA_OPTIONS} -javaagent:/usr/share/java/jayatanaag.jar"
   101	export JAYATANA_FORCE=1
   102	```
   103	
   104	---
   105	Dependency Packages
   106	---
   107	**Ubuntu 18.04**
   108	
   109	*All variants require:* `git build-essential cmake bamfdaemon libdbusmenu-glib-dev libgtk2.0-dev gobject-introspection libbamf3-dev libdbus-glib-1-dev libffi-dev libgirepository1.0-dev libpeas-dev libstartup-notification0-dev libwnck-3-dev libwnck-common libwnck22 libxml2-utils libxres-dev libvala-0.40-0 valac valac-0.40-vapi`
   110	
   111	*Ubuntu Budgie also needs:* `budgie-core-dev gir1.2-budgie-1.0 libbudgie-plugin0 libbudgietheme0 libraven0`
   112	
   113	*Ubuntu MATE also needs:* `libmate-panel-applet-dev`
   114	
   115	*Xubuntu also needs:* `exo-utils libexo-1-0 libexo-2-0 libexo-common libexo-helpers libgarcon-1-0 libgarcon-common libxfce4panel-2.0-4 libxfce4panel-2.0-dev libxfce4ui-1-0 libxfce4ui-2-0 libxfce4ui-common libxfce4util7 libxfce4util-common libxfce4util-dev libxfconf-0-2 libxfconf-0-dev xfce4-panel xfce4-panel-dev xfconf`
   116	
   117	*Vala Panel also needs:* `libvalapanel0 libvalapanel-dev`
   118	
   119	Author
   120	===
   121	 * Athor <ria.freelander@gmail.com>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/com.canonical.dbusmenu.xml
--------------------------------------------------------------------------------
     1	<node>
     2	   <interface name="com.canonical.dbusmenu">
     3	      <annotation name="org.gtk.GDBus.C.Name" value="Xml" />
     4	      <property name="Version" type="u" access="read" />
     5	      <property name="Status" type="s" access="read" />
     6	      <property name="TextDirection" type="s" access="read" />
     7	      <property name="IconThemePath" type="as" access="read" />
     8	      <signal name="ItemsPropertiesUpdated">
     9	         <arg type="a(ia{sv})" direction="out" />
    10	         <arg type="a(ias)" direction="out" />
    11	      </signal>
    12	      <signal name="LayoutUpdated">
    13	         <arg name="revision" type="u" direction="out" />
    14	         <arg name="parentId" type="i" direction="out" />
    15	      </signal>
    16	      <signal name="ItemActivationRequested">
    17	         <arg name="id" type="i" direction="out" />
    18	         <arg name="timeStamp" type="u" direction="out" />
    19	      </signal>
    20	      <method name="Event">
    21	         <arg name="id" type="i" direction="in" />
    22	         <arg name="eventId" type="s" direction="in" />
    23	         <arg name="data" type="v" direction="in" />
    24	         <arg name="timestamp" type="u" direction="in" />
    25	         <annotation name="org.freedesktop.DBus.Method.NoReply" value="true" />
    26	      </method>
    27	      <method name="EventGroup">
    28	         <arg type="a(isvu)" name="events" direction="in" />
    29	         <arg type="ai" name="idErrors" direction="out" />
    30	      </method>
    31	      <method name="GetProperty">
    32	         <arg type="v" direction="out" />
    33	         <arg name="id" type="i" direction="in" />
    34	         <arg name="property" type="s" direction="in" />
    35	      </method>
    36	      <method name="GetLayout">
    37	         <arg type="u" direction="out" />
    38	         <arg name="parentId" type="i" direction="in" />
    39	         <arg name="recursionDepth" type="i" direction="in" />
    40	         <arg name="propertyNames" type="as" direction="in" />
    41	         <arg name="item" type="(ia{sv}av)" direction="out" />
    42	      </method>
    43	      <method name="GetGroupProperties">
    44	         <arg type="a(ia{sv})" direction="out" />
    45	         <arg name="ids" type="ai" direction="in" />
    46	         <arg name="propertyNames" type="as" direction="in" />
    47	      </method>
    48	      <method name="AboutToShow">
    49	         <arg name="needUpdate" type="b" direction="out" />
    50	         <arg name="id" type="i" direction="in" />
    51	      </method>
    52	      <method name="AboutToShowGroup">
    53	         <arg type="ai" name="ids" direction="in" />
    54	         <arg type="ai" name="updatesNeeded" direction="out" />
    55	         <arg type="ai" name="idErrors" direction="out" />
    56	      </method>
    57	   </interface>
    58	</node>
    59	
    60	
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/debug.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 * Copyright (C) 2013-2018 Allison Lortie <desrt@desrt.ca>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 */
    19	
    20	#include "debug.h"
    21	#include <gio/gio.h>
    22	#include <stdbool.h>
    23	/* Markup printing {{{1 */
    24	
    25	/* This used to be part of GLib, but it was removed before the stable
    26	 * release because it wasn't generally useful.  We want it here, though.
    27	 */
    28	
    29	G_GNUC_INTERNAL void g_menu_markup_print_to_console(GMenuModel *menu)
    30	{
    31		GString *str = g_string_new(NULL);
    32		g_menu_markup_print_string(str, menu, 4, 4);
    33		char *cstr = g_string_free(str, false);
    34		g_print("%s\n", cstr);
    35	}
    36	
    37	G_GNUC_INTERNAL void dbus_menu_print_variant(GVariant *var)
    38	{
    39		g_autofree char *pr = g_variant_print(var, true);
    40		g_print("%s\n", pr);
    41	}
    42	
    43	static void indent_string(GString *string, gint indent)
    44	{
    45		while (indent--)
    46			g_string_append_c(string, ' ');
    47	}
    48	
    49	G_GNUC_INTERNAL GString *g_menu_markup_print_string(GString *string, GMenuModel *model, gint indent,
    50	                                                    gint tabstop)
    51	{
    52		gboolean need_nl = false;
    53		gint i, n;
    54	
    55		if G_UNLIKELY (string == NULL)
    56			string = g_string_new(NULL);
    57	
    58		n = g_menu_model_get_n_items(model);
    59	
    60		for (i = 0; i < n; i++)
    61		{
    62			GMenuAttributeIter *attr_iter;
    63			GMenuLinkIter *link_iter;
    64			GString *contents;
    65			GString *attrs;
    66	
    67			attr_iter = g_menu_model_iterate_item_attributes(model, i);
    68			link_iter = g_menu_model_iterate_item_links(model, i);
    69			contents  = g_string_new(NULL);
    70			attrs     = g_string_new(NULL);
    71	
    72			while (g_menu_attribute_iter_next(attr_iter))
    73			{
    74				const char *name = g_menu_attribute_iter_get_name(attr_iter);
    75				GVariant *value  = g_menu_attribute_iter_get_value(attr_iter);
    76	
    77				if (g_variant_is_of_type(value, G_VARIANT_TYPE_STRING))
    78				{
    79					char *str;
    80					str = g_markup_printf_escaped(" %s='%s'",
    81					                              name,
    82					                              g_variant_get_string(value, NULL));
    83					g_string_append(attrs, str);
    84					g_free(str);
    85				}
    86	
    87				else
    88				{
    89					char *printed;
    90					char *str;
    91					const char *type;
    92	
    93					printed = g_variant_print(value, true);
    94					type    = g_variant_type_peek_string(g_variant_get_type(value));
    95					str     = g_markup_printf_escaped(
    96	                                    "<attribute name='%s' type='%s'>%s</attribute>\n",
    97	                                    name,
    98	                                    type,
    99	                                    printed);
   100					indent_string(contents, indent + tabstop);
   101					g_string_append(contents, str);
   102					g_free(printed);
   103					g_free(str);
   104				}
   105	
   106				g_variant_unref(value);
   107			}
   108			g_object_unref(attr_iter);
   109	
   110			while (g_menu_link_iter_next(link_iter))
   111			{
   112				const char *name = g_menu_link_iter_get_name(link_iter);
   113				GMenuModel *menu = g_menu_link_iter_get_value(link_iter);
   114				char *str;
   115	
   116				if (contents->str[0])
   117					g_string_append_c(contents, '\n');
   118	
   119				str = g_markup_printf_escaped("<link name='%s'>\n", name);
   120				indent_string(contents, indent + tabstop);
   121				g_string_append(contents, str);
   122				g_free(str);
   123	
   124				g_menu_markup_print_string(contents, menu, indent + 2 * tabstop, tabstop);
   125	
   126				indent_string(contents, indent + tabstop);
   127				g_string_append(contents, "</link>\n");
   128				g_object_unref(menu);
   129			}
   130			g_object_unref(link_iter);
   131	
   132			if (contents->str[0])
   133			{
   134				indent_string(string, indent);
   135				g_string_append_printf(string, "<item%s>\n", attrs->str);
   136				g_string_append(string, contents->str);
   137				indent_string(string, indent);
   138				g_string_append(string, "</item>\n");
   139				need_nl = true;
   140			}
   141	
   142			else
   143			{
   144				if (need_nl)
   145					g_string_append_c(string, '\n');
   146	
   147				indent_string(string, indent);
   148				g_string_append_printf(string, "<item%s/>\n", attrs->str);
   149				need_nl = false;
   150			}
   151	
   152			g_string_free(contents, true);
   153			g_string_free(attrs, true);
   154		}
   155	
   156		return string;
   157	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/debug.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef DEBUG_H
    20	#define DEBUG_H
    21	
    22	#include <gio/gio.h>
    23	G_GNUC_INTERNAL GString *g_menu_markup_print_string(GString *string, GMenuModel *model, gint indent,
    24	                                                    gint tabstop);
    25	G_GNUC_INTERNAL void g_menu_markup_print_to_console(GMenuModel *menu);
    26	G_GNUC_INTERNAL void dbus_menu_print_variant(GVariant *var);
    27	#endif // DEBUG_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/definitions.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef DEFINITIONS_H
    20	#define DEFINITIONS_H
    21	
    22	#define DBUS_MENU_ACTION_NAMESPACE "dbusmenu"
    23	#define DBUS_MENU_ACTION_NAMESPACE_PREFIX DBUS_MENU_ACTION_NAMESPACE "."
    24	
    25	#define ACTION_PREFIX "id-"
    26	#define SUBMENU_PREFIX "submenu-"
    27	#define CURRENT_TIME 0L
    28	#define HAS_ICON_NAME "has-icon-name"
    29	
    30	typedef enum
    31	{
    32		DBUS_MENU_ACTION_SECTION,
    33		DBUS_MENU_ACTION_NORMAL,
    34		DBUS_MENU_ACTION_CHECKMARK,
    35		DBUS_MENU_ACTION_RADIO,
    36		DBUS_MENU_ACTION_SUBMENU,
    37		DBUS_MENU_ACTION_ALL
    38	} DBusMenuActionType;
    39	
    40	#define SUBMENU_ACTION_MENUMODEL_QUARK_STR "submenu-action_menumodel"
    41	#define ACTIVATE_ID_QUARK_STR "checker-quark"
    42	#define POPULATED_QUARK "is-populated"
    43	
    44	#define DBUS_MENU_PROP_TYPE "type"
    45	#define DBUS_MENU_TYPE_SEPARATOR "separator"
    46	#define DBUS_MENU_TYPE_NORMAL "normal"
    47	
    48	#define DBUS_MENU_PROP_TOGGLE_TYPE "toggle-type"
    49	#define DBUS_MENU_TOGGLE_TYPE_CHECK "checkmark"
    50	#define DBUS_MENU_TOGGLE_TYPE_RADIO "radio"
    51	
    52	#define DBUS_MENU_PROP_CHILDREN_DISPLAY "children-display"
    53	#define DBUS_MENU_CHILDREN_DISPLAY_SUBMENU "submenu"
    54	
    55	#define DBUS_MENU_SHORTCUT_CONTROL "Control"
    56	#define DBUS_MENU_SHORTCUT_ALT "Alt"
    57	#define DBUS_MENU_SHORTCUT_SHIFT "Shift"
    58	#define DBUS_MENU_SHORTCUT_SUPER "Super"
    59	
    60	#define DBUS_MENUMODEL_SHORTCUT_SHIFT "<Shift>"
    61	#define DBUS_MENUMODEL_SHORTCUT_CONTROL "<Control>"
    62	#define DBUS_MENUMODEL_SHORTCUT_ALT "<Alt>"
    63	#define DBUS_MENUMODEL_SHORTCUT_SUPER "<Super>"
    64	
    65	#define DBUS_MENU_DISABLED_ACTION "ls.disabled"
    66	#define DBUS_MENU_DISABLED_SUBMENU "disabled-submenu"
    67	#define DBUS_MENU_PROPERTY_ENABLED "enabled"
    68	#define DBUS_MENU_PROPERTY_TOGGLE_STATE "toggle-state"
    69	#define DBUS_MENU_ACTION_RADIO_SELECTED "+"
    70	#define DBUS_MENU_ACTION_RADIO_UNSELECTED "-"
    71	
    72	#define G_MENU_ATTRIBUTE_ACCEL "accel"
    73	#define G_MENU_ATTRIBUTE_ACCEL_TEXT "x-canonical-accel"
    74	#define G_MENU_ATTRIBUTE_SUBMENU_ACTION "submenu-action"
    75	#define G_MENU_ATTRIBUTE_HIDDEN_WHEN "hidden-when"
    76	#define G_MENU_ATTRIBUTE_VERB_ICON "verb-icon"
    77	#define G_MENU_HIDDEN_WHEN_ACTION_MISSING "action-missing"
    78	#define G_MENU_HIDDEN_WHEN_ACTION_DISABLED "action-disabled"
    79	
    80	#define g_signal_handlers_block_by_func_only(instance, func)                                       \
    81		g_signal_handlers_block_matched((instance),                                                \
    82		                                (GSignalMatchType)(G_SIGNAL_MATCH_FUNC),                   \
    83		                                0,                                                         \
    84		                                0,                                                         \
    85		                                NULL,                                                      \
    86		                                (gpointer)(func),                                          \
    87		                                NULL)
    88	
    89	#define g_signal_handlers_unblock_by_func_only(instance, func)                                     \
    90		g_signal_handlers_unblock_matched((instance),                                              \
    91		                                  (GSignalMatchType)(G_SIGNAL_MATCH_FUNC),                 \
    92		                                  0,                                                       \
    93		                                  0,                                                       \
    94		                                  NULL,                                                    \
    95		                                  (gpointer)(func),                                        \
    96		                                  NULL)
    97	
    98	#define g_signal_handlers_block_by_data(instance, data)                                            \
    99		g_signal_handlers_block_matched((instance),                                                \
   100		                                (GSignalMatchType)(G_SIGNAL_MATCH_DATA),                   \
   101		                                0,                                                         \
   102		                                0,                                                         \
   103		                                NULL,                                                      \
   104		                                NULL,                                                      \
   105		                                (data))
   106	
   107	#define g_signal_handlers_unblock_by_data(instance, data)                                          \
   108		g_signal_handlers_unblock_matched((instance),                                              \
   109		                                  (GSignalMatchType)(G_SIGNAL_MATCH_DATA),                 \
   110		                                  0,                                                       \
   111		                                  0,                                                       \
   112		                                  NULL,                                                    \
   113		                                  NULL,                                                    \
   114		                                  (data))
   115	
   116	#define g_signal_handlers_disconnect_by_func_only(instance, func)                                  \
   117		g_signal_handlers_disconnect_matched((instance),                                           \
   118		                                     (GSignalMatchType)(G_SIGNAL_MATCH_FUNC),              \
   119		                                     0,                                                    \
   120		                                     0,                                                    \
   121		                                     NULL,                                                 \
   122		                                     (gpointer)(func),                                     \
   123		                                     NULL)
   124	
   125	#endif // DEFINITIONS_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/importer.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include "importer.h"
    20	#include "dbusmenu-interface.h"
    21	#include "model.h"
    22	
    23	struct _DBusMenuImporter
    24	{
    25		GObject parent_instance;
    26		char *bus_name;
    27		char *object_path;
    28		ulong name_id;
    29		GCancellable *cancellable;
    30		DBusMenuXml *proxy;
    31		DBusMenuModel *top_model;
    32		GSimpleActionGroup *all_actions;
    33	};
    34	
    35	enum
    36	{
    37		PROP_NULL,
    38		PROP_BUS_NAME,
    39		PROP_OBJECT_PATH,
    40		PROP_MODEL,
    41		PROP_ACTION_GROUP,
    42		LAST_PROP
    43	};
    44	
    45	static GParamSpec *properties[LAST_PROP] = { NULL };
    46	G_DEFINE_TYPE(DBusMenuImporter, dbus_menu_importer, G_TYPE_OBJECT)
    47	
    48	static bool dbus_menu_importer_check(DBusMenuImporter *menu)
    49	{
    50		return DBUS_MENU_IS_XML(menu->proxy);
    51	}
    52	
    53	static void dbus_menu_importer_on_root_model_changed(GMenuModel *model, gint position, gint removed,
    54	                                                     gint added, gpointer user_data)
    55	{
    56		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(user_data);
    57		g_object_notify_by_pspec(G_OBJECT(menu), properties[PROP_MODEL]);
    58	}
    59	
    60	static void proxy_ready_cb(GObject *source_object, GAsyncResult *res, gpointer user_data)
    61	{
    62		g_autoptr(GError) error = NULL;
    63		DBusMenuXml *proxy      = dbus_menu_xml_proxy_new_finish(res, &error);
    64	
    65		if (g_error_matches(error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
    66			return;
    67	
    68		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(user_data);
    69		menu->proxy            = proxy;
    70	
    71		if (error)
    72		{
    73			g_warning("%s", error->message);
    74			return;
    75		}
    76		if (dbus_menu_importer_check(menu))
    77			g_object_set(menu->top_model, "xml", proxy, NULL);
    78		g_object_notify_by_pspec(G_OBJECT(menu), properties[PROP_MODEL]);
    79	}
    80	
    81	static void name_appeared_cb(GDBusConnection *connection, const char *name, const char *name_owner,
    82	                             gpointer user_data)
    83	{
    84		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(user_data);
    85	
    86		dbus_menu_xml_proxy_new(connection,
    87		                        G_DBUS_PROXY_FLAGS_NONE,
    88		                        menu->bus_name,
    89		                        menu->object_path,
    90		                        menu->cancellable,
    91		                        proxy_ready_cb,
    92		                        menu);
    93	}
    94	
    95	static void name_vanished_cb(GDBusConnection *connection, const char *name, gpointer user_data)
    96	{
    97		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(user_data);
    98	
    99		g_object_set(menu->top_model, "xml", NULL, NULL);
   100		g_object_notify_by_pspec(G_OBJECT(menu), properties[PROP_MODEL]);
   101		g_clear_object(&menu->proxy);
   102	}
   103	
   104	static void dbus_menu_importer_constructed(GObject *object)
   105	{
   106		G_OBJECT_CLASS(dbus_menu_importer_parent_class)->constructed(object);
   107		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(object);
   108	
   109		menu->name_id = g_bus_watch_name(G_BUS_TYPE_SESSION,
   110		                                 menu->bus_name,
   111		                                 G_BUS_NAME_WATCHER_FLAGS_NONE,
   112		                                 name_appeared_cb,
   113		                                 name_vanished_cb,
   114		                                 menu,
   115		                                 NULL);
   116	}
   117	
   118	static void dbus_menu_importer_dispose(GObject *object)
   119	{
   120		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(object);
   121	
   122		if (menu->name_id > 0)
   123		{
   124			g_bus_unwatch_name(menu->name_id);
   125			menu->name_id = 0;
   126		}
   127		g_cancellable_cancel(menu->cancellable);
   128		g_clear_object(&menu->cancellable);
   129		g_signal_handlers_disconnect_by_data(menu->top_model, menu);
   130		g_clear_object(&menu->top_model);
   131		g_clear_object(&menu->proxy);
   132		g_clear_object(&menu->all_actions);
   133	
   134		G_OBJECT_CLASS(dbus_menu_importer_parent_class)->dispose(object);
   135	}
   136	
   137	static void dbus_menu_importer_finalize(GObject *object)
   138	{
   139		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(object);
   140	
   141		g_clear_pointer(&menu->bus_name, g_free);
   142		g_clear_pointer(&menu->object_path, g_free);
   143	
   144		G_OBJECT_CLASS(dbus_menu_importer_parent_class)->finalize(object);
   145	}
   146	
   147	static void dbus_menu_importer_set_property(GObject *object, guint property_id, const GValue *value,
   148	                                            GParamSpec *pspec)
   149	{
   150		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(object);
   151	
   152		switch (property_id)
   153		{
   154		case PROP_BUS_NAME:
   155			menu->bus_name = g_value_dup_string(value);
   156			break;
   157	
   158		case PROP_OBJECT_PATH:
   159			menu->object_path = g_value_dup_string(value);
   160			break;
   161	
   162		default:
   163			G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec);
   164			break;
   165		}
   166	}
   167	
   168	static void dbus_menu_importer_get_property(GObject *object, guint property_id, GValue *value,
   169	                                            GParamSpec *pspec)
   170	{
   171		DBusMenuImporter *menu = DBUS_MENU_IMPORTER(object);
   172		switch (property_id)
   173		{
   174		case PROP_MODEL:
   175			g_value_set_object(value, menu->top_model);
   176			break;
   177		case PROP_ACTION_GROUP:
   178			g_value_set_object(value, menu->all_actions);
   179			break;
   180	
   181		default:
   182			G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec);
   183			break;
   184		}
   185	}
   186	
   187	static void install_properties(GObjectClass *object_class)
   188	{
   189		properties[PROP_BUS_NAME] =
   190		    g_param_spec_string("bus-name",
   191		                        "bus-name",
   192		                        "bus-name",
   193		                        NULL,
   194		                        G_PARAM_CONSTRUCT_ONLY | G_PARAM_WRITABLE | G_PARAM_STATIC_STRINGS);
   195	
   196		properties[PROP_OBJECT_PATH] =
   197		    g_param_spec_string("object-path",
   198		                        "object-path",
   199		                        "object-path",
   200		                        NULL,
   201		                        G_PARAM_CONSTRUCT_ONLY | G_PARAM_WRITABLE | G_PARAM_STATIC_STRINGS);
   202		properties[PROP_MODEL] = g_param_spec_object("model",
   203		                                             "model",
   204		                                             "model",
   205		                                             G_TYPE_MENU_MODEL,
   206		                                             G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
   207		properties[PROP_ACTION_GROUP] =
   208		    g_param_spec_object("action-group",
   209		                        "action-group",
   210		                        "action-group",
   211		                        G_TYPE_ACTION_GROUP,
   212		                        G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
   213	
   214		g_object_class_install_properties(object_class, LAST_PROP, properties);
   215	}
   216	
   217	static void dbus_menu_importer_class_init(DBusMenuImporterClass *menu_class)
   218	{
   219		GObjectClass *object_class;
   220	
   221		object_class = G_OBJECT_CLASS(menu_class);
   222	
   223		object_class->constructed  = dbus_menu_importer_constructed;
   224		object_class->dispose      = dbus_menu_importer_dispose;
   225		object_class->finalize     = dbus_menu_importer_finalize;
   226		object_class->set_property = dbus_menu_importer_set_property;
   227		object_class->get_property = dbus_menu_importer_get_property;
   228	
   229		install_properties(object_class);
   230	}
   231	
   232	static void dbus_menu_importer_init(DBusMenuImporter *menu)
   233	{
   234		menu->proxy       = NULL;
   235		menu->all_actions = g_simple_action_group_new();
   236		menu->top_model =
   237		    dbus_menu_model_new(0, NULL, menu->proxy, G_ACTION_GROUP(menu->all_actions));
   238		g_signal_connect(menu->top_model,
   239		                 "items-changed",
   240		                 G_CALLBACK(dbus_menu_importer_on_root_model_changed),
   241		                 menu);
   242		menu->cancellable = g_cancellable_new();
   243	}
   244	
   245	DBusMenuImporter *dbus_menu_importer_new(const char *bus_name, const char *object_path)
   246	{
   247		return g_object_new(dbus_menu_importer_get_type(),
   248		                    "bus-name",
   249		                    bus_name,
   250		                    "object-path",
   251		                    object_path,
   252		                    NULL);
   253	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/importer-enums.c.template
--------------------------------------------------------------------------------
     1	/*** BEGIN file-header ***/
     2	#include "importer-enums.h"
     3	
     4	/*** END file-header ***/
     5	
     6	/*** BEGIN file-production ***/
     7	/* enumerations from "@basename@" */
     8	#include "@basename@"
     9	
    10	/*** END file-production ***/
    11	
    12	/*** BEGIN value-header ***/
    13	GType
    14	@enum_name@_get_type (void)
    15	{
    16		static GType the_type = 0;
    17		
    18		if (the_type == 0)
    19		{
    20			static const G@Type@Value values[] = {
    21	/*** END value-header ***/
    22	
    23	/*** BEGIN value-production ***/
    24				{ @VALUENAME@,
    25				  "@VALUENAME@",
    26				  "@valuenick@" },
    27	/*** END value-production ***/
    28	
    29	/*** BEGIN value-tail ***/
    30				{ 0, NULL, NULL }
    31			};
    32			the_type = g_@type@_register_static (
    33					g_intern_static_string ("@EnumName@"),
    34					values);
    35		}
    36		return the_type;
    37	}
    38	
    39	/**
    40		@enum_name@_get_nick:
    41		@value: The value of @EnumName@ to get the nick of
    42	
    43		Looks up in the enum table for the nick of @value.
    44	
    45		Return value: The nick for the given value or #NULL on error
    46	*/
    47	const gchar *
    48	@enum_name@_get_nick (@EnumName@ value)
    49	{
    50		GEnumClass * class = G_ENUM_CLASS(g_type_class_ref(@enum_name@_get_type()));
    51		g_return_val_if_fail(class != NULL, NULL);
    52	
    53		const gchar * ret = NULL;
    54		GEnumValue * val = g_enum_get_value(class, value);
    55		if (val != NULL) {
    56			ret = val->value_nick;
    57		}
    58	
    59		g_type_class_unref(class);
    60		return ret;
    61	}
    62	
    63	/**
    64		@enum_name@_get_value_from_nick:
    65		@nick: The enum nick to lookup
    66	
    67		Looks up in the enum table for the value of @nick.
    68	
    69		Return value: The value for the given @nick
    70	*/
    71	@EnumName@
    72	@enum_name@_get_value_from_nick (const gchar * nick)
    73	{
    74		GEnumClass * class = G_ENUM_CLASS(g_type_class_ref(@enum_name@_get_type()));
    75		g_return_val_if_fail(class != NULL, 0);
    76	
    77		@EnumName@ ret = 0;
    78		GEnumValue * val = g_enum_get_value_by_nick(class, nick);
    79		if (val != NULL) {
    80			ret = val->value;
    81		}
    82	
    83		g_type_class_unref(class);
    84		return ret;
    85	}
    86	
    87	/*** END value-tail ***/
    88	
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/importer-enums.h.template
--------------------------------------------------------------------------------
     1	/*** BEGIN file-header ***/
     2	#ifndef IMPORTER_ENUM_TYPES_H
     3	#define IMPORTER_ENUM_TYPES_H
     4	
     5	#include <glib-object.h>
     6	
     7	G_BEGIN_DECLS
     8	
     9	/*** END file-header ***/
    10	
    11	/*** BEGIN file-production ***/
    12	/* Enumerations from "@basename@" */
    13	#include "@basename@"
    14	
    15	/*** END file-production ***/
    16	
    17	/*** BEGIN enumeration-production ***/
    18	
    19	#define DBUS_MENU_TYPE_@ENUMSHORT@	(@enum_name@_get_type())
    20	
    21	GType @enum_name@_get_type (void) G_GNUC_CONST;
    22	const gchar * @enum_name@_get_nick (@EnumName@ value) G_GNUC_CONST;
    23	@EnumName@ @enum_name@_get_value_from_nick (const gchar * nick) G_GNUC_CONST;
    24	
    25	/*** END enumeration-production ***/
    26	
    27	/*** BEGIN file-tail ***/
    28	G_END_DECLS
    29	
    30	#endif /* VALA_PANEL_ENUM_TYPES_H */
    31	/*** END file-tail ***/
    32	
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/importer.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef IMPORTER_H
    20	#define IMPORTER_H
    21	
    22	#include <gio/gio.h>
    23	#include <stdbool.h>
    24	
    25	G_BEGIN_DECLS
    26	
    27	G_DECLARE_FINAL_TYPE(DBusMenuImporter, dbus_menu_importer, DBUS_MENU, IMPORTER, GObject)
    28	
    29	DBusMenuImporter *dbus_menu_importer_new(const char *bus_name, const char *object_path);
    30	
    31	G_END_DECLS
    32	
    33	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/item.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include <stdbool.h>
    20	
    21	#include "dbusmenu-interface.h"
    22	#include "definitions.h"
    23	#include "item.h"
    24	#include "utils.h"
    25	
    26	#define ITEM_MAGIC 0xDEADBEEF
    27	#define item_set_magic(item) (item)->magic = GUINT_TO_POINTER(ITEM_MAGIC)
    28	#define item_check_magic(item) (GPOINTER_TO_UINT((item)->magic) == ITEM_MAGIC)
    29	
    30	#define submenu_str(en) ((en) ? G_MENU_LINK_SUBMENU : DBUS_MENU_DISABLED_SUBMENU)
    31	
    32	G_GNUC_INTERNAL void dbus_menu_item_free(gpointer data);
    33	G_GNUC_INTERNAL DBusMenuItem *dbus_menu_item_copy(DBusMenuItem *src);
    34	G_DEFINE_BOXED_TYPE(DBusMenuItem, dbus_menu_item, dbus_menu_item_copy, dbus_menu_item_free)
    35	#if 0
    36	#include "item-pixbuf.c"
    37	#endif
    38	
    39	static void act_props_try_update(DBusMenuItem *item);
    40	
    41	G_GNUC_INTERNAL DBusMenuItem *dbus_menu_item_new_first_section(u_int32_t id,
    42	                                                               GActionGroup *action_group)
    43	{
    44		DBusMenuItem *item = g_slice_new0(DBusMenuItem);
    45		item->id           = id;
    46		item->action_type  = DBUS_MENU_ACTION_SECTION;
    47		item->enabled      = false;
    48		item->toggled      = false;
    49		item->attrs =
    50		    g_hash_table_new_full(g_str_hash, g_str_equal, g_free, (GDestroyNotify)g_variant_unref);
    51		item->links = g_hash_table_new_full(g_str_hash, g_str_equal, NULL, g_object_unref);
    52		item->ref_action_group = action_group;
    53		item_set_magic(item);
    54		return item;
    55	}
    56	
    57	G_GNUC_INTERNAL DBusMenuItem *dbus_menu_item_new(u_int32_t id, DBusMenuModel *parent_model,
    58	                                                 GVariant *props)
    59	{
    60		DBusMenuItem *item = g_slice_new0(DBusMenuItem);
    61		DBusMenuXml *xml;
    62		GVariantIter iter;
    63		const char *prop;
    64		GVariant *value;
    65		item_set_magic(item);
    66		item->enabled = true;
    67		item->toggled = false;
    68		item->id      = id;
    69		item->attrs =
    70		    g_hash_table_new_full(g_str_hash, g_str_equal, g_free, (GDestroyNotify)g_variant_unref);
    71		item->links = g_hash_table_new_full(g_str_hash, g_str_equal, NULL, g_object_unref);
    72		g_object_get(parent_model, "action-group", &item->ref_action_group, "xml", &xml, NULL);
    73		g_variant_iter_init(&iter, props);
    74		// Iterate by immutable properties, it is construct_only
    75		bool action_creator_found = false;
    76		while (g_variant_iter_loop(&iter, "{&sv}", &prop, &value))
    77		{
    78			if (g_strcmp0(prop, DBUS_MENU_PROP_CHILDREN_DISPLAY) == 0)
    79			{
    80				if (value == NULL)
    81				{
    82					g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_SUBMENU_ACTION);
    83					continue;
    84				}
    85				else if (g_strcmp0(g_variant_get_string(value, NULL),
    86				                   DBUS_MENU_CHILDREN_DISPLAY_SUBMENU) == 0)
    87				{
    88					item->action_type = DBUS_MENU_ACTION_SUBMENU;
    89					g_autofree char *name =
    90					    dbus_menu_action_get_name(id, item->action_type, true);
    91					g_hash_table_insert(item->attrs,
    92					                    g_strdup(G_MENU_ATTRIBUTE_SUBMENU_ACTION),
    93					                    g_variant_new_string(name));
    94					action_creator_found = true;
    95				}
    96			}
    97			else if (g_strcmp0(prop, DBUS_MENU_PROP_TOGGLE_TYPE) == 0)
    98			{
    99				g_autofree char *name =
   100				    dbus_menu_action_get_name(id, item->action_type, true);
   101				if (g_strcmp0(g_variant_get_string(value, NULL),
   102				              DBUS_MENU_TOGGLE_TYPE_CHECK) == 0)
   103				{
   104					item->action_type = DBUS_MENU_ACTION_CHECKMARK;
   105					g_hash_table_insert(item->attrs,
   106					                    g_strdup(G_MENU_ATTRIBUTE_ACTION),
   107					                    g_variant_new_string(name));
   108					action_creator_found = true;
   109				}
   110				else if (g_strcmp0(g_variant_get_string(value, NULL),
   111				                   DBUS_MENU_TOGGLE_TYPE_RADIO) == 0)
   112				{
   113					item->action_type = DBUS_MENU_ACTION_RADIO;
   114					g_hash_table_insert(item->attrs,
   115					                    g_strdup(G_MENU_ATTRIBUTE_ACTION),
   116					                    g_variant_new_string(name));
   117					GVariant *vstr =
   118					    g_variant_new_string(DBUS_MENU_ACTION_RADIO_SELECTED);
   119					g_hash_table_insert(item->attrs,
   120					                    g_strdup(G_MENU_ATTRIBUTE_TARGET),
   121					                    g_variant_ref_sink(vstr));
   122					action_creator_found = true;
   123				}
   124			}
   125			else if (g_strcmp0(prop, DBUS_MENU_PROP_TYPE) == 0)
   126			{
   127				const char *type = g_variant_get_string(value, NULL);
   128				if (!g_strcmp0(type, DBUS_MENU_TYPE_SEPARATOR))
   129				{
   130					item->action_type    = DBUS_MENU_ACTION_SECTION;
   131					action_creator_found = true;
   132				}
   133				else if (!g_strcmp0(type, DBUS_MENU_TYPE_NORMAL))
   134				{
   135					item->action_type = DBUS_MENU_ACTION_NORMAL;
   136					g_autofree char *name =
   137					    dbus_menu_action_get_name(id, item->action_type, true);
   138					g_hash_table_insert(item->attrs,
   139					                    g_strdup(G_MENU_ATTRIBUTE_ACTION),
   140					                    g_variant_new_string(name));
   141					action_creator_found = true;
   142				}
   143			}
   144			else if (g_strcmp0(prop, "x-kde-title") == 0)
   145			{
   146				item->action_type = DBUS_MENU_ACTION_SECTION;
   147				g_hash_table_insert(item->attrs, g_strdup(G_MENU_ATTRIBUTE_LABEL), value);
   148				action_creator_found = true;
   149			}
   150			else if (!action_creator_found)
   151			{
   152				item->action_type = DBUS_MENU_ACTION_NORMAL;
   153				g_autofree char *name =
   154				    dbus_menu_action_get_name(id, item->action_type, true);
   155				g_hash_table_insert(item->attrs,
   156				                    g_strdup(G_MENU_ATTRIBUTE_ACTION),
   157				                    g_variant_new_string(name));
   158				action_creator_found = true;
   159			}
   160		}
   161		if (item->action_type != DBUS_MENU_ACTION_SECTION)
   162			g_hash_table_insert(item->attrs,
   163			                    g_strdup(G_MENU_ATTRIBUTE_LABEL),
   164			                    g_variant_new_string(""));
   165		dbus_menu_item_update_props(item, props);
   166		return item;
   167	}
   168	
   169	G_GNUC_INTERNAL void dbus_menu_item_free(gpointer data)
   170	{
   171		DBusMenuItem *item = (DBusMenuItem *)data;
   172		if (item == NULL)
   173			return;
   174		item->magic = NULL;
   175		g_clear_pointer(&item->attrs, g_hash_table_destroy);
   176		g_clear_pointer(&item->links, g_hash_table_destroy);
   177		g_clear_object(&item->ref_action);
   178		g_source_remove_by_user_data(item);
   179		g_slice_free(DBusMenuItem, data);
   180	}
   181	
   182	G_GNUC_INTERNAL DBusMenuItem *dbus_menu_item_copy(DBusMenuItem *src)
   183	{
   184		DBusMenuItem *dst     = g_slice_new0(DBusMenuItem);
   185		dst->id               = src->id;
   186		dst->action_type      = src->action_type;
   187		dst->enabled          = src->enabled;
   188		dst->toggled          = src->toggled;
   189		dst->ref_action       = G_ACTION(g_object_ref(src->ref_action));
   190		dst->ref_action_group = src->ref_action_group;
   191		dst->attrs            = g_hash_table_ref(src->attrs);
   192		dst->links            = g_hash_table_ref(src->links);
   193		return dst;
   194	}
   195	
   196	static bool attr_update_checked(DBusMenuItem *item, const char *key, GVariant *value)
   197	{
   198		GVariant *old  = (GVariant *)g_hash_table_lookup(item->attrs, key);
   199		bool are_equal = false;
   200		if (old != NULL)
   201			are_equal = g_variant_equal(old, value);
   202		if (!are_equal)
   203		{
   204			g_hash_table_insert(item->attrs, g_strdup(key), g_variant_ref_sink(value));
   205			return true;
   206		}
   207		return false;
   208	}
   209	
   210	G_GNUC_INTERNAL bool dbus_menu_item_is_firefox_stub(DBusMenuItem *item)
   211	{
   212		const char *hidden_when =
   213		    (const char *)g_hash_table_lookup(item->attrs, G_MENU_ATTRIBUTE_HIDDEN_WHEN);
   214		const char *action =
   215		    (const char *)g_hash_table_lookup(item->attrs, G_MENU_ATTRIBUTE_ACTION);
   216		const char *label = (const char *)g_hash_table_lookup(item->attrs, G_MENU_ATTRIBUTE_LABEL);
   217		if (!g_strcmp0(hidden_when, G_MENU_HIDDEN_WHEN_ACTION_MISSING) &&
   218		    !g_strcmp0(action, DBUS_MENU_DISABLED_ACTION) && !g_strcmp0(label, "Label Empty"))
   219			return true;
   220		return false;
   221	}
   222	
   223	G_GNUC_INTERNAL void dbus_menu_item_preload(DBusMenuItem *item)
   224	{
   225		if (!item_check_magic(item))
   226			return;
   227		if (item->action_type != DBUS_MENU_ACTION_SUBMENU)
   228			return;
   229		int id;
   230		DBusMenuXml *xml = NULL;
   231		bool need_update;
   232		DBusMenuModel *submenu =
   233		    DBUS_MENU_MODEL(g_hash_table_lookup(item->links, submenu_str(item->enabled)));
   234		if (!submenu || !DBUS_MENU_IS_MODEL(submenu))
   235			return;
   236		g_object_get(submenu, "parent-id", &id, "xml", &xml, NULL);
   237		if (!xml || !DBUS_MENU_IS_XML(xml))
   238			return;
   239		dbus_menu_xml_call_event_sync(xml,
   240		                              id,
   241		                              "opened",
   242		                              g_variant_new("v", g_variant_new_int32(0)),
   243		                              CURRENT_TIME,
   244		                              NULL,
   245		                              NULL);
   246		dbus_menu_xml_call_about_to_show_sync(xml, id, (gboolean *)&need_update, NULL, NULL);
   247		need_update = need_update || dbus_menu_model_is_layout_update_required(submenu);
   248		if (need_update)
   249			dbus_menu_model_update_layout(submenu);
   250	}
   251	
   252	G_GNUC_INTERNAL bool dbus_menu_item_copy_attrs(DBusMenuItem *src, DBusMenuItem *dst)
   253	{
   254		GHashTableIter iter;
   255		g_hash_table_iter_init(&iter, src->attrs);
   256		bool is_updated = false;
   257		char *key;
   258		GVariant *value;
   259		while (g_hash_table_iter_next(&iter, (void **)&key, (void **)&value))
   260		{
   261			is_updated = attr_update_checked(dst, key, value) || is_updated;
   262		}
   263		return is_updated;
   264	}
   265	
   266	G_GNUC_INTERNAL bool dbus_menu_item_update_enabled(DBusMenuItem *item, bool enabled)
   267	{
   268		bool updated = false;
   269		if (item->action_type == DBUS_MENU_ACTION_SUBMENU && !item->toggled)
   270		{
   271			DBusMenuModel *submenu =
   272			    DBUS_MENU_MODEL(g_hash_table_lookup(item->links, submenu_str(item->enabled)));
   273			if (item->enabled != enabled)
   274			{
   275				if (submenu != NULL)
   276				{
   277					g_object_ref(submenu);
   278					g_hash_table_remove(item->links, submenu_str(item->enabled));
   279					g_hash_table_insert(item->links, submenu_str(enabled), submenu);
   280				}
   281				if (enabled)
   282				{
   283					g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_ACTION);
   284				}
   285				else
   286				{
   287					g_hash_table_insert(item->attrs,
   288					                    g_strdup(G_MENU_ATTRIBUTE_ACTION),
   289					                    g_variant_new_string(
   290					                        DBUS_MENU_DISABLED_ACTION));
   291				}
   292				updated = true;
   293			}
   294		}
   295		item->enabled = enabled;
   296		act_props_try_update(item);
   297		return updated;
   298	}
   299	
   300	static void act_props_try_update(DBusMenuItem *item)
   301	{
   302		if (!G_IS_ACTION(item->ref_action))
   303			return;
   304		g_simple_action_set_enabled(G_SIMPLE_ACTION(item->ref_action), item->enabled);
   305		if (item->action_type == DBUS_MENU_ACTION_RADIO)
   306		{
   307			dbus_menu_action_lock(item->ref_action);
   308			g_action_change_state((item->ref_action),
   309			                      g_variant_new_string(
   310			                          item->toggled ? DBUS_MENU_ACTION_RADIO_SELECTED
   311			                                        : DBUS_MENU_ACTION_RADIO_UNSELECTED));
   312			dbus_menu_action_unlock(item->ref_action);
   313		}
   314		else if (item->action_type == DBUS_MENU_ACTION_CHECKMARK)
   315		{
   316			dbus_menu_action_lock(item->ref_action);
   317			g_action_change_state((item->ref_action), g_variant_new_boolean(item->toggled));
   318			dbus_menu_action_unlock(item->ref_action);
   319		}
   320	}
   321	
   322	static bool dbus_menu_item_update_shortcut(DBusMenuItem *item, GVariant *value)
   323	{
   324		GString *new_accel_string = g_string_new(NULL);
   325		if (g_variant_n_children(value) != 1)
   326			g_debug("Unable to parse shortcut correctly, too many keys. Taking first.");
   327	
   328		GVariantIter iter;
   329		GVariant *child = g_variant_get_child_value(value, 0);
   330		g_variant_iter_init(&iter, child);
   331		char *string;
   332	
   333		while (g_variant_iter_loop(&iter, "s", &string))
   334		{
   335			if (g_strcmp0(string, DBUS_MENU_SHORTCUT_CONTROL) == 0)
   336				g_string_append(new_accel_string, DBUS_MENUMODEL_SHORTCUT_CONTROL);
   337			else if (g_strcmp0(string, DBUS_MENU_SHORTCUT_ALT) == 0)
   338				g_string_append(new_accel_string, DBUS_MENUMODEL_SHORTCUT_ALT);
   339			else if (g_strcmp0(string, DBUS_MENU_SHORTCUT_SHIFT) == 0)
   340				g_string_append(new_accel_string, DBUS_MENUMODEL_SHORTCUT_SHIFT);
   341			else if (g_strcmp0(string, DBUS_MENU_SHORTCUT_SUPER) == 0)
   342				g_string_append(new_accel_string, DBUS_MENUMODEL_SHORTCUT_SUPER);
   343			else
   344				g_string_append(new_accel_string, string);
   345		}
   346		g_variant_unref(child);
   347		g_autofree char *str = g_string_free(new_accel_string, false);
   348		GVariant *new_accel  = g_variant_new_string(str);
   349		bool updated         = attr_update_checked(item, G_MENU_ATTRIBUTE_ACCEL, new_accel);
   350		if (!updated)
   351			g_variant_unref(new_accel);
   352		return updated;
   353	}
   354	
   355	G_GNUC_INTERNAL bool dbus_menu_item_update_props(DBusMenuItem *item, GVariant *props)
   356	{
   357		GVariantIter iter;
   358		const char *prop;
   359		GVariant *value;
   360		bool properties_is_updated = false;
   361	
   362		g_variant_iter_init(&iter, props);
   363		while (g_variant_iter_loop(&iter, "{&sv}", &prop, &value))
   364		{
   365			if (g_strcmp0(prop, "accessible-desc") == 0)
   366			{
   367				// TODO: Can we supported this property?
   368				// properties_is_updated = true;
   369			}
   370			else if (g_strcmp0(prop, "enabled") == 0)
   371			{
   372				bool enabled = g_variant_get_boolean(value);
   373				properties_is_updated =
   374				    dbus_menu_item_update_enabled(item, enabled) || properties_is_updated;
   375			}
   376	#if 0
   377			else if (g_strcmp0(prop, "icon-data") == 0)
   378			{
   379				// icon-name has more priority
   380	            if (!g_hash_table_lookup(item->attrs, G_MENU_ATTRIBUTE_ICON))
   381				{
   382					g_autoptr(GIcon) icon = g_icon_new_pixbuf_from_variant(value);
   383					GVariant *value       = g_icon_serialize(icon);
   384					properties_is_updated =
   385					    properties_is_updated ||
   386	                    attr_update_checked(item,
   387					                                       G_MENU_ATTRIBUTE_ICON,
   388					                                       value);
   389					properties_is_updated =
   390					    properties_is_updated ||
   391	                    attr_update_checked(item,
   392					                                       G_MENU_ATTRIBUTE_VERB_ICON,
   393					                                       value);
   394				}
   395			}
   396			else if (g_strcmp0(prop, "icon-name") == 0)
   397			{
   398				g_autoptr(GIcon) icon =
   399				    g_themed_icon_new(g_variant_get_string(value, NULL));
   400				GVariant *value             = g_icon_serialize(icon);
   401				g_autoptr(GVariant) boolvar = g_variant_new_boolean(true);
   402				properties_is_updated =
   403				    properties_is_updated ||
   404	                attr_update_checked(item, G_MENU_ATTRIBUTE_ICON, value);
   405				properties_is_updated =
   406				    properties_is_updated ||
   407	                attr_update_checked(item,
   408				                                       G_MENU_ATTRIBUTE_VERB_ICON,
   409				                                       value);
   410				properties_is_updated =
   411				    properties_is_updated ||
   412	                attr_update_checked(item, HAS_ICON_NAME, boolvar);
   413			}
   414	#endif
   415			else if (g_strcmp0(prop, "label") == 0)
   416			{
   417				properties_is_updated =
   418				    attr_update_checked(item, G_MENU_ATTRIBUTE_LABEL, value) ||
   419				    properties_is_updated;
   420			}
   421			else if (g_strcmp0(prop, "shortcut") == 0)
   422			{
   423				properties_is_updated =
   424				    dbus_menu_item_update_shortcut(item, value) || properties_is_updated;
   425			}
   426			else if (g_strcmp0(prop, "toggle-state") == 0)
   427			{
   428				item->toggled = g_variant_get_int32(value) > 0;
   429				act_props_try_update(item);
   430			}
   431			else if (g_strcmp0(prop, "visible") == 0)
   432			{
   433				bool vis = g_variant_get_boolean(value);
   434				if (item->action_type == DBUS_MENU_ACTION_SECTION)
   435				{
   436					item->toggled = !vis;
   437				}
   438				else if (vis)
   439				{
   440					g_autofree char *name =
   441					    dbus_menu_action_get_name(item->id, item->action_type, true);
   442					bool found =
   443					    g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_HIDDEN_WHEN);
   444					if (found)
   445					{
   446						g_hash_table_insert(item->attrs,
   447						                    g_strdup(G_MENU_ATTRIBUTE_ACTION),
   448						                    g_variant_new_string(name));
   449						properties_is_updated = true;
   450					}
   451				}
   452				else
   453				{
   454					bool found = g_hash_table_contains(item->attrs,
   455					                                   G_MENU_ATTRIBUTE_HIDDEN_WHEN);
   456					if (!found)
   457					{
   458						g_hash_table_insert(item->attrs,
   459						                    g_strdup(G_MENU_ATTRIBUTE_HIDDEN_WHEN),
   460						                    g_variant_new_string(
   461						                        G_MENU_HIDDEN_WHEN_ACTION_MISSING));
   462						g_hash_table_insert(item->attrs,
   463						                    g_strdup(G_MENU_ATTRIBUTE_ACTION),
   464						                    g_variant_new_string(
   465						                        DBUS_MENU_DISABLED_ACTION));
   466						properties_is_updated = true;
   467					}
   468				}
   469			}
   470			else
   471			{
   472				g_debug("updating unsupported property - '%s'", prop);
   473			}
   474		}
   475		return properties_is_updated;
   476	}
   477	
   478	G_GNUC_INTERNAL bool dbus_menu_item_remove_props(DBusMenuItem *item, GVariant *props)
   479	{
   480		GVariantIter iter;
   481		const char *prop;
   482		bool properties_is_updated = false;
   483	
   484		g_variant_iter_init(&iter, props);
   485		while (g_variant_iter_next(&iter, "&s", &prop))
   486		{
   487			if (g_strcmp0(prop, "accessible-desc") == 0)
   488			{
   489				// TODO: Can we support this property?
   490				// properties_is_updated = true;
   491			}
   492			else if (g_strcmp0(prop, "enabled") == 0)
   493			{
   494				bool enabled = true;
   495				dbus_menu_item_update_enabled(item, enabled);
   496			}
   497			else if (g_strcmp0(prop, "icon-name") == 0)
   498			{
   499				if (g_hash_table_lookup(item->attrs, HAS_ICON_NAME))
   500				{
   501					g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_ICON);
   502					g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_VERB_ICON);
   503					g_hash_table_remove(item->attrs, HAS_ICON_NAME);
   504					properties_is_updated = true;
   505				}
   506			}
   507			else if (g_strcmp0(prop, "icon-data") == 0)
   508			{
   509				if (!g_hash_table_lookup(item->attrs, HAS_ICON_NAME))
   510				{
   511					g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_ICON);
   512					g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_VERB_ICON);
   513					properties_is_updated = true;
   514				}
   515			}
   516			else if (g_strcmp0(prop, "label") == 0)
   517			{
   518				g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_LABEL);
   519				properties_is_updated = true;
   520			}
   521			else if (g_strcmp0(prop, "shortcut") == 0)
   522			{
   523				g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_ACCEL);
   524				properties_is_updated = true;
   525			}
   526			else if (g_strcmp0(prop, "visible") == 0)
   527			{
   528				g_autofree char *name =
   529				    dbus_menu_action_get_name(item->id, item->action_type, false);
   530				g_hash_table_remove(item->attrs, G_MENU_ATTRIBUTE_HIDDEN_WHEN);
   531				g_hash_table_insert(item->attrs,
   532				                    g_strdup(G_MENU_ATTRIBUTE_ACTION),
   533				                    g_variant_new_string(name));
   534				properties_is_updated = true;
   535			}
   536			else
   537			{
   538				g_debug("removing unsupported property - '%s'", prop);
   539			}
   540		}
   541		return properties_is_updated;
   542	}
   543	
   544	G_GNUC_INTERNAL int dbus_menu_item_compare_func(const DBusMenuItem *a, const DBusMenuItem *b,
   545	                                                gpointer user_data)
   546	{
   547		return b->id - a->id;
   548	}
   549	
   550	G_GNUC_INTERNAL int dbus_menu_item_id_compare_func(const DBusMenuItem *a, gconstpointer b,
   551	                                                   gpointer user_data)
   552	{
   553		return GPOINTER_TO_UINT(b) - a->id;
   554	}
   555	
   556	G_GNUC_INTERNAL bool dbus_menu_item_compare_immutable(DBusMenuItem *a, DBusMenuItem *b)
   557	{
   558		if (a->id != b->id)
   559			return false;
   560		if (a->ref_action_group != b->ref_action_group)
   561			return false;
   562		if (a->action_type != b->action_type)
   563			return false;
   564		return true;
   565	}
   566	
   567	static bool dbus_menu_item_is_submenu(DBusMenuItem *item)
   568	{
   569		if (!item)
   570			return false;
   571		if (item->action_type != DBUS_MENU_ACTION_SUBMENU)
   572			return false;
   573		return true;
   574	}
   575	
   576	G_GNUC_INTERNAL bool dbus_menu_item_copy_submenu(DBusMenuItem *src, DBusMenuItem *dst,
   577	                                                 DBusMenuModel *parent)
   578	{
   579		DBusMenuXml *xml;
   580		DBusMenuModel *submenu = NULL;
   581		g_object_get(parent, "xml", &xml, NULL);
   582		if (!dbus_menu_item_is_submenu(src))
   583		{
   584			if (dst->action_type == DBUS_MENU_ACTION_SUBMENU)
   585			{
   586				if (dst->toggled)
   587					dst->enabled = true;
   588				submenu = dbus_menu_model_new(dst->id, parent, xml, dst->ref_action_group);
   589				g_hash_table_insert(dst->links, submenu_str(dst->enabled), submenu);
   590				return true;
   591			}
   592			return false;
   593		}
   594		if (dst->action_type == DBUS_MENU_ACTION_SUBMENU &&
   595		    src->action_type == DBUS_MENU_ACTION_SUBMENU)
   596		{
   597			if (src->toggled || dst->toggled)
   598				dst->enabled = dst->toggled = true;
   599			submenu =
   600			    DBUS_MENU_MODEL(g_hash_table_lookup(src->links, submenu_str(src->enabled)));
   601			g_hash_table_insert(dst->links, submenu_str(dst->enabled), g_object_ref(submenu));
   602			g_object_set(submenu, "parent-id", dst->id, NULL);
   603			return true;
   604		}
   605		return false;
   606	}
   607	
   608	G_GNUC_INTERNAL void dbus_menu_item_generate_action(DBusMenuItem *item, DBusMenuModel *parent)
   609	{
   610		if (item->action_type == DBUS_MENU_ACTION_SECTION)
   611			return;
   612		if(!item->ref_action_group)
   613			return;
   614		DBusMenuXml *xml;
   615		DBusMenuModel *submenu = g_hash_table_lookup(item->links, submenu_str(item->enabled));
   616		g_object_get(parent, "xml", &xml, NULL);
   617		item->ref_action = dbus_menu_action_reference(item->id,
   618		                                              xml,
   619		                                              submenu,
   620		                                              G_ACTION_MAP(item->ref_action_group),
   621		                                              item->action_type);
   622		act_props_try_update(item);
   623	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/item.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef ITEM_H
    20	#define ITEM_H
    21	
    22	#include <gio/gio.h>
    23	#include <stdbool.h>
    24	
    25	#include "definitions.h"
    26	#include "model.h"
    27	
    28	G_BEGIN_DECLS
    29	
    30	typedef struct
    31	{
    32		int section_num;
    33		int place;
    34		u_int32_t id;
    35		GActionGroup *ref_action_group;
    36		// FIXME: Cannot have activatable submenu item.
    37		GAction *ref_action;
    38		GHashTable *attrs;
    39		GHashTable *links;
    40		DBusMenuActionType action_type;
    41		bool enabled;
    42		bool toggled;
    43		gpointer magic;
    44	} DBusMenuItem;
    45	
    46	G_GNUC_INTERNAL DBusMenuItem *dbus_menu_item_new(u_int32_t id, DBusMenuModel *parent_model,
    47	                                                 GVariant *props);
    48	G_GNUC_INTERNAL DBusMenuItem *dbus_menu_item_new_first_section(u_int32_t id,
    49	                                                               GActionGroup *action_group);
    50	
    51	G_GNUC_INTERNAL void dbus_menu_item_free(gpointer data);
    52	
    53	G_GNUC_INTERNAL bool dbus_menu_item_update_enabled(DBusMenuItem *item, bool enabled);
    54	
    55	G_GNUC_INTERNAL bool dbus_menu_item_update_props(DBusMenuItem *item, GVariant *props);
    56	
    57	G_GNUC_INTERNAL bool dbus_menu_item_remove_props(DBusMenuItem *item, GVariant *props);
    58	
    59	G_GNUC_INTERNAL bool dbus_menu_item_compare_immutable(DBusMenuItem *a, DBusMenuItem *b);
    60	
    61	G_GNUC_INTERNAL bool dbus_menu_item_copy_attributes(DBusMenuItem *src, DBusMenuItem *dst);
    62	
    63	G_GNUC_INTERNAL bool dbus_menu_item_is_firefox_stub(DBusMenuItem *item);
    64	
    65	G_GNUC_INTERNAL bool dbus_menu_item_copy_submenu(DBusMenuItem *src, DBusMenuItem *dst,
    66	                                                 DBusMenuModel *parent);
    67	
    68	G_GNUC_INTERNAL void dbus_menu_item_generate_action(DBusMenuItem *item, DBusMenuModel *parent);
    69	
    70	G_GNUC_INTERNAL void dbus_menu_item_preload(DBusMenuItem *item);
    71	
    72	G_GNUC_INTERNAL int dbus_menu_item_id_compare_func(const DBusMenuItem *a, gconstpointer b,
    73	                                                   gpointer user_data);
    74	
    75	G_GNUC_INTERNAL int dbus_menu_item_compare_func(const DBusMenuItem *a, const DBusMenuItem *b,
    76	                                                gpointer user_data);
    77	
    78	G_END_DECLS
    79	
    80	#endif // ITEM_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/item-pixbuf.c
--------------------------------------------------------------------------------
     1	#include <gdk-pixbuf/gdk-pixbuf.h>
     2	#include <gio/gio.h>
     3	
     4	G_GNUC_INTERNAL GIcon *g_icon_new_pixbuf_from_variant(GVariant *variant)
     5	{
     6		gsize length;
     7		const unsigned char *data =
     8		    (const unsigned char *)g_variant_get_fixed_array(variant, &length, sizeof(guchar));
     9		if (length == 0)
    10			return NULL;
    11	
    12		g_autoptr(GInputStream) stream = g_memory_input_stream_new_from_data(data, length, NULL);
    13		if (stream == NULL)
    14			return NULL;
    15	
    16		g_autoptr(GError) error = NULL;
    17		GdkPixbuf *pixbuf       = gdk_pixbuf_new_from_stream(stream, NULL, &error);
    18		if (error != NULL)
    19			g_warning("Unable to build GdkPixbuf from icon data: %s", error->message);
    20	
    21		return G_ICON(pixbuf);
    22	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/meson.build
--------------------------------------------------------------------------------
     1	project(
     2	  'appmenu-glib-translator',
     3	  'c',
     4	version : '25.04',
     5	meson_version : '>=0.61.0',
     6	license : 'LGPL-3.0-or-later',
     7	default_options : ['c_std=gnu11', 'buildtype=debugoptimized', 'warning_level=1']
     8	)
     9	
    10	gnome = import('gnome')
    11	pkgconfig = import('pkgconfig')
    12	
    13	glib_ver = '>=2.52.0'
    14	giounix = dependency('gio-unix-2.0', version: glib_ver)
    15	gdkpixbuf = dependency('gdk-pixbuf-2.0', required: false)
    16	
    17	imp_sources = files(
    18	    'definitions.h',
    19	    'debug.c',
    20	    'debug.h',
    21	    'item.c',
    22	    'item.h',
    23	    'importer.c',
    24	    'importer.h',
    25	    'model.h',
    26	    'model.c',
    27	    'section.c',
    28	    'section.h',
    29	    'utils.c',
    30	    'utils.h'
    31	    )
    32	imp_headers = files('definitions.h')
    33	enum = 'importer-enums'
    34	importer_enums_gen = gnome.mkenums(
    35	  enum,
    36	  sources: imp_headers,
    37	  c_template: enum + '.c.template',
    38	  h_template: enum + '.h.template',
    39	)
    40	imp_dbus = gnome.gdbus_codegen(
    41	    'dbusmenu-interface',
    42	    sources: 'com.canonical.dbusmenu.xml',
    43	    interface_prefix: 'com.canonical',
    44	    autocleanup: 'all',
    45	    namespace: 'DBusMenu'
    46	)
    47	
    48	importer_name = 'appmenu-glib-translator'
    49	
    50	importer_lib = library(importer_name, imp_sources, importer_enums_gen, imp_dbus,
    51	    dependencies: [giounix, gdkpixbuf],
    52	    version: meson.project_version(),
    53	    install: true,
    54	    soversion: 0,
    55	    pic : true
    56	)
    57	importer_inc = include_directories('.')
    58	imp_public = ['importer.h']
    59	install_headers(imp_public, subdir : importer_name)
    60	
    61	pkgconfig.generate(importer_lib,
    62	             name: importer_name,
    63	             description: 'A translator from DBusMenu to GMenuModel',
    64	             requires: [giounix, gdkpixbuf],
    65	             extra_cflags: ['-I${includedir}/'+importer_name]
    66	            )
    67	
    68	importer_gir = gnome.generate_gir(importer_lib,
    69	                    sources: imp_public,
    70	                    includes: ['GObject-2.0', 'Gio-2.0'],
    71	                    header: imp_public,
    72	                    namespace: 'AppmenuGLibTranslator',
    73	                    identifier_prefix: 'DBusMenu',
    74	                    symbol_prefix: 'dbus_menu',
    75	                    nsversion: meson.project_version(),
    76	                    install: true
    77	)
    78	
    79	importer_vapi = gnome.generate_vapi(importer_name,
    80	    sources: importer_gir[0],
    81	    packages: 'gio-2.0',
    82	    install: true,
    83	)
    84	
    85	importer_dep = declare_dependency(
    86	        include_directories: importer_inc,
    87	        dependencies: [importer_vapi, giounix, gdkpixbuf],
    88	        link_with: importer_lib
    89	)
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/model.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include <inttypes.h>
    20	
    21	#include "debug.h"
    22	#include "definitions.h"
    23	#include "item.h"
    24	#include "model.h"
    25	#include "section.h"
    26	
    27	struct _DBusMenuModel
    28	{
    29		GMenuModel parent_instance;
    30	
    31		uint parent_id;
    32		uint current_revision;
    33		GCancellable *cancellable;
    34		DBusMenuXml *xml;
    35		GActionGroup *received_action_group;
    36		GSequence *items;
    37		GVariant *current_layout;
    38		bool layout_update_required;
    39		uint parse_pending;
    40	};
    41	
    42	static const char *property_names[] = { "accessible-desc",
    43		                                "children-display",
    44		                                "disposition",
    45		                                "enabled",
    46		                                "icon-data",
    47		                                "icon-name",
    48		                                "label",
    49		                                "shortcut",
    50		                                "toggle-type",
    51		                                "toggle-state",
    52		                                "type",
    53		                                "visible",
    54		                                NULL };
    55	enum
    56	{
    57		PROP_NULL         = 0,
    58		PROP_XML          = 1,
    59		PROP_ACTION_GROUP = 2,
    60		PROP_PARENT_ID    = 3,
    61		NUM_PROPS
    62	};
    63	
    64	static GParamSpec *properties[NUM_PROPS] = { NULL };
    65	
    66	static DBusMenuItem *dbus_menu_model_find(DBusMenuModel *menu, uint item_id);
    67	static DBusMenuItem *dbus_menu_model_find_section(DBusMenuModel *menu, uint section_num);
    68	static GSequenceIter *dbus_menu_model_find_place(DBusMenuModel *menu, uint section_num, int place);
    69	
    70	G_DEFINE_TYPE(DBusMenuModel, dbus_menu_model, G_TYPE_MENU_MODEL)
    71	
    72	static gint dbus_menu_model_get_n_items(GMenuModel *model)
    73	{
    74		DBusMenuModel *menu      = (DBusMenuModel *)(model);
    75		GSequenceIter *last_iter = g_sequence_iter_prev(g_sequence_get_end_iter(menu->items));
    76		DBusMenuItem *last       = g_sequence_get(last_iter);
    77		return last->section_num + 1;
    78	}
    79	
    80	static void dbus_menu_model_get_item_attributes(GMenuModel *model, gint position,
    81	                                                GHashTable **table)
    82	{
    83		DBusMenuModel *menu = DBUS_MENU_MODEL(model);
    84		for (GSequenceIter *iter = g_sequence_get_begin_iter(menu->items);
    85		     !g_sequence_iter_is_end(iter);
    86		     iter = g_sequence_iter_next(iter))
    87		{
    88			DBusMenuItem *item = (DBusMenuItem *)g_sequence_get(iter);
    89			if (item->section_num == position && item->place == -1)
    90			{
    91				*table = g_hash_table_ref(item->attrs);
    92				return;
    93			}
    94		}
    95	}
    96	
    97	static void dbus_menu_model_get_item_links(GMenuModel *model, gint position, GHashTable **table)
    98	{
    99		DBusMenuModel *menu = DBUS_MENU_MODEL(model);
   100		for (GSequenceIter *iter = g_sequence_get_begin_iter(menu->items);
   101		     !g_sequence_iter_is_end(iter);
   102		     iter = g_sequence_iter_next(iter))
   103		{
   104			DBusMenuItem *item = (DBusMenuItem *)g_sequence_get(iter);
   105			if (item->section_num == position && item->place == -1)
   106			{
   107				*table = g_hash_table_ref(item->links);
   108				return;
   109			}
   110		}
   111	}
   112	
   113	static int dbus_menu_model_is_mutable(GMenuModel *model)
   114	{
   115		return true;
   116	}
   117	
   118	struct layout_data
   119	{
   120		GMenuModel *model;
   121		int section_num;
   122		uint pos;
   123		uint old_num;
   124		uint new_num;
   125	};
   126	
   127	GSequence *dbus_menu_model_items(DBusMenuModel *model)
   128	{
   129		return model->items;
   130	}
   131	
   132	int queue_compare_func(const struct layout_data *a, const struct layout_data *b)
   133	{
   134		if (a->model != b->model)
   135			return DBUS_MENU_IS_MODEL(a->model) ? -1 : 1;
   136		else if (a->old_num != b->old_num)
   137			return b->old_num - a->old_num;
   138		else if (a->new_num != b->new_num)
   139			return b->new_num - a->new_num;
   140		else if (a->pos != b->pos)
   141			return b->pos - a->pos;
   142		return 0;
   143	}
   144	
   145	static int dbus_menu_model_sort_func(gconstpointer a, gconstpointer b,
   146	                                     G_GNUC_UNUSED void *user_data)
   147	{
   148		DBusMenuItem *aitem = (DBusMenuItem *)a;
   149		DBusMenuItem *bitem = (DBusMenuItem *)b;
   150	
   151		if (bitem->section_num != aitem->section_num)
   152			return aitem->section_num - bitem->section_num;
   153	
   154		return aitem->place - bitem->place;
   155	}
   156	
   157	static void add_signal_to_queue(DBusMenuModel *model, GQueue *queue, int sect_num, int pos,
   158	                                int removed, int added)
   159	{
   160		struct layout_data *data = g_new0(struct layout_data, 1);
   161		if (sect_num >= 0)
   162		{
   163			DBusMenuItem *item = dbus_menu_model_find_section(model, sect_num);
   164			data->model = G_MENU_MODEL(g_hash_table_lookup(item->links, G_MENU_LINK_SECTION));
   165		}
   166		else
   167		{
   168			data->model = G_MENU_MODEL(model);
   169		}
   170		data->section_num = sect_num;
   171		data->pos         = pos;
   172		data->old_num     = removed;
   173		data->new_num     = added;
   174		gpointer l        = g_queue_find_custom(queue, data, (GCompareFunc)queue_compare_func);
   175		if (!l)
   176			g_queue_push_head(queue, data);
   177	}
   178	
   179	static bool queue_emit_now(struct layout_data *index)
   180	{
   181		if (!G_IS_MENU_MODEL(index->model))
   182			return G_SOURCE_REMOVE;
   183	
   184		g_menu_model_items_changed(index->model, index->pos, index->old_num, index->new_num);
   185		return G_SOURCE_REMOVE;
   186	}
   187	
   188	static void queue_emit_all(GQueue *queue)
   189	{
   190		struct layout_data *index = NULL;
   191		while ((index = (struct layout_data *)g_queue_pop_head(queue)))
   192			g_idle_add_full(G_PRIORITY_DEFAULT_IDLE, G_SOURCE_FUNC(queue_emit_now), index, g_free);
   193	}
   194	
   195	static bool preload_idle(DBusMenuItem *item)
   196	{
   197		dbus_menu_item_preload(item);
   198		return G_SOURCE_REMOVE;
   199	}
   200	
   201	static void menu_item_copy_and_load(DBusMenuModel *menu, DBusMenuItem *old, DBusMenuItem *new_item)
   202	{
   203		bool new_submenu = dbus_menu_item_copy_submenu(old, new_item, menu);
   204		dbus_menu_item_generate_action(new_item, menu);
   205		/* It is a preload hack. If this is a toplevel menu, we need to fetch menu under toplevel to
   206		 * avoid menu jumping bug. Now we need to use it for all menus - no menus are preloaded,
   207		 * AFAIK. But always enabled make sense only for submenus.
   208		 */
   209		dbus_menu_item_update_enabled(new_item, new_submenu || new_item->enabled);
   210		new_item->toggled = true;
   211		g_timeout_add_full(100, 300, (GSourceFunc)preload_idle, new_item, NULL);
   212	}
   213	
   214	// We deal only with layouts with depth 1 (not all)
   215	static void layout_parse(DBusMenuModel *menu, GVariant *layout)
   216	{
   217		guint id;
   218		GVariant *props;
   219		GVariant *items;
   220		if (!g_variant_is_of_type(layout, G_VARIANT_TYPE("(ia{sv}av)")))
   221		{
   222			g_warning(
   223			    "Type of return value for 'layout' property in "
   224			    "'GetLayout' call should be '(ia{sv}av)' but got '%s'",
   225			    g_variant_get_type_string(layout));
   226	
   227			return;
   228		}
   229		//We really should not run if we are not a menu
   230		if(!DBUS_MENU_IS_MODEL(menu))
   231			return;
   232		g_variant_get(layout, "(i@a{sv}@av)", &id, &props, &items);
   233		g_variant_unref(props);
   234		GVariantIter iter;
   235		GVariant *child;
   236		// Start parsing. We need to track section number, and also GSequenceIter to
   237		// current section. Also we track change position, number of added and removed
   238		// items for current section
   239		uint section_num            = 0;
   240		uint place                  = 0;
   241		uint old_sections           = g_menu_model_get_n_items(G_MENU_MODEL(menu));
   242		uint added                  = 0;
   243		int change_pos              = -1;
   244		GSequenceIter *current_iter = g_sequence_get_begin_iter(menu->items);
   245		g_variant_iter_init(&iter, items);
   246		while ((child = g_variant_iter_next_value(&iter)))
   247		{
   248			GVariant *value = g_variant_get_variant(child);
   249			guint cid;
   250			GVariant *cprops;
   251			GVariant *citems;
   252			g_variant_get(value, "(i@a{sv}@av)", &cid, &cprops, &citems);
   253			g_variant_unref(citems);
   254	
   255			DBusMenuItem *old      = NULL;
   256			DBusMenuItem *new_item = dbus_menu_item_new(cid, menu, cprops);
   257			// We receive a section (separator or x-kde-title)
   258			if (new_item->action_type == DBUS_MENU_ACTION_SECTION)
   259			{
   260				bool is_valid_section = !new_item->toggled && place > 0;
   261				// Section is valid, so, parse it
   262				if (is_valid_section)
   263				{
   264					// Do some common tasks: increment section_num and iter
   265					++section_num;
   266					place--;
   267					new_item->section_num = section_num;
   268					new_item->place       = -1;
   269					GSequenceIter *old_iter =
   270					    g_sequence_lookup(menu->items,
   271					                      new_item,
   272					                      dbus_menu_model_sort_func,
   273					                      NULL);
   274					if (!old_iter)
   275					{
   276						g_hash_table_insert(
   277						    new_item->links,
   278						    G_MENU_LINK_SECTION,
   279						    dbus_menu_section_model_new(menu, section_num));
   280						old_iter =
   281						    g_sequence_insert_sorted(menu->items,
   282						                             new_item,
   283						                             dbus_menu_model_sort_func,
   284						                             NULL);
   285					}
   286					else
   287						dbus_menu_item_free(new_item);
   288					old =
   289					    (DBusMenuItem *)g_sequence_get(g_sequence_iter_prev(old_iter));
   290					int delta                 = old->place - place;
   291					GSequenceIter *place_iter = g_sequence_iter_move(old_iter, -delta);
   292					// Cleanup all items in prev section (if there is more items than
   293					// current)
   294					if (delta > 0)
   295						g_sequence_remove_range(place_iter, old_iter);
   296					// Section signal will do it for us, do not send additional one
   297					// Update current_section and reset current_iter and added to new
   298					// section
   299					current_iter = g_sequence_iter_next(old_iter);
   300					added        = 0;
   301					change_pos   = -1;
   302					place        = 0;
   303				}
   304				// If section was invalid, just free received item.
   305				else
   306					dbus_menu_item_free(new_item);
   307			}
   308			else if (!dbus_menu_item_is_firefox_stub(new_item))
   309			{
   310				new_item->section_num   = section_num;
   311				new_item->place         = place;
   312				GSequenceIter *old_iter = g_sequence_lookup(menu->items,
   313				                                            new_item,
   314				                                            dbus_menu_model_sort_func,
   315				                                            NULL);
   316				// There is no old item on this place
   317				if (!old_iter)
   318				{
   319					if (!added)
   320						change_pos = change_pos < 0 ? place : change_pos;
   321					menu_item_copy_and_load(menu, NULL, new_item);
   322					current_iter = g_sequence_insert_sorted(menu->items,
   323					                                        new_item,
   324					                                        dbus_menu_model_sort_func,
   325					                                        NULL);
   326					added++;
   327				}
   328				// If there is an old item exists, we need to check this properties
   329				else
   330				{
   331					old = (DBusMenuItem *)g_sequence_get(old_iter);
   332					// We should compare properties of old and new item
   333					bool diff    = !dbus_menu_item_compare_immutable(old, new_item);
   334					dbus_menu_item_update_props(old, cprops);
   335					if (diff)
   336					{
   337						// Immutable properties was different, replace menu item
   338						menu_item_copy_and_load(menu, old, new_item);
   339						g_sequence_remove(old_iter);
   340						current_iter =
   341						    g_sequence_insert_sorted(menu->items,
   342						                             new_item,
   343						                             dbus_menu_model_sort_func,
   344						                             NULL);
   345					}
   346					else
   347					{
   348						// Just free unneeded item
   349						dbus_menu_item_free(new_item);
   350					}
   351				}
   352				current_iter = g_sequence_iter_next(current_iter);
   353				place++;
   354			}
   355			else
   356				// Just free unnedeed item
   357				dbus_menu_item_free(new_item);
   358			g_variant_unref(cprops);
   359			g_variant_unref(value);
   360			g_variant_unref(child);
   361		}
   362		section_num++;
   363		int secdiff = old_sections - section_num;
   364		if (secdiff > 0)
   365		{
   366			GSequenceIter *section_iter = dbus_menu_model_find_place(menu, section_num, -1);
   367			g_sequence_remove_range(section_iter, g_sequence_get_end_iter(menu->items));
   368		}
   369		// We need to manage last section's changes. And check its validity
   370		if (secdiff >= 0)
   371		{
   372			place--;
   373			DBusMenuItem *old = (DBusMenuItem *)g_sequence_get(
   374			    g_sequence_iter_prev(g_sequence_get_end_iter(menu->items)));
   375			int delta                 = old->place - place;
   376			GSequenceIter *last_iter  = g_sequence_get_end_iter(menu->items);
   377			GSequenceIter *place_iter = g_sequence_iter_move(last_iter, -delta);
   378	
   379			// Cleanup all items in prev section (if there is more items than
   380			// current)
   381			if (delta > 0)
   382				g_sequence_remove_range(place_iter, last_iter);
   383		}
   384		g_variant_unref(items);
   385		// Update all layout
   386		g_menu_model_items_changed(G_MENU_MODEL(menu), 0, old_sections, section_num);
   387	}
   388	
   389	static bool get_layout_idle(DBusMenuModel *self)
   390	{
   391		g_return_val_if_fail(DBUS_MENU_IS_MODEL(self), G_SOURCE_REMOVE);
   392		layout_parse(self, self->current_layout);
   393		self->parse_pending = 0;
   394		return G_SOURCE_REMOVE;
   395	}
   396	
   397	static void get_layout_cb(GObject *source_object, GAsyncResult *res, gpointer user_data)
   398	{
   399		guint revision;
   400		if (!DBUS_MENU_IS_MODEL(user_data))
   401			return;
   402		DBusMenuModel *menu     = DBUS_MENU_MODEL(user_data);
   403		g_autoptr(GError) error = NULL;
   404		g_clear_pointer(&menu->current_layout, g_variant_unref);
   405		dbus_menu_xml_call_get_layout_finish((DBusMenuXml *)(source_object),
   406		                                     &revision,
   407		                                     &menu->current_layout,
   408		                                     res,
   409		                                     &error);
   410		if (error != NULL)
   411		{
   412			if (!g_error_matches(error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
   413				g_warning("%s", error->message);
   414			g_object_unref(menu);
   415			return;
   416		}
   417		menu->layout_update_required = false;
   418		if (!menu->parse_pending)
   419			menu->parse_pending = g_timeout_add_full(G_PRIORITY_HIGH,
   420			                                         100,
   421			                                         (GSourceFunc)get_layout_idle,
   422			                                         g_object_ref(menu),
   423			                                         g_object_unref);
   424		g_object_unref(menu);
   425	}
   426	
   427	static void dbus_menu_update_item_properties_from_layout_sync(DBusMenuModel *menu,
   428	                                                              DBusMenuItem *item, int sect_n,
   429	                                                              int pos)
   430	{
   431		g_return_if_fail(DBUS_MENU_IS_MODEL(menu));
   432	
   433		if (menu->parse_pending)
   434		{
   435			dbus_menu_model_update_layout(menu);
   436			return;
   437		}
   438		g_autoptr(GVariant) props      = NULL;
   439		g_autoptr(GVariant) items      = NULL;
   440		g_autoptr(GVariant) layout     = NULL;
   441		g_autoptr(GError) error        = NULL;
   442		g_autoptr(GQueue) signal_queue = g_queue_new();
   443		guint id, revision;
   444		dbus_menu_xml_call_get_layout_sync(menu->xml,
   445		                                   item->id,
   446		                                   0,
   447		                                   property_names,
   448		                                   &revision,
   449		                                   &layout,
   450		                                   menu->cancellable,
   451		                                   &error);
   452		if (error != NULL)
   453		{
   454			if (!g_error_matches(error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
   455				g_warning("%s", error->message);
   456			return;
   457		}
   458		g_variant_get(layout, "(i@a{sv}@av)", &id, &props, &items);
   459		bool is_item_updated = dbus_menu_item_update_props(item, props);
   460		if (is_item_updated)
   461			add_signal_to_queue(menu, signal_queue, sect_n, pos, 1, 1);
   462		queue_emit_all(signal_queue);
   463	}
   464	
   465	G_GNUC_INTERNAL void dbus_menu_model_update_layout(DBusMenuModel *menu)
   466	{
   467		g_return_if_fail(DBUS_MENU_IS_MODEL(menu));
   468		dbus_menu_xml_call_get_layout(menu->xml,
   469		                              menu->parent_id,
   470		                              1,
   471		                              property_names,
   472		                              menu->cancellable,
   473		                              get_layout_cb,
   474		                              g_object_ref(menu));
   475	}
   476	
   477	static void layout_updated_cb(DBusMenuXml *proxy, guint revision, gint parent, DBusMenuModel *menu)
   478	{
   479		if (!DBUS_MENU_IS_XML(proxy))
   480			return;
   481		if (((uint)parent == menu->parent_id) && menu->current_revision < revision)
   482		{
   483			g_debug("Remote attempt to update %u with rev %u\n", parent, revision);
   484			dbus_menu_model_update_layout(menu);
   485			menu->current_revision = revision;
   486			return;
   487		}
   488		DBusMenuItem *item = dbus_menu_model_find(menu, (uint)parent);
   489		if (item != NULL)
   490			dbus_menu_update_item_properties_from_layout_sync(menu,
   491			                                                  item,
   492			                                                  item->section_num,
   493			                                                  item->place);
   494	}
   495	
   496	static void item_activation_requested_cb(DBusMenuXml *proxy, gint id, guint timestamp,
   497	                                         DBusMenuModel *menu)
   498	{
   499		if (!DBUS_MENU_IS_XML(proxy))
   500			return;
   501		g_autofree char *ordinary_name = g_strdup_printf(ACTION_PREFIX "%u", id);
   502		g_action_group_activate_action(menu->received_action_group, ordinary_name, NULL);
   503		g_debug("activation requested: id - %d, timestamp - %d", id, timestamp);
   504	}
   505	
   506	static void items_properties_loop(DBusMenuModel *menu, GVariant *up_props, GQueue *signal_queue,
   507	                                  bool is_removal)
   508	{
   509		GVariantIter iter;
   510		guint id;
   511		GVariant *props;
   512		g_variant_iter_init(&iter, up_props);
   513		while (g_variant_iter_loop(&iter, !is_removal ? "(i@a{sv})" : "(i@as)", &id, &props))
   514		{
   515			DBusMenuItem *item   = (DBusMenuItem *)dbus_menu_model_find(menu, id);
   516			bool is_item_updated = false;
   517			if (item != NULL)
   518			{
   519				// It is the best what we can do to update a section
   520				if (item->action_type == DBUS_MENU_ACTION_SECTION)
   521				{
   522					//                            dbus_menu_model_update_layout(menu);
   523				}
   524				else
   525				{
   526					is_item_updated = !is_removal
   527					                      ? dbus_menu_item_update_props(item, props)
   528					                      : dbus_menu_item_remove_props(item, props);
   529					if (is_item_updated)
   530						add_signal_to_queue(menu,
   531						                    signal_queue,
   532						                    item->section_num,
   533						                    item->place,
   534						                    1,
   535						                    1);
   536				}
   537			}
   538		}
   539	}
   540	
   541	static void items_properties_updated_cb(DBusMenuXml *proxy, GVariant *updated_props,
   542	                                        GVariant *removed_props, DBusMenuModel *menu)
   543	{
   544		if (!DBUS_MENU_IS_XML(proxy))
   545			return;
   546		if (menu->parse_pending)
   547			return;
   548		g_autoptr(GQueue) signal_queue = g_queue_new();
   549		items_properties_loop(menu, updated_props, signal_queue, false);
   550		items_properties_loop(menu, removed_props, signal_queue, true);
   551		queue_emit_all(signal_queue);
   552	}
   553	
   554	static void on_xml_property_changed(DBusMenuModel *model)
   555	{
   556		if (!DBUS_MENU_IS_XML(model->xml))
   557			return;
   558		g_object_ref(model->xml);
   559		g_signal_connect(model->xml,
   560		                 "items-properties-updated",
   561		                 G_CALLBACK(items_properties_updated_cb),
   562		                 model);
   563		g_signal_connect(model->xml, "layout-updated", G_CALLBACK(layout_updated_cb), model);
   564		g_signal_connect(model->xml,
   565		                 "item-activation-requested",
   566		                 G_CALLBACK(item_activation_requested_cb),
   567		                 model);
   568		if (model->parent_id == 0)
   569			dbus_menu_model_update_layout(model);
   570	}
   571	
   572	G_GNUC_INTERNAL DBusMenuModel *dbus_menu_model_new(uint parent_id, DBusMenuModel *parent,
   573	                                                   DBusMenuXml *xml, GActionGroup *action_group)
   574	{
   575		DBusMenuModel *ret = (DBusMenuModel *)g_object_new(dbus_menu_model_get_type(),
   576		                                                   "parent-id",
   577		                                                   parent_id,
   578		                                                   "xml",
   579		                                                   xml,
   580		                                                   "action-group",
   581		                                                   action_group,
   582		                                                   NULL);
   583		if (parent != NULL)
   584			g_object_bind_property(parent, "xml", ret, "xml", G_BINDING_SYNC_CREATE);
   585		return ret;
   586	}
   587	
   588	static void dbus_menu_model_set_property(GObject *object, guint property_id, const GValue *value,
   589	                                         GParamSpec *pspec)
   590	{
   591		DBusMenuModel *menu = (DBusMenuModel *)(object);
   592		void *old_xml       = menu->xml;
   593	
   594		switch (property_id)
   595		{
   596		case PROP_XML:
   597			menu->xml = DBUS_MENU_XML(g_value_get_object(value));
   598			if (menu->xml != NULL && old_xml != menu->xml)
   599			{
   600				if (old_xml != NULL)
   601					g_signal_handlers_disconnect_by_data(old_xml, menu);
   602				on_xml_property_changed(menu);
   603				g_clear_object(&old_xml);
   604			}
   605			break;
   606		case PROP_ACTION_GROUP:
   607			g_clear_object(&menu->received_action_group);
   608			menu->received_action_group = g_object_ref(G_ACTION_GROUP(g_value_get_object(value)));
   609			break;
   610		case PROP_PARENT_ID:
   611			menu->layout_update_required = true;
   612			menu->parent_id              = g_value_get_uint(value);
   613			break;
   614		default:
   615			G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec);
   616			break;
   617		}
   618	}
   619	
   620	static void dbus_menu_model_get_property(GObject *object, guint property_id, GValue *value,
   621	                                         GParamSpec *pspec)
   622	{
   623		DBusMenuModel *menu;
   624	
   625		menu = (DBusMenuModel *)(object);
   626	
   627		switch (property_id)
   628		{
   629		case PROP_XML:
   630			g_value_set_object(value, menu->xml);
   631			break;
   632		case PROP_PARENT_ID:
   633			g_value_set_uint(value, menu->parent_id);
   634			break;
   635		case PROP_ACTION_GROUP:
   636			g_value_set_object(value, menu->received_action_group);
   637			break;
   638		default:
   639			G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec);
   640			break;
   641		}
   642	}
   643	
   644	G_GNUC_INTERNAL bool dbus_menu_model_is_layout_update_required(DBusMenuModel *model)
   645	{
   646		return model->layout_update_required;
   647	}
   648	
   649	static DBusMenuItem *dbus_menu_model_find(DBusMenuModel *menu, uint item_id)
   650	{
   651		for (GSequenceIter *iter = g_sequence_get_begin_iter(menu->items);
   652		     !g_sequence_iter_is_end(iter);
   653		     iter = g_sequence_iter_next(iter))
   654		{
   655			DBusMenuItem *item = (DBusMenuItem *)g_sequence_get(iter);
   656			if (item->id == item_id)
   657				return item;
   658		}
   659		return NULL;
   660	}
   661	
   662	static GSequenceIter *dbus_menu_model_find_place(DBusMenuModel *menu, uint section_num, int place)
   663	{
   664		for (GSequenceIter *iter = g_sequence_get_begin_iter(menu->items);
   665		     !g_sequence_iter_is_end(iter);
   666		     iter = g_sequence_iter_next(iter))
   667		{
   668			DBusMenuItem *item = (DBusMenuItem *)g_sequence_get(iter);
   669			if (item->section_num == section_num && item->place == place)
   670				return iter;
   671		}
   672		return NULL;
   673	}
   674	
   675	static DBusMenuItem *dbus_menu_model_find_section(DBusMenuModel *menu, uint section_num)
   676	{
   677		return (DBusMenuItem *)g_sequence_get(dbus_menu_model_find_place(menu, section_num, -1));
   678	}
   679	
   680	static void dbus_menu_model_init(DBusMenuModel *menu)
   681	{
   682		menu->cancellable            = g_cancellable_new();
   683		menu->parent_id              = UINT_MAX;
   684		menu->items                  = g_sequence_new(dbus_menu_item_free);
   685		menu->layout_update_required = true;
   686		menu->parse_pending          = 0;
   687		menu->current_revision       = 0;
   688	}
   689	
   690	static void dbus_menu_model_constructed(GObject *object)
   691	{
   692		G_OBJECT_CLASS(dbus_menu_model_parent_class)->constructed(object);
   693		DBusMenuModel *menu = DBUS_MENU_MODEL(object);
   694	
   695		DBusMenuItem *first_section =
   696		    dbus_menu_item_new_first_section(menu->parent_id, menu->received_action_group);
   697		first_section->section_num = 0;
   698		first_section->place       = -1;
   699		g_hash_table_insert(first_section->links,
   700		                    G_MENU_LINK_SECTION,
   701		                    dbus_menu_section_model_new(menu, 0));
   702		g_sequence_insert_sorted(menu->items, first_section, dbus_menu_model_sort_func, NULL);
   703	}
   704	
   705	static void dbus_menu_model_finalize(GObject *object)
   706	{
   707		DBusMenuModel *menu = DBUS_MENU_MODEL(object);
   708		if (G_IS_OBJECT(menu->xml)) {
   709			g_signal_handlers_disconnect_by_data(menu->xml, menu);
   710			g_clear_object(&menu->xml);
   711		}
   712		g_source_remove_by_user_data(menu);
   713		g_cancellable_cancel(menu->cancellable);
   714		g_clear_object(&menu->cancellable);
   715		g_clear_object(&menu->received_action_group);
   716		g_clear_pointer(&menu->items, g_sequence_free);
   717		g_clear_pointer(&menu->current_layout, g_variant_unref);
   718	
   719		G_OBJECT_CLASS(dbus_menu_model_parent_class)->finalize(object);
   720	}
   721	
   722	static void install_properties(GObjectClass *object_class)
   723	{
   724		properties[PROP_XML] =
   725		    g_param_spec_object("xml",
   726		                        "xml",
   727		                        "xml",
   728		                        dbus_menu_xml_get_type(),
   729		                        (GParamFlags)(G_PARAM_CONSTRUCT | G_PARAM_READABLE |
   730		                                      G_PARAM_WRITABLE | G_PARAM_STATIC_STRINGS));
   731	
   732		properties[PROP_ACTION_GROUP] =
   733		    g_param_spec_object("action-group",
   734		                        "action-group",
   735		                        "action-group",
   736		                        g_action_group_get_type(),
   737		                        (GParamFlags)(G_PARAM_CONSTRUCT_ONLY | G_PARAM_WRITABLE |
   738		                                      G_PARAM_READABLE | G_PARAM_STATIC_STRINGS));
   739		properties[PROP_PARENT_ID] =
   740		    g_param_spec_uint("parent-id",
   741		                      "parent-id",
   742		                      "parent-id",
   743		                      0,
   744		                      UINT_MAX,
   745		                      0,
   746		                      (GParamFlags)(G_PARAM_CONSTRUCT | G_PARAM_WRITABLE |
   747		                                    G_PARAM_READABLE | G_PARAM_STATIC_STRINGS));
   748	
   749		g_object_class_install_properties(object_class, NUM_PROPS, properties);
   750	}
   751	
   752	static void dbus_menu_model_class_init(DBusMenuModelClass *klass)
   753	{
   754		GMenuModelClass *model_class = G_MENU_MODEL_CLASS(klass);
   755		GObjectClass *object_class   = G_OBJECT_CLASS(klass);
   756	
   757		object_class->finalize     = dbus_menu_model_finalize;
   758		object_class->set_property = dbus_menu_model_set_property;
   759		object_class->get_property = dbus_menu_model_get_property;
   760		object_class->constructed  = dbus_menu_model_constructed;
   761	
   762		model_class->is_mutable          = dbus_menu_model_is_mutable;
   763		model_class->get_n_items         = dbus_menu_model_get_n_items;
   764		model_class->get_item_attributes = dbus_menu_model_get_item_attributes;
   765		model_class->get_item_links      = dbus_menu_model_get_item_links;
   766		install_properties(object_class);
   767	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/model.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef MODEL_H
    20	#define MODEL_H
    21	
    22	#include "dbusmenu-interface.h"
    23	#include <gio/gio.h>
    24	#include <stdbool.h>
    25	
    26	G_BEGIN_DECLS
    27	
    28	G_DECLARE_FINAL_TYPE(DBusMenuModel, dbus_menu_model, DBUS_MENU, MODEL, GMenuModel)
    29	G_GNUC_INTERNAL DBusMenuModel *dbus_menu_model_new(uint parent_id, DBusMenuModel *parent,
    30	                                                   DBusMenuXml *xml, GActionGroup *action_group);
    31	G_GNUC_INTERNAL void dbus_menu_model_update_layout(DBusMenuModel *menu);
    32	G_GNUC_INTERNAL bool dbus_menu_model_is_layout_update_required(DBusMenuModel *model);
    33	
    34	G_GNUC_INTERNAL GSequence *dbus_menu_model_items(DBusMenuModel *model);
    35	
    36	G_END_DECLS
    37	
    38	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/section.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include "section.h"
    20	#include "item.h"
    21	enum
    22	{
    23		PROP_NULL          = 0,
    24		PROP_PARENT_MODEL  = 1,
    25		PROP_SECTION_INDEX = 2,
    26		NUM_PROPS
    27	};
    28	
    29	static GParamSpec *properties[NUM_PROPS] = { NULL };
    30	
    31	G_DEFINE_TYPE(DBusMenuSectionModel, dbus_menu_section_model, G_TYPE_MENU_MODEL)
    32	
    33	static int dbus_menu_section_model_is_mutable(GMenuModel *model)
    34	{
    35		return true;
    36	}
    37	
    38	static gint dbus_menu_section_model_get_n_items(GMenuModel *model)
    39	{
    40		DBusMenuSectionModel *menu = DBUS_MENU_SECTION_MODEL(model);
    41		GSequence *items           = dbus_menu_model_items(menu->parent_model);
    42		int begin = 0, end = -1;
    43		for (GSequenceIter *iter = g_sequence_get_begin_iter(items); !g_sequence_iter_is_end(iter);
    44		     iter                = g_sequence_iter_next(iter))
    45		{
    46			DBusMenuItem *item = (DBusMenuItem *)g_sequence_get(iter);
    47			if (item->section_num == menu->section_index && item->place == -1)
    48				begin = g_sequence_iter_get_position(iter);
    49			end = g_sequence_iter_get_position(iter);
    50			if (item->section_num == menu->section_index + 1 && item->place == -1)
    51			{
    52				end--;
    53				break;
    54			}
    55		}
    56		return end - begin;
    57	}
    58	
    59	static void dbus_menu_section_model_get_item_attributes(GMenuModel *model, gint position,
    60	                                                        GHashTable **table)
    61	{
    62		DBusMenuSectionModel *menu = DBUS_MENU_SECTION_MODEL(model);
    63		GSequence *items           = dbus_menu_model_items(menu->parent_model);
    64		for (GSequenceIter *iter = g_sequence_get_begin_iter(items); !g_sequence_iter_is_end(iter);
    65		     iter                = g_sequence_iter_next(iter))
    66		{
    67			DBusMenuItem *item = (DBusMenuItem *)g_sequence_get(iter);
    68			if (item->section_num == menu->section_index && item->place == position)
    69			{
    70				*table = g_hash_table_ref(item->attrs);
    71				return;
    72			}
    73		}
    74	}
    75	
    76	static void dbus_menu_section_model_get_item_links(GMenuModel *model, gint position,
    77	                                                   GHashTable **table)
    78	{
    79		DBusMenuSectionModel *menu = DBUS_MENU_SECTION_MODEL(model);
    80		GSequence *items           = dbus_menu_model_items(menu->parent_model);
    81		for (GSequenceIter *iter = g_sequence_get_begin_iter(items); !g_sequence_iter_is_end(iter);
    82		     iter                = g_sequence_iter_next(iter))
    83		{
    84			DBusMenuItem *item = (DBusMenuItem *)g_sequence_get(iter);
    85			if (item->section_num == menu->section_index && item->place == position)
    86			{
    87				if (g_hash_table_contains(item->links, G_MENU_LINK_SECTION))
    88					g_warning("Item has section, but should not\n");
    89				*table = g_hash_table_ref(item->links);
    90				return;
    91			}
    92		}
    93	}
    94	static void dbus_menu_section_model_init(DBusMenuSectionModel *menu)
    95	{
    96		menu->parent_model = NULL;
    97	}
    98	
    99	static void dbus_menu_section_model_finalize(GObject *object)
   100	{
   101		G_OBJECT_CLASS(dbus_menu_section_model_parent_class)->finalize(object);
   102	}
   103	
   104	static void install_properties(GObjectClass *object_class)
   105	{
   106		properties[PROP_PARENT_MODEL] =
   107		    g_param_spec_object("parent-model",
   108		                        "parent-model",
   109		                        "parent-model",
   110		                        dbus_menu_model_get_type(),
   111		                        (GParamFlags)(G_PARAM_CONSTRUCT_ONLY | G_PARAM_READABLE |
   112		                                      G_PARAM_WRITABLE | G_PARAM_STATIC_STRINGS));
   113	
   114		properties[PROP_SECTION_INDEX] =
   115		    g_param_spec_uint("section-index",
   116		                      "section-index",
   117		                      "section-index",
   118		                      0,
   119		                      UINT_MAX,
   120		                      0,
   121		                      (GParamFlags)(G_PARAM_CONSTRUCT_ONLY | G_PARAM_WRITABLE |
   122		                                    G_PARAM_READABLE | G_PARAM_STATIC_STRINGS));
   123	
   124		g_object_class_install_properties(object_class, NUM_PROPS, properties);
   125	}
   126	
   127	static void dbus_menu_section_model_set_property(GObject *object, guint property_id,
   128	                                                 const GValue *value, GParamSpec *pspec)
   129	{
   130		DBusMenuSectionModel *menu = DBUS_MENU_SECTION_MODEL(object);
   131	
   132		switch (property_id)
   133		{
   134		case PROP_PARENT_MODEL:
   135			menu->parent_model = DBUS_MENU_MODEL(g_value_get_object(value));
   136			break;
   137		case PROP_SECTION_INDEX:
   138			menu->section_index = g_value_get_uint(value);
   139			break;
   140		default:
   141			G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec);
   142			break;
   143		}
   144	}
   145	
   146	static void dbus_menu_section_model_get_property(GObject *object, guint property_id, GValue *value,
   147	                                                 GParamSpec *pspec)
   148	{
   149		DBusMenuSectionModel *menu = DBUS_MENU_SECTION_MODEL(object);
   150	
   151		switch (property_id)
   152		{
   153		case PROP_PARENT_MODEL:
   154			g_value_set_object(value, menu->parent_model);
   155			break;
   156		case PROP_SECTION_INDEX:
   157			g_value_set_uint(value, menu->section_index);
   158			break;
   159		default:
   160			G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec);
   161			break;
   162		}
   163	}
   164	
   165	static void dbus_menu_section_model_constructed(GObject *object)
   166	{
   167		G_OBJECT_CLASS(dbus_menu_section_model_parent_class)->constructed(object);
   168	}
   169	
   170	static void dbus_menu_section_model_class_init(DBusMenuSectionModelClass *klass)
   171	{
   172		GMenuModelClass *model_class = G_MENU_MODEL_CLASS(klass);
   173		GObjectClass *object_class   = G_OBJECT_CLASS(klass);
   174	
   175		object_class->finalize     = dbus_menu_section_model_finalize;
   176		object_class->set_property = dbus_menu_section_model_set_property;
   177		object_class->get_property = dbus_menu_section_model_get_property;
   178		object_class->constructed  = dbus_menu_section_model_constructed;
   179	
   180		model_class->is_mutable          = dbus_menu_section_model_is_mutable;
   181		model_class->get_n_items         = dbus_menu_section_model_get_n_items;
   182		model_class->get_item_attributes = dbus_menu_section_model_get_item_attributes;
   183		model_class->get_item_links      = dbus_menu_section_model_get_item_links;
   184		install_properties(object_class);
   185	}
   186	
   187	G_GNUC_INTERNAL DBusMenuSectionModel *dbus_menu_section_model_new(DBusMenuModel *parent, int section_index)
   188	{
   189		return DBUS_MENU_SECTION_MODEL(g_object_new(dbus_menu_section_model_get_type(),
   190		                                            "parent-model",
   191		                                            parent,
   192		                                            "section-index",
   193		                                            section_index,
   194		                                            NULL));
   195	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/section.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef SECTION_H
    20	#define SECTION_H
    21	
    22	#include "model.h"
    23	#include <gio/gio.h>
    24	
    25	G_BEGIN_DECLS
    26	
    27	G_DECLARE_FINAL_TYPE(DBusMenuSectionModel, dbus_menu_section_model, DBUS_MENU, SECTION_MODEL,
    28	                     GMenuModel)
    29	
    30	struct _DBusMenuSectionModel
    31	{
    32		GMenuModel parent_instance;
    33	
    34		DBusMenuModel *parent_model;
    35		uint section_index;
    36	};
    37	
    38	G_GNUC_INTERNAL DBusMenuSectionModel *dbus_menu_section_model_new(DBusMenuModel *parent, int section_index);
    39	
    40	G_END_DECLS
    41	
    42	#endif // SECTION_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/test.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include "debug.h"
    20	#include "importer.h"
    21	#include <gtk/gtk.h>
    22	#include <stdbool.h>
    23	
    24	void on_importer_model_changed(GObject *obj, GParamSpec *pspec, gpointer data)
    25	{
    26		DBusMenuImporter *importer = (DBusMenuImporter *)obj;
    27		GMenuModel *model;
    28		GActionGroup *action_group;
    29		g_object_get(importer, "model", &model, "action-group", &action_group, NULL);
    30		if (GTK_IS_MENU_SHELL(data))
    31		{
    32			GtkMenuShell *menubar = GTK_MENU_SHELL(data);
    33			gtk_widget_insert_action_group(menubar, "dbusmenu", action_group);
    34			gtk_menu_shell_bind_model(menubar, model, NULL, true);
    35		}
    36		else if (GTK_IS_MENU_BUTTON(data))
    37		{
    38			GtkMenuButton *btn = GTK_MENU_BUTTON(data);
    39			GtkMenu *popover   = gtk_popover_new_from_model(btn, model);
    40			gtk_widget_insert_action_group(popover, "dbusmenu", action_group);
    41			gtk_menu_button_set_popover(btn, popover);
    42		}
    43	}
    44	
    45	int main(int argc, char *argv[])
    46	{
    47		gtk_init(&argc, &argv);
    48	
    49		GtkWindow *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    50		gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);
    51		gtk_window_set_default_size(GTK_WINDOW(window), 1000, 1000);
    52		gtk_window_set_title(GTK_WINDOW(window), "Submenu");
    53	
    54		GtkBox *vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    55		gtk_container_add(GTK_CONTAINER(window), vbox);
    56	
    57		GtkMenuBar *menubar = gtk_menu_bar_new();
    58		GtkMenuButton *menu = gtk_menu_button_new();
    59		//	DBusMenuImporter *importer = dbus_menu_importer_new("org.krusader", "/MenuBar/2");
    60		DBusMenuImporter *importer = dbus_menu_importer_new(":1.250", "/MenuBar/1");
    61		//	DBusMenuImporter *importer = dbus_menu_importer_new(":1.49", "/MenuBar/2");
    62		//	DBusMenuImporter *importer =
    63		//	    dbus_menu_importer_new(":1.227", "/com/canonical/menu/300003e");
    64		//	DBusMenuImporter *importer =
    65		//	    dbus_menu_importer_new(":1.458", "/com/canonical/menu/4600016");
    66		//	DBusMenuImporter *importer =
    67		//	    dbus_menu_importer_new(":1.542", "/com/canonical/menu/2600041");
    68		g_signal_connect(importer, "notify::model", G_CALLBACK(on_importer_model_changed), menubar);
    69		g_signal_connect(importer, "notify::model", G_CALLBACK(on_importer_model_changed), menu);
    70		g_signal_connect(window, "destroy", G_CALLBACK(gtk_main_quit), NULL);
    71		gtk_box_pack_start(GTK_BOX(vbox), menubar, FALSE, FALSE, 0);
    72		gtk_box_pack_start(GTK_BOX(vbox), menu, FALSE, FALSE, 0);
    73	
    74		gtk_widget_show_all(window);
    75	
    76		gtk_main();
    77	
    78		return 0;
    79	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/utils.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include <stdbool.h>
    20	#include <stdio.h>
    21	#include <utils.h>
    22	
    23	#include "definitions.h"
    24	#include "model.h"
    25	
    26	static void activate_ordinary_cb(GSimpleAction *action, GVariant *parameter, gpointer user_data)
    27	{
    28		DBusMenuXml *xml = DBUS_MENU_XML(user_data);
    29		u_int32_t id;
    30		sscanf(g_action_get_name(G_ACTION(action)), ACTION_PREFIX "%u", &id);
    31		// use CURRENT_TIME instead of gtk_get_current_event_time to avoid linking to GTK.
    32		dbus_menu_xml_call_event_sync(xml,
    33		                              id,
    34		                              "clicked",
    35		                              g_variant_new("v", g_variant_new_int32(0)),
    36		                              CURRENT_TIME,
    37		                              NULL,
    38		                              NULL);
    39	}
    40	
    41	static void activate_checkbox_cb(GSimpleAction *action, GVariant *parameter, gpointer user_data)
    42	{
    43		DBusMenuXml *xml = DBUS_MENU_XML(user_data);
    44		u_int32_t id;
    45		sscanf(g_action_get_name(G_ACTION(action)), ACTION_PREFIX "%u", &id);
    46		g_autoptr(GVariant) state = g_action_get_state(G_ACTION(action));
    47		// use CURRENT_TIME instead of gtk_get_current_event_time to avoid linking to GTK.
    48		dbus_menu_xml_call_event_sync(xml,
    49		                              id,
    50		                              "clicked",
    51		                              g_variant_new("v", g_variant_new_int32(0)),
    52		                              CURRENT_TIME,
    53		                              NULL,
    54		                              NULL);
    55		g_action_change_state(G_ACTION(action),
    56		                      g_variant_new_boolean(!g_variant_get_boolean(state)));
    57	}
    58	
    59	static void state_radio_cb(GSimpleAction *action, GVariant *parameter, gpointer user_data)
    60	{
    61		DBusMenuXml *xml   = DBUS_MENU_XML(user_data);
    62		const char *id_str = g_action_get_name(G_ACTION(action));
    63		uint id;
    64		sscanf(id_str, ACTION_PREFIX "%u", &id);
    65		// use CURRENT_TIME instead of gtk_get_current_event_time to avoid linking to GTK.
    66		dbus_menu_xml_call_event_sync(xml,
    67		                              id,
    68		                              "clicked",
    69		                              g_variant_new("v", g_variant_new_int32(0)),
    70		                              CURRENT_TIME,
    71		                              NULL,
    72		                              NULL);
    73		g_simple_action_set_state(action, parameter);
    74	}
    75	
    76	static GAction *dbus_menu_action_new(DBusMenuXml *xml, u_int32_t id, DBusMenuActionType action_type)
    77	{
    78		GSimpleAction *ret;
    79		g_autofree char *name = g_strdup_printf(ACTION_PREFIX "%u", id);
    80		if (action_type == DBUS_MENU_ACTION_CHECKMARK)
    81		{
    82			ret = g_simple_action_new_stateful(name, NULL, g_variant_new_boolean(false));
    83			g_signal_connect(ret, "activate", G_CALLBACK(activate_checkbox_cb), xml);
    84			return G_ACTION(ret);
    85		}
    86		else if (action_type == DBUS_MENU_ACTION_RADIO)
    87		{
    88			ret = g_simple_action_new_stateful(name,
    89			                                   G_VARIANT_TYPE_STRING,
    90			                                   g_variant_new_string(
    91			                                       DBUS_MENU_ACTION_RADIO_UNSELECTED));
    92			g_signal_connect(ret, "activate", G_CALLBACK(state_radio_cb), xml);
    93			return G_ACTION(ret);
    94		}
    95		else if (action_type == DBUS_MENU_ACTION_NORMAL)
    96		{
    97			ret = g_simple_action_new(name, NULL);
    98			g_signal_connect(ret, "activate", G_CALLBACK(activate_ordinary_cb), xml);
    99			return G_ACTION(ret);
   100		}
   101		g_assert_not_reached();
   102	}
   103	
   104	// static bool source_state_false(gpointer *data)
   105	//{
   106	//	GSimpleAction *submenu = G_SIMPLE_ACTION(data);
   107	//	g_simple_action_set_state(submenu, g_variant_new_boolean(false));
   108	//	return true;
   109	//}
   110	
   111	static void state_submenu_cb(GSimpleAction *action, GVariant *parameter, gpointer user_data)
   112	{
   113		g_return_if_fail(DBUS_MENU_IS_MODEL(user_data));
   114		DBusMenuModel *model = DBUS_MENU_MODEL(user_data);
   115		DBusMenuXml *xml;
   116		u_int32_t id;
   117		g_object_get(model, "parent-id", &id, "xml", &xml, NULL);
   118		bool request_open = g_variant_get_boolean(parameter);
   119		GVariant *statev  = g_action_get_state(G_ACTION(action));
   120		bool opened       = g_variant_get_boolean(statev);
   121		g_variant_unref(statev);
   122		bool need_update = true;
   123		if (request_open && !opened)
   124		{
   125			// Use opened before actual open. For Firefox.
   126			dbus_menu_xml_call_event_sync(xml,
   127			                              id,
   128			                              "opened",
   129			                              g_variant_new("v", g_variant_new_int32(0)),
   130			                              CURRENT_TIME,
   131			                              NULL,
   132			                              NULL);
   133			dbus_menu_xml_call_about_to_show_sync(xml,
   134			                                      id,
   135			                                      (gboolean *)&need_update,
   136			                                      NULL,
   137			                                      NULL);
   138			if (g_menu_model_get_n_items(G_MENU_MODEL(model)) == 0)
   139				need_update = true;
   140			need_update = need_update || dbus_menu_model_is_layout_update_required(model);
   141			if (need_update)
   142			{
   143				// TODD: Populate layout after request;
   144				if (DBUS_MENU_IS_MODEL(model))
   145					dbus_menu_model_update_layout(model);
   146			}
   147			g_simple_action_set_state(action, g_variant_new_boolean(true));
   148			// TODO: change state to false after menu closing, not by time
   149			//                g_timeout_add(500, (GSourceFunc)source_state_false, action);
   150		}
   151		else if (request_open)
   152		{
   153			g_simple_action_set_state(action, g_variant_new_boolean(true));
   154			need_update = dbus_menu_model_is_layout_update_required(model);
   155			if (need_update)
   156			{
   157				// TODD: Populate layout after request;
   158				if (DBUS_MENU_IS_MODEL(model))
   159					dbus_menu_model_update_layout(model);
   160			}
   161		}
   162		else
   163		{
   164			dbus_menu_xml_call_event_sync(xml,
   165			                              id,
   166			                              "closed",
   167			                              g_variant_new("v", g_variant_new_int32(0)),
   168			                              CURRENT_TIME,
   169			                              NULL,
   170			                              NULL);
   171			g_simple_action_set_state(action, g_variant_new_boolean(false));
   172		}
   173	}
   174	
   175	static GAction *dbus_menu_submenu_action_new(DBusMenuModel *model)
   176	{
   177		uint id;
   178		g_object_get(model, "parent-id", &id, NULL);
   179		g_autofree char *name = g_strdup_printf(SUBMENU_PREFIX "%u", id);
   180		GSimpleAction *ret    = g_simple_action_new_stateful(name,
   181	                                                          G_VARIANT_TYPE_BOOLEAN,
   182	                                                          g_variant_new_boolean(false));
   183		g_signal_connect(ret, "change-state", G_CALLBACK(state_submenu_cb), model);
   184		return G_ACTION(ret);
   185	}
   186	
   187	G_GNUC_INTERNAL char *dbus_menu_action_get_name(uint id, DBusMenuActionType action_type,
   188	                                                bool use_prefix)
   189	{
   190		return g_strdup_printf("%s%s%u",
   191		                       use_prefix ? DBUS_MENU_ACTION_NAMESPACE_PREFIX : "",
   192		                       action_type == DBUS_MENU_ACTION_SUBMENU ? SUBMENU_PREFIX
   193		                                                               : ACTION_PREFIX,
   194		                       id);
   195	}
   196	
   197	G_GNUC_INTERNAL void dbus_menu_action_replace_signals(GAction *action, DBusMenuXml *xml,
   198	                                                      DBusMenuModel *submenu,
   199	                                                      DBusMenuActionType action_type)
   200	{
   201		if (action_type == DBUS_MENU_ACTION_SUBMENU)
   202		{
   203			g_signal_handlers_disconnect_by_func_only(action, state_submenu_cb);
   204			g_signal_connect(action, "change-state", G_CALLBACK(state_submenu_cb), submenu);
   205		}
   206		else if (action_type == DBUS_MENU_ACTION_RADIO)
   207		{
   208			g_signal_handlers_disconnect_by_func_only(action, state_radio_cb);
   209			g_signal_connect(action, "activate", G_CALLBACK(state_radio_cb), xml);
   210		}
   211		else if (action_type == DBUS_MENU_ACTION_CHECKMARK)
   212		{
   213			g_signal_handlers_disconnect_by_func_only(action, activate_checkbox_cb);
   214			g_signal_connect(action, "activate", G_CALLBACK(activate_checkbox_cb), xml);
   215		}
   216		else
   217		{
   218			g_signal_handlers_disconnect_by_func_only(action, activate_ordinary_cb);
   219			g_signal_connect(action, "activate", G_CALLBACK(activate_ordinary_cb), xml);
   220		}
   221	}
   222	
   223	G_GNUC_INTERNAL GAction *dbus_menu_action_reference(u_int32_t id, DBusMenuXml *xml,
   224	                                                    DBusMenuModel *submenu,
   225	                                                    GActionMap *action_group,
   226	                                                    DBusMenuActionType action_type)
   227	{
   228		bool is_submenu           = action_type == DBUS_MENU_ACTION_SUBMENU;
   229		const char *action_prefix = is_submenu ? SUBMENU_PREFIX : ACTION_PREFIX;
   230		g_autofree char *name     = g_strdup_printf("%s%u", action_prefix, id);
   231		GAction *ret              = g_action_map_lookup_action(action_group, name);
   232		bool check_parameter      = false;
   233		if (ret)
   234		{
   235			g_object_ref(ret);
   236			const GVariantType *state_type = g_action_get_state_type(ret);
   237			if (state_type == NULL)
   238				check_parameter = check_parameter || action_type == DBUS_MENU_ACTION_NORMAL;
   239			else if (is_submenu)
   240			{
   241				check_parameter = check_parameter ||
   242				                  g_variant_type_equal(state_type, G_VARIANT_TYPE_BOOLEAN);
   243			}
   244			else
   245			{
   246				check_parameter = check_parameter ||
   247				                  (action_type == DBUS_MENU_ACTION_RADIO &&
   248				                   g_variant_type_equal(state_type, G_VARIANT_TYPE_STRING));
   249				check_parameter =
   250				    check_parameter ||
   251				    (action_type == DBUS_MENU_ACTION_CHECKMARK &&
   252				     g_variant_type_equal(state_type, G_VARIANT_TYPE_BOOLEAN));
   253			}
   254			if (check_parameter)
   255				dbus_menu_action_replace_signals(ret, xml, submenu, action_type);
   256			else
   257				g_action_map_remove_action(action_group, name);
   258		}
   259		if (ret == NULL || !check_parameter)
   260		{
   261			if (is_submenu)
   262				ret = dbus_menu_submenu_action_new(submenu);
   263			else
   264				ret = dbus_menu_action_new(xml, id, action_type);
   265			g_action_map_add_action(G_ACTION_MAP(action_group), ret);
   266		}
   267		return ret;
   268	}
   269	
   270	G_GNUC_INTERNAL void dbus_menu_action_lock(GAction *action)
   271	{
   272		g_signal_handlers_block_by_func_only(action, activate_checkbox_cb);
   273		g_signal_handlers_block_by_func_only(action, state_radio_cb);
   274	}
   275	
   276	G_GNUC_INTERNAL void dbus_menu_action_unlock(GAction *action)
   277	{
   278		g_signal_handlers_unblock_by_func_only(action, activate_checkbox_cb);
   279		g_signal_handlers_unblock_by_func_only(action, state_radio_cb);
   280	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-glib-translator/utils.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef UTILS_H
    20	#define UTILS_H
    21	
    22	#include "dbusmenu-interface.h"
    23	#include "definitions.h"
    24	#include "model.h"
    25	#include <gio/gio.h>
    26	
    27	G_BEGIN_DECLS
    28	
    29	G_GNUC_INTERNAL GAction *dbus_menu_action_reference(u_int32_t id, DBusMenuXml *xml,
    30	                                                    DBusMenuModel *submenu,
    31	                                                    GActionMap *action_group,
    32	                                                    DBusMenuActionType type);
    33	
    34	G_GNUC_INTERNAL char *dbus_menu_action_get_name(uint id, DBusMenuActionType action_type,
    35	                                                bool use_prefix);
    36	G_GNUC_INTERNAL void dbus_menu_action_replace_signals(GAction *action, DBusMenuXml *xml,
    37	                                                      DBusMenuModel *submenu,
    38	                                                      DBusMenuActionType action_type);
    39	
    40	G_GNUC_INTERNAL void dbus_menu_action_lock(GAction *action);
    41	G_GNUC_INTERNAL void dbus_menu_action_unlock(GAction *action);
    42	
    43	G_END_DECLS
    44	
    45	#endif // UTILS_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/AUTHORS
--------------------------------------------------------------------------------
     1	Ryan Lortie <desrt@desrt.ca>
     2	William Hua <william.hua@canonical.com>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/data/appmenu-gtk2-parser.pc.in
--------------------------------------------------------------------------------
     1	prefix=@CMAKE_INSTALL_PREFIX@
     2	exec_prefix=@CMAKE_INSTALL_FULL_LIBEXECDIR@
     3	libdir=@CMAKE_INSTALL_FULL_LIBDIR@
     4	includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@
     5	
     6	Name: appmenu-gtk2-parser
     7	Description: GtkMenuShell to GMenuModel parser
     8	Version: @VERSION@
     9	Requires: gtk+-2.0
    10	Cflags: -I${includedir}/appmenu-gtk-parser
    11	Libs: -L${libdir} -lappmenu-gtk2-parser
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/data/appmenu-gtk3-parser.pc.in
--------------------------------------------------------------------------------
     1	prefix=@CMAKE_INSTALL_PREFIX@
     2	exec_prefix=@CMAKE_INSTALL_FULL_LIBEXECDIR@
     3	libdir=@CMAKE_INSTALL_FULL_LIBDIR@
     4	includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@
     5	
     6	Name: appmenu-gtk3-parser
     7	Description: GtkMenuShell to GMenuModel parser
     8	Version: @VERSION@
     9	Requires: gtk+-3.0
    10	Cflags: -I${includedir}/appmenu-gtk-parser
    11	Libs: -L${libdir} -lappmenu-gtk3-parser
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/data/appmenu-gtk-module.service.in
--------------------------------------------------------------------------------
     1	[Unit]
     2	Description=Appmenu GTK Module Environment variables
     3	After=dbus.service
     4	Before=gnome-session.service
     5	PartOf=graphical-session.target
     6	
     7	[Service]
     8	Type=oneshot
     9	RemainAfterExit=yes
    10	ExecStart=/bin/sh -ec '\
    11	        GTK_MODULES="$${GTK_MODULES:+$GTK_MODULES:}appmenu-gtk-module";\
    12	        @CMAKE_INSTALL_FULL_BINDIR@/dbus-update-activation-environment --verbose --systemd GTK_MODULES'
    13	ExecStopPost=/bin/sh -ec '\
    14	        GTK_MODULES=$$(echo -n $${GTK_MODULES} | @CMAKE_INSTALL_FULL_BINDIR@/awk -v RS=: -v ORS=: "/^appmenu-gtk-module$/ {next} {print}" | @CMAKE_INSTALL_FULL_BINDIR@/sed -e "s/:*$//");\
    15	        @CMAKE_INSTALL_FULL_BINDIR@/dbus-update-activation-environment --verbose --systemd GTK_MODULES'
    16	
    17	[Install]
    18	WantedBy=xfce-session.target mate-session.target gnome-session.target
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/data/meson.build
--------------------------------------------------------------------------------
     1	install_data([
     2	    'org.appmenu.gtk-module.gschema.xml'
     3	], install_dir: schema_dir)
     4	
     5	systemd = dependency('systemd', required: false)
     6	
     7	if systemd.found()
     8	    userunitdir = systemd.get_variable(pkgconfig:'systemduserunitdir')
     9	    configure_file(
    10	        input: 'appmenu-gtk-module.service.in',
    11	        output: 'appmenu-gtk-module.service',
    12	        install_dir: userunitdir,
    13	        configuration: {'CMAKE_INSTALL_FULL_BINDIR': join_paths(prefix,get_option('bindir'))}
    14	    )
    15	endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/data/org.appmenu.gtk-module.gschema.xml
--------------------------------------------------------------------------------
     1	<?xml version="1.0" encoding="UTF-8"?>
     2	<schemalist>
     3	  <schema id="org.appmenu.gtk-module" path="/org/appmenu/gtk-module/">
     4	    <key name="blacklist" type="as">
     5	      <summary>Application blacklist</summary>
     6	      <description>List of applications where appmenu-gtk-module should be disabled.</description>
     7	      <default>['anjuta','freeciv', 'freeciv-gtk2', 'freeciv-gtk3', 'glade','gwyddion']</default>
     8	    </key>
     9	    <key name="whitelist" type="as">
    10	      <summary>Application whitelist</summary>
    11	      <description>List of applications where appmenu-gtk-module should be enabled.</description>
    12	      <default>[]</default>
    13	    </key>
    14	    <key name="always-show-inner-menu" type="b">
    15	      <summary>Always show menus in application</summary>
    16	      <description>If this is enabled, menus will not removed from applications even if registrar found. Useful for HUD-only usage.</description>
    17	      <default>false</default>
    18	    </key>
    19	    <key name="run-on-wayland" type="b">
    20	      <summary>Run on wayland</summary>
    21	      <description>Is appmenu-gtk-module should run on Wayland.</description>
    22	      <default>true</default>
    23	    </key>
    24	  </schema>
    25	</schemalist>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/docs/appmenu-gtk-parser-docs.sgml
--------------------------------------------------------------------------------
     1	<?xml version="1.0"?>
     2	<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
     3	               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
     4	[
     5	  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
     6	]>
     7	<book id="index">
     8	  <bookinfo>
     9	    <title>appmenu-gtk-module Reference Manual</title>
    10	    <releaseinfo>
    11	      for appmenu-gtk-module 0.7.
    12	      The latest version of this documentation can be found on-line at
    13	      <ulink role="online-location" url="http://[SERVER]/appmenu-gtk-module/index.html">http://[SERVER]/appmenu-gtk-module/</ulink>.
    14	    </releaseinfo>
    15	  </bookinfo>
    16	
    17	  <chapter>
    18	    <title>API Reference</title>
    19	        <xi:include href="xml/appmenu-gtk-action-group.xml"/>
    20	    <xi:include href="xml/appmenu-gtk-menu-shell.xml"/>
    21	
    22	  </chapter>
    23	  <chapter id="object-tree">
    24	    <title>Object Hierarchy</title>
    25	     <xi:include href="xml/tree_index.sgml"/>
    26	  </chapter>
    27	  <index id="api-index-full">
    28	    <title>API Index</title>
    29	    <xi:include href="xml/api-index-full.xml"><xi:fallback /></xi:include>
    30	  </index>
    31	  <index id="deprecated-api-index" role="deprecated">
    32	    <title>Index of deprecated API</title>
    33	    <xi:include href="xml/api-index-deprecated.xml"><xi:fallback /></xi:include>
    34	  </index>
    35	</book>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/docs/appmenu-gtk-parser-sections.txt
--------------------------------------------------------------------------------
     1	<SECTION>
     2	<FILE>unity-gtk-action-group</FILE>
     3	UnityGtkActionGroup
     4	UnityGtkActionGroupClass
     5	unity_gtk_action_group_new
     6	unity_gtk_action_group_connect_shell
     7	unity_gtk_action_group_disconnect_shell
     8	unity_gtk_action_group_set_debug
     9	<SUBSECTION Standard>
    10	UNITY_GTK_ACTION_GROUP
    11	UNITY_GTK_ACTION_GROUP_CLASS
    12	UNITY_GTK_ACTION_GROUP_GET_CLASS
    13	UNITY_GTK_IS_ACTION_GROUP
    14	UNITY_GTK_IS_ACTION_GROUP_CLASS
    15	UNITY_GTK_TYPE_ACTION_GROUP
    16	unity_gtk_action_group_get_type
    17	</SECTION>
    18	
    19	<SECTION>
    20	<FILE>unity-gtk-menu-shell</FILE>
    21	UnityGtkMenuShell
    22	UnityGtkMenuShellClass
    23	unity_gtk_menu_shell_new
    24	unity_gtk_menu_shell_set_debug
    25	<SUBSECTION Standard>
    26	UNITY_GTK_IS_MENU_SHELL
    27	UNITY_GTK_IS_MENU_SHELL_CLASS
    28	UNITY_GTK_MENU_SHELL
    29	UNITY_GTK_MENU_SHELL_CLASS
    30	UNITY_GTK_MENU_SHELL_GET_CLASS
    31	UNITY_GTK_TYPE_MENU_SHELL
    32	unity_gtk_menu_shell_get_type
    33	</SECTION>
    34	
    35	<SECTION>
    36	<FILE>appmenu-gtk-parser</FILE>
    37	
    38	</SECTION>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/docs/appmenu-gtk-parser.types
--------------------------------------------------------------------------------
     1	unity_gtk_action_group_get_type
     2	unity_gtk_menu_shell_get_type
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/docs/gtkdocentities.ent.in
--------------------------------------------------------------------------------
     1	<!ENTITY package "@CMAKE_PROJECT_NAME@">
     2	<!ENTITY package_bugreport "@PACKAGE_BUGREPORT@">
     3	<!ENTITY package_name "@CMAKE_PROJECT_NAME@">
     4	<!ENTITY package_string "@PACKAGE_STRING@">
     5	<!ENTITY package_tarname "@CPACK_SOURCE_PACKAGE_FILE_NAME@">
     6	<!ENTITY package_url "@PACKAGE_URL@">
     7	<!ENTITY package_version "@VERSION@">
     8	<!ENTITY package_api_version "@PACKAGE_API_VERSION@">
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/docs/meson.build
--------------------------------------------------------------------------------
     1	ent_dict = {
     2	    'CMAKE_PROJECT_NAME' : meson.project_name(),
     3	    'PACKAGE_BUGREPORT': 'https://github.com/rilian-la-te/vala-panel-appmenu/issues',
     4	    'PACKAGE_STRING' : 'appmenu-gtk-parser',
     5	    'CPACK_SOURCE_PACKAGE_FILE_NAME': '@0@-@1@.tar.xz'.format(meson.project_name(),meson.project_version()),
     6	    'PACKAGE_URL' : 'https://github.com/rilian-la-te/vala-panel-appmenu',
     7	    'VERSION': meson.project_version(),
     8	    'PACKAGE_API_VERSION': meson.project_version()
     9	}
    10	ent = configure_file(
    11	    input: 'gtkdocentities.ent.in',
    12	    output: 'gtkdocentities.ent',
    13	    configuration: ent_dict
    14	)
    15	
    16	if get_option('gtk_doc')
    17	gnome.gtkdoc(
    18	    'appmenu-gtk-parser',
    19	    content_files: ent,
    20	    src_dir: parser_inc,
    21	    gobject_typesfile: 'appmenu-gtk-parser.types',
    22	    dependencies: gtk3_parser_dep,
    23	    ignore_headers: lib_private_headers,
    24	    install: true,
    25	    main_sgml: join_paths(meson.current_build_dir(),'appmenu-gtk-parser-docs.sgml')
    26	)
    27	
    28	endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/appmenu-gtk-action-group.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#ifndef __UNITY_GTK_ACTION_GROUP_H__
    21	#define __UNITY_GTK_ACTION_GROUP_H__
    22	
    23	#include <glib-object.h>
    24	
    25	G_BEGIN_DECLS
    26	
    27	#define UNITY_GTK_TYPE_ACTION_GROUP (unity_gtk_action_group_get_type())
    28	G_DECLARE_FINAL_TYPE(UnityGtkActionGroup, unity_gtk_action_group, UNITY_GTK, ACTION_GROUP, GObject)
    29	
    30	G_END_DECLS
    31	
    32	#include "appmenu-gtk-menu-shell.h"
    33	
    34	G_BEGIN_DECLS
    35	
    36	/**
    37	 * UnityGtkActionGroup:
    38	 *
    39	 * Opaque action group collector for #UnityGtkMenuShell.
    40	 */
    41	struct _UnityGtkActionGroup
    42	{
    43		GObject parent_instance;
    44	
    45		/*< private >*/
    46		GActionGroup *old_group;
    47		GHashTable *actions_by_name;
    48		GHashTable *names_by_radio_menu_item;
    49	};
    50	
    51	GType unity_gtk_action_group_get_type(void);
    52	
    53	UnityGtkActionGroup *unity_gtk_action_group_new(GActionGroup *old_group);
    54	
    55	void unity_gtk_action_group_connect_shell(UnityGtkActionGroup *group, UnityGtkMenuShell *shell);
    56	
    57	void unity_gtk_action_group_disconnect_shell(UnityGtkActionGroup *group, UnityGtkMenuShell *shell);
    58	
    59	void unity_gtk_action_group_set_debug(gboolean debug);
    60	
    61	G_END_DECLS
    62	
    63	#endif /* __UNITY_GTK_ACTION_GROUP_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/appmenu-gtk-menu-shell.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#ifndef __UNITY_GTK_MENU_SHELL_H__
    21	#define __UNITY_GTK_MENU_SHELL_H__
    22	
    23	#include <gtk/gtk.h>
    24	
    25	G_BEGIN_DECLS
    26	
    27	#define UNITY_GTK_TYPE_MENU_SHELL (unity_gtk_menu_shell_get_type())
    28	G_DECLARE_FINAL_TYPE(UnityGtkMenuShell, unity_gtk_menu_shell, UNITY_GTK, MENU_SHELL, GMenuModel)
    29	
    30	G_END_DECLS
    31	
    32	#include "appmenu-gtk-action-group.h"
    33	
    34	G_BEGIN_DECLS
    35	
    36	/**
    37	 * UnityGtkMenuShell:
    38	 *
    39	 * Opaque #GMenuModel proxy for #GtkMenuShell.
    40	 */
    41	struct _UnityGtkMenuShell
    42	{
    43		GMenuModel parent_instance;
    44	
    45		/*< private >*/
    46		GtkMenuShell *menu_shell;
    47		gboolean has_mnemonics;
    48		GPtrArray *items;
    49		GPtrArray *sections;
    50		GSequence *visible_indices;
    51		GSequence *separator_indices;
    52		UnityGtkActionGroup *action_group;
    53	};
    54	
    55	GType unity_gtk_menu_shell_get_type(void);
    56	
    57	UnityGtkMenuShell *unity_gtk_menu_shell_new(GtkMenuShell *menu_shell);
    58	
    59	void unity_gtk_menu_shell_set_debug(gboolean debug);
    60	
    61	G_END_DECLS
    62	
    63	#endif /* __UNITY_GTK_MENU_SHELL_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/appmenu-gtk-parser.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#ifndef __UNITY_GTK_PARSER_H__
    21	#define __UNITY_GTK_PARSER_H__
    22	
    23	#include <appmenu-gtk-action-group.h>
    24	#include <appmenu-gtk-menu-shell.h>
    25	
    26	#endif /* __UNITY_GTK_PARSER_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/meson.build
--------------------------------------------------------------------------------
     1	lib_sources = files(
     2		'unity-gtk-action-group.c',
     3		'unity-gtk-action.c',
     4		'unity-gtk-menu-shell.c',
     5		'unity-gtk-menu-section.c',
     6		'unity-gtk-menu-item.c',
     7	)
     8	lib_private_headers = [
     9		'unity-gtk-action-group-private.h',
    10	    'unity-gtk-action-private.h',
    11	    'unity-gtk-menu-shell-private.h',
    12	    'unity-gtk-menu-section-private.h',
    13	    'unity-gtk-menu-item-private.h',
    14	]
    15	lib_headers = files(
    16		'appmenu-gtk-action-group.h',
    17		'appmenu-gtk-menu-shell.h',
    18		'appmenu-gtk-parser.h'
    19	)
    20	
    21	parser_inc = include_directories('.')
    22	parser_kwargs = {
    23	    'sources': lib_sources+lib_headers+lib_private_headers,
    24	    'install': true,
    25	    'version': meson.project_version(),
    26	    'soversion': '0'
    27	}
    28	pc_kwargs = {
    29	    'description': 'GtkMenuShell to GMenuModel parser',
    30	    'variables': ['exec_prefix=@0@'.format(join_paths(prefix,get_option('libexecdir')))],
    31	    'extra_cflags': ['-I${includedir}/appmenu-gtk-parser']
    32	}
    33	
    34	if build_gtk2
    35	    gtk2_parser_lib = shared_library(
    36	        'appmenu-gtk2-parser',
    37	        dependencies: gtk2,
    38	        c_args: '-Wno-deprecated-declarations',
    39	        kwargs: parser_kwargs
    40	    )
    41	    pkgconfig.generate(gtk2_parser_lib,
    42	        requires: gtk2,
    43	        kwargs: pc_kwargs
    44	    )
    45	    gtk2_parser_dep = declare_dependency(
    46	        include_directories: parser_inc,
    47	        link_with: gtk2_parser_lib,
    48	        dependencies: gtk2
    49	    )
    50	endif
    51	
    52	if build_gtk3
    53	    gtk3_parser_lib = shared_library(
    54	        'appmenu-gtk3-parser',
    55	        dependencies: gtk3,
    56	        kwargs: parser_kwargs
    57	    )
    58	    pkgconfig.generate(gtk3_parser_lib,
    59	        requires: gtk3,
    60	        kwargs: pc_kwargs
    61	    )
    62	    gtk3_parser_dep = declare_dependency(
    63	        include_directories: parser_inc,
    64	        link_with: gtk3_parser_lib,
    65	        dependencies: gtk3
    66	    )
    67	endif
    68	
    69	if build_gtk2 or build_gtk3
    70	    install_headers(lib_headers, subdir: 'appmenu-gtk-parser')
    71	endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-action.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#include "unity-gtk-action-private.h"
    21	
    22	G_DEFINE_TYPE(UnityGtkAction, unity_gtk_action, G_TYPE_OBJECT);
    23	
    24	static void unity_gtk_action_dispose(GObject *object)
    25	{
    26		UnityGtkAction *action;
    27		GHashTable *items_by_name;
    28	
    29		g_return_if_fail(UNITY_GTK_IS_ACTION(object));
    30	
    31		action        = UNITY_GTK_ACTION(object);
    32		items_by_name = action->items_by_name;
    33	
    34		if (items_by_name != NULL)
    35		{
    36			action->items_by_name = NULL;
    37			g_hash_table_unref(items_by_name);
    38		}
    39	
    40		unity_gtk_action_set_item(action, NULL);
    41		unity_gtk_action_set_subname(action, NULL);
    42		unity_gtk_action_set_name(action, NULL);
    43	
    44		G_OBJECT_CLASS(unity_gtk_action_parent_class)->dispose(object);
    45	}
    46	
    47	static void unity_gtk_action_class_init(UnityGtkActionClass *klass)
    48	{
    49		GObjectClass *object_class = G_OBJECT_CLASS(klass);
    50	
    51		object_class->dispose = unity_gtk_action_dispose;
    52	}
    53	
    54	static void unity_gtk_action_init(UnityGtkAction *self)
    55	{
    56	}
    57	
    58	UnityGtkAction *unity_gtk_action_new(const char *name, UnityGtkMenuItem *item)
    59	{
    60		UnityGtkAction *action = g_object_new(UNITY_GTK_TYPE_ACTION, NULL);
    61	
    62		unity_gtk_action_set_name(action, name);
    63		unity_gtk_action_set_item(action, item);
    64	
    65		return action;
    66	}
    67	
    68	UnityGtkAction *unity_gtk_action_new_radio(const char *name)
    69	{
    70		UnityGtkAction *action = g_object_new(UNITY_GTK_TYPE_ACTION, NULL);
    71	
    72		unity_gtk_action_set_name(action, name);
    73		action->items_by_name =
    74		    g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_object_unref);
    75	
    76		return action;
    77	}
    78	
    79	void unity_gtk_action_set_name(UnityGtkAction *action, const char *name)
    80	{
    81		g_return_if_fail(UNITY_GTK_IS_ACTION(action));
    82	
    83		g_free(action->name);
    84		action->name = g_strdup(name);
    85	}
    86	
    87	void unity_gtk_action_set_subname(UnityGtkAction *action, const char *subname)
    88	{
    89		g_return_if_fail(UNITY_GTK_IS_ACTION(action));
    90	
    91		g_free(action->subname);
    92		action->subname = g_strdup(subname);
    93	}
    94	
    95	void unity_gtk_action_set_item(UnityGtkAction *action, UnityGtkMenuItem *item)
    96	{
    97		UnityGtkMenuItem *old_item;
    98	
    99		g_return_if_fail(UNITY_GTK_IS_ACTION(action));
   100	
   101		old_item = action->item;
   102	
   103		if (item != old_item)
   104		{
   105			if (old_item != NULL)
   106			{
   107				action->item = NULL;
   108				g_object_unref(old_item);
   109			}
   110	
   111			if (item != NULL)
   112				action->item = g_object_ref(item);
   113		}
   114	}
   115	
   116	void unity_gtk_action_print(UnityGtkAction *action, guint indent)
   117	{
   118		char *space;
   119	
   120		g_return_if_fail(action == NULL || UNITY_GTK_IS_ACTION(action));
   121	
   122		space = g_strnfill(indent, ' ');
   123	
   124		if (action != NULL)
   125		{
   126			g_print("%s(%s *) %p\n",
   127			        space,
   128			        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(action)),
   129			        action);
   130	
   131			if (action->name != NULL)
   132				g_print("%s  \"%s\"\n", space, action->name);
   133	
   134			if (action->subname != NULL)
   135				g_print("%s  \"%s\"\n", space, action->subname);
   136	
   137			if (action->item != NULL)
   138				g_print("%s  (%s *) %p\n",
   139				        space,
   140				        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(action->item)),
   141				        action->item);
   142	
   143			if (action->items_by_name != NULL)
   144			{
   145				GHashTableIter iter;
   146				gpointer key;
   147				gpointer value;
   148	
   149				g_hash_table_iter_init(&iter, action->items_by_name);
   150				while (g_hash_table_iter_next(&iter, &key, &value))
   151					g_print("%s  \"%s\" -> (%s *) %p\n",
   152					        space,
   153					        (const char *)key,
   154					        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(value)),
   155					        value);
   156			}
   157		}
   158		else
   159			g_print("%sNULL\n", space);
   160	
   161		g_free(space);
   162	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-action-group.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	/**
    21	 * SECTION:unity-gtk-action-group
    22	 * @short_description: Action group collector
    23	 * @include: unity-gtk-parser.h
    24	 *
    25	 * A #UnityGtkActionGroup is a #GActionGroup that accumulates the
    26	 * actions of multiple #UnityGtkMenuShell<!-- -->s into a single object.
    27	 * This can be used for purposes such as exporting actions over DBus
    28	 * with g_dbus_connection_export_action_group ().
    29	 */
    30	
    31	#include "unity-gtk-action-group-private.h"
    32	#include "unity-gtk-action-private.h"
    33	#include <gio/gio.h>
    34	
    35	static void unity_gtk_action_group_action_group_init(GActionGroupInterface *iface);
    36	
    37	G_DEFINE_TYPE_WITH_CODE(UnityGtkActionGroup, unity_gtk_action_group, G_TYPE_OBJECT,
    38	                        G_IMPLEMENT_INTERFACE(G_TYPE_ACTION_GROUP,
    39	                                              unity_gtk_action_group_action_group_init));
    40	
    41	static gboolean unity_gtk_action_group_debug;
    42	
    43	static gboolean g_signal_emit_hide(gpointer user_data)
    44	{
    45		g_signal_emit_by_name(user_data, "hide");
    46	
    47		return G_SOURCE_REMOVE;
    48	}
    49	
    50	static void unity_gtk_action_group_handle_group_action_added(GActionGroup *action_group,
    51	                                                             char *action_name, gpointer user_data)
    52	{
    53		UnityGtkActionGroup *group;
    54	
    55		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(user_data));
    56	
    57		group = UNITY_GTK_ACTION_GROUP(user_data);
    58	
    59		g_warn_if_fail(action_group == group->old_group);
    60	
    61		g_action_group_action_added(G_ACTION_GROUP(group), action_name);
    62	}
    63	
    64	static void unity_gtk_action_group_handle_group_action_removed(GActionGroup *action_group,
    65	                                                               char *action_name,
    66	                                                               gpointer user_data)
    67	{
    68		UnityGtkActionGroup *group;
    69	
    70		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(user_data));
    71	
    72		group = UNITY_GTK_ACTION_GROUP(user_data);
    73	
    74		g_warn_if_fail(action_group == group->old_group);
    75	
    76		g_action_group_action_removed(G_ACTION_GROUP(group), action_name);
    77	}
    78	
    79	static void unity_gtk_action_group_handle_group_action_enabled_changed(GActionGroup *action_group,
    80	                                                                       char *action_name,
    81	                                                                       gboolean enabled,
    82	                                                                       gpointer user_data)
    83	{
    84		UnityGtkActionGroup *group;
    85	
    86		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(user_data));
    87	
    88		group = UNITY_GTK_ACTION_GROUP(user_data);
    89	
    90		g_warn_if_fail(action_group == group->old_group);
    91	
    92		g_action_group_action_enabled_changed(G_ACTION_GROUP(group), action_name, enabled);
    93	}
    94	
    95	static void unity_gtk_action_group_handle_group_action_state_changed(GActionGroup *action_group,
    96	                                                                     char *action_name,
    97	                                                                     GVariant *value,
    98	                                                                     gpointer user_data)
    99	{
   100		UnityGtkActionGroup *group;
   101	
   102		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(user_data));
   103	
   104		group = UNITY_GTK_ACTION_GROUP(user_data);
   105	
   106		g_warn_if_fail(action_group == group->old_group);
   107	
   108		g_action_group_action_state_changed(G_ACTION_GROUP(group), action_name, value);
   109	}
   110	
   111	static void unity_gtk_action_group_set_old_group(UnityGtkActionGroup *group,
   112	                                                 GActionGroup *old_group)
   113	{
   114		GActionGroup *old_old_group;
   115	
   116		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(group));
   117	
   118		old_old_group = group->old_group;
   119	
   120		if (old_group != old_old_group)
   121		{
   122			if (old_old_group != NULL)
   123			{
   124				char **names;
   125	
   126				g_signal_handlers_disconnect_by_data(old_old_group, group);
   127	
   128				names            = g_action_group_list_actions(old_old_group);
   129				group->old_group = NULL;
   130				g_object_unref(old_old_group);
   131	
   132				if (names != NULL)
   133				{
   134					char **i;
   135	
   136					for (i = names; *i != NULL; i++)
   137						g_action_group_action_removed(G_ACTION_GROUP(group), *i);
   138	
   139					g_strfreev(names);
   140				}
   141			}
   142	
   143			if (old_group != NULL)
   144			{
   145				char **names = g_action_group_list_actions(old_group);
   146	
   147				group->old_group = g_object_ref(old_group);
   148				g_signal_connect(old_group,
   149				                 "action-added",
   150				                 G_CALLBACK(
   151				                     unity_gtk_action_group_handle_group_action_added),
   152				                 group);
   153				g_signal_connect(old_group,
   154				                 "action-removed",
   155				                 G_CALLBACK(
   156				                     unity_gtk_action_group_handle_group_action_removed),
   157				                 group);
   158				g_signal_connect(
   159				    old_group,
   160				    "action-enabled-changed",
   161				    G_CALLBACK(unity_gtk_action_group_handle_group_action_enabled_changed),
   162				    group);
   163				g_signal_connect(
   164				    old_group,
   165				    "action-state-changed",
   166				    G_CALLBACK(unity_gtk_action_group_handle_group_action_state_changed),
   167				    group);
   168	
   169				if (names != NULL)
   170				{
   171					char **i;
   172	
   173					for (i = names; *i != NULL; i++)
   174						g_action_group_action_added(G_ACTION_GROUP(group), *i);
   175	
   176					g_strfreev(names);
   177				}
   178			}
   179		}
   180	}
   181	
   182	static void unity_gtk_action_group_dispose(GObject *object)
   183	{
   184		UnityGtkActionGroup *group;
   185		GHashTable *actions_by_name;
   186		GHashTable *names_by_radio_menu_item;
   187	
   188		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(object));
   189	
   190		group                    = UNITY_GTK_ACTION_GROUP(object);
   191		actions_by_name          = group->actions_by_name;
   192		names_by_radio_menu_item = group->names_by_radio_menu_item;
   193	
   194		if (names_by_radio_menu_item != NULL)
   195		{
   196			group->names_by_radio_menu_item = NULL;
   197			g_hash_table_unref(names_by_radio_menu_item);
   198		}
   199	
   200		if (actions_by_name != NULL)
   201		{
   202			group->actions_by_name = NULL;
   203			g_hash_table_unref(actions_by_name);
   204		}
   205	
   206		unity_gtk_action_group_set_old_group(group, NULL);
   207	
   208		G_OBJECT_CLASS(unity_gtk_action_group_parent_class)->dispose(object);
   209	}
   210	
   211	static char **unity_gtk_action_group_list_actions(GActionGroup *action_group)
   212	{
   213		UnityGtkActionGroup *group;
   214	
   215		g_return_val_if_fail(UNITY_GTK_IS_ACTION_GROUP(action_group), NULL);
   216	
   217		group = UNITY_GTK_ACTION_GROUP(action_group);
   218	
   219		if (group->actions_by_name != NULL)
   220		{
   221			char **names;
   222			char **new_names;
   223			GHashTableIter iter;
   224			gpointer key;
   225			guint n;
   226			guint i;
   227	
   228			names     = NULL;
   229			new_names = NULL;
   230			n         = g_hash_table_size(group->actions_by_name);
   231	
   232			if (group->old_group != NULL)
   233			{
   234				char **old_names = g_action_group_list_actions(group->old_group);
   235	
   236				if (old_names != NULL)
   237				{
   238					for (i = 0; old_names[i] != NULL; i++)
   239						;
   240	
   241					names     = g_malloc_n(i + n + 1, sizeof(char *));
   242					new_names = names + i;
   243	
   244					for (i = 0; old_names[i] != NULL; i++)
   245						names[i] = old_names[i];
   246	
   247					g_free(old_names);
   248				}
   249				else
   250					g_warn_if_reached();
   251			}
   252	
   253			if (names == NULL)
   254				new_names = names = g_malloc_n(n + 1, sizeof(char *));
   255	
   256			g_hash_table_iter_init(&iter, group->actions_by_name);
   257			for (i = 0; i < n && g_hash_table_iter_next(&iter, &key, NULL); i++)
   258				new_names[i] = g_strdup(key);
   259	
   260			new_names[i] = NULL;
   261	
   262			return names;
   263		}
   264	
   265		g_warn_if_reached();
   266	
   267		return group->old_group != NULL ? g_action_group_list_actions(group->old_group) : NULL;
   268	}
   269	
   270	static void unity_gtk_action_group_really_change_action_state(GActionGroup *action_group,
   271	                                                              const char *name, GVariant *value)
   272	{
   273		UnityGtkActionGroup *group;
   274		GHashTable *actions_by_name;
   275	
   276		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(action_group));
   277	
   278		group           = UNITY_GTK_ACTION_GROUP(action_group);
   279		actions_by_name = group->actions_by_name;
   280	
   281		if (actions_by_name != NULL)
   282		{
   283			UnityGtkAction *action = g_hash_table_lookup(actions_by_name, name);
   284	
   285			if (action != NULL)
   286			{
   287				if (g_strcmp0(name, action->name) == 0)
   288				{
   289					if (action->items_by_name != NULL)
   290					{
   291						if (value != NULL)
   292						{
   293							const char *name;
   294							UnityGtkMenuItem *item;
   295	
   296							g_return_if_fail(
   297							    g_variant_is_of_type(value,
   298							                         G_VARIANT_TYPE_STRING));
   299	
   300							name = g_variant_get_string(value, NULL);
   301							item = g_hash_table_lookup(action->items_by_name,
   302							                           name);
   303	
   304							if (item == NULL ||
   305							    !unity_gtk_menu_item_is_check(item))
   306							{
   307								g_warn_if_reached();
   308	
   309								value = NULL;
   310							}
   311							else
   312								gtk_check_menu_item_set_active(
   313								    GTK_CHECK_MENU_ITEM(item->menu_item),
   314								    TRUE);
   315						}
   316	
   317						if (value == NULL)
   318						{
   319							GHashTableIter iter;
   320							gpointer value;
   321	
   322							g_hash_table_iter_init(&iter,
   323							                       action->items_by_name);
   324							while (g_hash_table_iter_next(&iter, NULL, &value))
   325							{
   326								UnityGtkMenuItem *item = value;
   327	
   328								if (unity_gtk_menu_item_is_check(item))
   329									gtk_check_menu_item_set_active(
   330									    GTK_CHECK_MENU_ITEM(
   331									        item->menu_item),
   332									    FALSE);
   333							}
   334						}
   335					}
   336					else if (action->item != NULL &&
   337					         unity_gtk_menu_item_is_check(action->item))
   338					{
   339						g_return_if_fail(
   340						    value != NULL &&
   341						    g_variant_is_of_type(value, G_VARIANT_TYPE_BOOLEAN));
   342	
   343						gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(
   344						                                   action->item->menu_item),
   345						                               g_variant_get_boolean(
   346						                                   value));
   347					}
   348					else
   349						g_warn_if_fail(value == NULL);
   350	
   351					return;
   352				}
   353				else if (g_strcmp0(name, action->subname) == 0)
   354				{
   355					GtkWidget *submenu;
   356	
   357					g_return_if_fail(
   358					    value != NULL &&
   359					    g_variant_is_of_type(value, G_VARIANT_TYPE_BOOLEAN));
   360					g_return_if_fail(action->item != NULL &&
   361					                 action->item->menu_item != NULL);
   362	
   363					submenu = gtk_menu_item_get_submenu(action->item->menu_item);
   364	
   365					g_return_if_fail(submenu != NULL);
   366	
   367					if (g_variant_get_boolean(value))
   368						g_signal_emit_by_name(submenu, "show");
   369					else
   370						g_idle_add_full(G_PRIORITY_DEFAULT_IDLE,
   371						                g_signal_emit_hide,
   372						                g_object_ref(submenu),
   373						                g_object_unref);
   374	
   375					return;
   376				}
   377				else
   378					g_warn_if_reached();
   379			}
   380			else
   381				g_warn_if_reached();
   382		}
   383		else
   384			g_warn_if_reached();
   385	
   386		if (group->old_group != NULL)
   387			g_action_group_change_action_state(group->old_group, name, value);
   388		else
   389			g_warn_if_reached();
   390	}
   391	
   392	static void unity_gtk_action_group_change_action_state(GActionGroup *action_group, const char *name,
   393	                                                       GVariant *value)
   394	{
   395		g_variant_ref_sink(value);
   396		unity_gtk_action_group_really_change_action_state(action_group, name, value);
   397		g_variant_unref(value);
   398	}
   399	
   400	static void unity_gtk_action_group_activate_action(GActionGroup *action_group, const char *name,
   401	                                                   GVariant *parameter)
   402	{
   403		UnityGtkActionGroup *group;
   404		GHashTable *actions_by_name;
   405	
   406		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(action_group));
   407	
   408		group           = UNITY_GTK_ACTION_GROUP(action_group);
   409		actions_by_name = group->actions_by_name;
   410	
   411		if (actions_by_name != NULL)
   412		{
   413			UnityGtkAction *action = g_hash_table_lookup(actions_by_name, name);
   414	
   415			if (action != NULL)
   416			{
   417				if (g_strcmp0(name, action->name) == 0)
   418				{
   419					if (action->items_by_name != NULL)
   420					{
   421						const char *name;
   422						UnityGtkMenuItem *item;
   423	
   424						g_return_if_fail(
   425						    parameter != NULL &&
   426						    g_variant_is_of_type(parameter, G_VARIANT_TYPE_STRING));
   427	
   428						name = g_variant_get_string(parameter, NULL);
   429						item = g_hash_table_lookup(action->items_by_name, name);
   430	
   431						if (item != NULL)
   432							unity_gtk_menu_item_activate(item);
   433	
   434						g_action_group_action_state_changed(G_ACTION_GROUP(group),
   435						                                    action->name,
   436						                                    parameter);
   437					}
   438					else if (action->item != NULL)
   439					{
   440						if (unity_gtk_menu_item_get_draw_as_radio(action->item))
   441							g_warn_if_fail(
   442							    g_variant_is_of_type(parameter,
   443							                         G_VARIANT_TYPE_STRING));
   444						else
   445							g_warn_if_fail(parameter == NULL);
   446	
   447						unity_gtk_menu_item_activate(action->item);
   448					}
   449	
   450					return;
   451				}
   452				else
   453					g_warn_if_reached();
   454			}
   455			else
   456				g_warn_if_reached();
   457		}
   458		else
   459			g_warn_if_reached();
   460	
   461		if (group->old_group != NULL)
   462			g_action_group_activate_action(group->old_group, name, parameter);
   463		else
   464			g_warn_if_reached();
   465	}
   466	
   467	static gboolean unity_gtk_action_group_query_action(GActionGroup *action_group, const char *name,
   468	                                                    gboolean *enabled,
   469	                                                    const GVariantType **parameter_type,
   470	                                                    const GVariantType **state_type,
   471	                                                    GVariant **state_hint, GVariant **state)
   472	{
   473		UnityGtkActionGroup *group;
   474		GHashTable *actions_by_name;
   475	
   476		g_return_val_if_fail(UNITY_GTK_IS_ACTION_GROUP(action_group), FALSE);
   477	
   478		group           = UNITY_GTK_ACTION_GROUP(action_group);
   479		actions_by_name = group->actions_by_name;
   480	
   481		if (actions_by_name != NULL)
   482		{
   483			UnityGtkAction *action = g_hash_table_lookup(actions_by_name, name);
   484	
   485			if (action != NULL)
   486			{
   487				if (g_strcmp0(name, action->name) == 0)
   488				{
   489					if (enabled != NULL)
   490					{
   491						if (action->items_by_name != NULL)
   492						{
   493							GHashTableIter iter;
   494							gpointer value;
   495	
   496							*enabled = FALSE;
   497	
   498							g_hash_table_iter_init(&iter,
   499							                       action->items_by_name);
   500							while (!*enabled &&
   501							       g_hash_table_iter_next(&iter, NULL, &value))
   502								*enabled =
   503								    unity_gtk_menu_item_is_sensitive(value);
   504						}
   505						else
   506							*enabled =
   507							    action->item != NULL &&
   508							    unity_gtk_menu_item_is_sensitive(action->item);
   509					}
   510	
   511					if (parameter_type != NULL)
   512					{
   513						if (action->items_by_name != NULL ||
   514						    (action->item != NULL &&
   515						     unity_gtk_menu_item_get_draw_as_radio(action->item)))
   516							*parameter_type = G_VARIANT_TYPE_STRING;
   517						else
   518							*parameter_type = NULL;
   519					}
   520	
   521					if (state_type != NULL)
   522					{
   523						if (action->items_by_name != NULL ||
   524						    (action->item != NULL &&
   525						     unity_gtk_menu_item_get_draw_as_radio(action->item)))
   526							*state_type = G_VARIANT_TYPE_STRING;
   527						else if (action->item != NULL &&
   528						         unity_gtk_menu_item_is_check(action->item))
   529							*state_type = G_VARIANT_TYPE_BOOLEAN;
   530						else
   531							*state_type = NULL;
   532					}
   533	
   534					if (state_hint != NULL)
   535					{
   536						if (action->items_by_name != NULL)
   537						{
   538							GVariantBuilder builder;
   539							GHashTableIter iter;
   540							gpointer key;
   541	
   542							g_variant_builder_init(&builder,
   543							                       G_VARIANT_TYPE_ARRAY);
   544	
   545							g_hash_table_iter_init(&iter,
   546							                       action->items_by_name);
   547							while (g_hash_table_iter_next(&iter, &key, NULL))
   548								g_variant_builder_add(&builder, "s", key);
   549	
   550							*state_hint = g_variant_ref_sink(
   551							    g_variant_builder_end(&builder));
   552						}
   553						else if (action->item != NULL &&
   554						         unity_gtk_menu_item_is_check(action->item))
   555						{
   556							GVariantBuilder builder;
   557	
   558							if (unity_gtk_menu_item_get_draw_as_radio(
   559							        action->item))
   560							{
   561								g_variant_builder_init(
   562								    &builder, G_VARIANT_TYPE_ARRAY);
   563								g_variant_builder_add(&builder,
   564								                      "s",
   565								                      action->name);
   566								*state_hint = g_variant_ref_sink(
   567								    g_variant_builder_end(&builder));
   568							}
   569							else
   570							{
   571								g_variant_builder_init(
   572								    &builder, G_VARIANT_TYPE_TUPLE);
   573								g_variant_builder_add(&builder, "b", FALSE);
   574								g_variant_builder_add(&builder, "b", TRUE);
   575								*state_hint = g_variant_ref_sink(
   576								    g_variant_builder_end(&builder));
   577							}
   578						}
   579						else
   580							*state_hint = NULL;
   581					}
   582	
   583					if (state != NULL)
   584					{
   585						if (action->items_by_name != NULL)
   586						{
   587							GHashTableIter iter;
   588							gpointer key;
   589							gpointer value;
   590	
   591							*state = NULL;
   592	
   593							g_hash_table_iter_init(&iter,
   594							                       action->items_by_name);
   595							while (*state == NULL &&
   596							       g_hash_table_iter_next(&iter, &key, &value))
   597								if (unity_gtk_menu_item_is_active(value))
   598									*state = g_variant_ref_sink(
   599									    g_variant_new_string(key));
   600						}
   601						else if (action->item != NULL &&
   602						         unity_gtk_menu_item_is_check(action->item))
   603						{
   604							if (unity_gtk_menu_item_get_draw_as_radio(
   605							        action->item))
   606							{
   607								if (unity_gtk_menu_item_is_active(
   608								        action->item))
   609									*state = g_variant_ref_sink(
   610									    g_variant_new_string(
   611									        action->name));
   612								else
   613									*state = g_variant_ref_sink(
   614									    g_variant_new_string(""));
   615							}
   616							else
   617								*state = g_variant_ref_sink(
   618								    g_variant_new_boolean(
   619								        unity_gtk_menu_item_is_active(
   620								            action->item)));
   621						}
   622						else
   623							*state = NULL;
   624					}
   625	
   626					return TRUE;
   627				}
   628				else if (g_strcmp0(name, action->subname) == 0)
   629				{
   630					if (enabled != NULL)
   631						*enabled = TRUE;
   632	
   633					if (parameter_type != NULL)
   634						*parameter_type = NULL;
   635	
   636					if (state_type != NULL)
   637						*state_type = G_VARIANT_TYPE_BOOLEAN;
   638	
   639					if (state_hint != NULL)
   640					{
   641						GVariantBuilder builder;
   642	
   643						g_variant_builder_init(&builder, G_VARIANT_TYPE_TUPLE);
   644						g_variant_builder_add(&builder, "b", FALSE);
   645						g_variant_builder_add(&builder, "b", TRUE);
   646						*state_hint =
   647						    g_variant_ref_sink(g_variant_builder_end(&builder));
   648					}
   649	
   650					if (state != NULL)
   651						*state = g_variant_ref_sink(g_variant_new_boolean(TRUE));
   652	
   653					return TRUE;
   654				}
   655				else
   656					g_warn_if_reached();
   657			}
   658		}
   659		else
   660			g_warn_if_reached();
   661	
   662		if (group->old_group != NULL)
   663			return g_action_group_query_action(group->old_group,
   664			                                   name,
   665			                                   enabled,
   666			                                   parameter_type,
   667			                                   state_type,
   668			                                   state_hint,
   669			                                   state);
   670	
   671		g_warn_if_reached();
   672	
   673		return FALSE;
   674	}
   675	
   676	static void unity_gtk_action_group_class_init(UnityGtkActionGroupClass *klass)
   677	{
   678		GObjectClass *object_class = G_OBJECT_CLASS(klass);
   679	
   680		object_class->dispose = unity_gtk_action_group_dispose;
   681	}
   682	
   683	static void unity_gtk_action_group_action_group_init(GActionGroupInterface *iface)
   684	{
   685		iface->list_actions        = unity_gtk_action_group_list_actions;
   686		iface->change_action_state = unity_gtk_action_group_change_action_state;
   687		iface->activate_action     = unity_gtk_action_group_activate_action;
   688		iface->query_action        = unity_gtk_action_group_query_action;
   689	}
   690	
   691	static void unity_gtk_action_group_init(UnityGtkActionGroup *self)
   692	{
   693		self->actions_by_name =
   694		    g_hash_table_new_full(g_str_hash, g_str_equal, NULL, g_object_unref);
   695		self->names_by_radio_menu_item =
   696		    g_hash_table_new_full(g_direct_hash, g_direct_equal, NULL, g_free);
   697	}
   698	
   699	/**
   700	 * unity_gtk_action_group_new:
   701	 * @old_group: a fallback #GActionGroup.
   702	 *
   703	 * Creates a new #UnityGtkMenuShell based on the contents of the given
   704	 * @menu_shell. Any subsequent changes to @menu_shell are reflected in
   705	 * the returned #UnityGtkMenuShell.
   706	 *
   707	 * Actions not found in an attached #UnityGtkMenuShell are queried in
   708	 * @old_group before failing.
   709	 *
   710	 * Returns: a new #UnityGtkActionGroup.
   711	 */
   712	UnityGtkActionGroup *unity_gtk_action_group_new(GActionGroup *old_group)
   713	{
   714		UnityGtkActionGroup *group = g_object_new(UNITY_GTK_TYPE_ACTION_GROUP, NULL);
   715	
   716		unity_gtk_action_group_set_old_group(group, old_group);
   717	
   718		return group;
   719	}
   720	
   721	static char *g_strdup_normalize(const char *str)
   722	{
   723		char *string = NULL;
   724	
   725		if (str != NULL)
   726		{
   727			guint i = 0;
   728			guint j;
   729	
   730			string = g_strdup(str);
   731	
   732			for (j = 0; str[j] != '\0'; j++)
   733			{
   734				if (g_ascii_isalnum(str[j]))
   735					string[i++] = str[j];
   736				else
   737					string[i++] = '-';
   738			}
   739	
   740			string[i] = '\0';
   741		}
   742	
   743		return string;
   744	}
   745	
   746	static char *unity_gtk_action_group_get_action_name(UnityGtkActionGroup *group,
   747	                                                    UnityGtkMenuItem *item)
   748	{
   749		GtkMenuItem *menu_item;
   750		const char *name;
   751		char *normalized_name;
   752		GHashTable *actions_by_name;
   753		GActionGroup *old_group;
   754	
   755		g_return_val_if_fail(UNITY_GTK_IS_ACTION_GROUP(group), NULL);
   756		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), NULL);
   757	
   758		menu_item = item->menu_item;
   759	
   760		g_return_val_if_fail(menu_item != NULL, NULL);
   761	
   762		if (GTK_IS_RADIO_MENU_ITEM(menu_item))
   763		{
   764			GtkRadioMenuItem *radio_menu_item = GTK_RADIO_MENU_ITEM(menu_item);
   765			GSList *iter = g_slist_last(gtk_radio_menu_item_get_group(radio_menu_item));
   766	
   767			if (iter != NULL)
   768				menu_item = iter->data;
   769		}
   770	
   771		name = NULL;
   772	#if !GTK_CHECK_VERSION(3, 10, 0)
   773		GtkAction *action = gtk_activatable_get_related_action(GTK_ACTIVATABLE(menu_item));
   774	
   775		if (action != NULL)
   776			name = gtk_action_get_name(action);
   777	#endif
   778		if (name == NULL || name[0] == '\0')
   779			name = gtk_menu_item_get_label(menu_item);
   780	
   781		if (name == NULL || name[0] == '\0')
   782			name = gtk_menu_item_get_nth_label_label(menu_item, 0);
   783	
   784		if (name != NULL && name[0] == '\0')
   785			name = NULL;
   786	
   787		normalized_name = g_strdup_normalize(name);
   788		actions_by_name = group->actions_by_name;
   789		old_group       = group->old_group;
   790	
   791		if (normalized_name == NULL ||
   792		    (actions_by_name != NULL && g_hash_table_contains(actions_by_name, normalized_name)) ||
   793		    (old_group != NULL && g_action_group_has_action(old_group, normalized_name)))
   794		{
   795			char *next_normalized_name = NULL;
   796			guint i                    = 0;
   797	
   798			do
   799			{
   800				g_free(next_normalized_name);
   801	
   802				if (normalized_name != NULL)
   803					next_normalized_name =
   804					    g_strdup_printf("%s-%u", normalized_name, i++);
   805				else
   806					next_normalized_name = g_strdup_printf("%u", i++);
   807			} while ((actions_by_name != NULL &&
   808			          g_hash_table_contains(actions_by_name, next_normalized_name)) ||
   809			         (old_group != NULL &&
   810			          g_action_group_has_action(old_group, next_normalized_name)));
   811	
   812			g_free(normalized_name);
   813			normalized_name = next_normalized_name;
   814		}
   815	
   816		return normalized_name;
   817	}
   818	
   819	static char *unity_gtk_action_group_get_state_name(UnityGtkActionGroup *group,
   820	                                                   UnityGtkMenuItem *item)
   821	{
   822		char *name = NULL;
   823	
   824		g_return_val_if_fail(UNITY_GTK_IS_ACTION_GROUP(group), NULL);
   825		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), NULL);
   826	
   827		if (unity_gtk_menu_item_is_radio(item))
   828		{
   829			const char *label = unity_gtk_menu_item_get_label(item);
   830	
   831			if (label != NULL && label[0] != '\0')
   832			{
   833				char *normalized_label = g_strdup_normalize(label);
   834				UnityGtkAction *action = item->action;
   835	
   836				if (action != NULL)
   837				{
   838					if (action->items_by_name != NULL)
   839					{
   840						if (g_hash_table_contains(action->items_by_name,
   841						                          normalized_label))
   842						{
   843							guint i = 0;
   844	
   845							do
   846							{
   847								g_free(name);
   848								name = g_strdup_printf("%s-%u",
   849								                       normalized_label,
   850								                       i++);
   851							} while (
   852							    g_hash_table_contains(action->items_by_name,
   853							                          name));
   854	
   855							g_free(normalized_label);
   856						}
   857						else
   858							name = normalized_label;
   859					}
   860					else
   861					{
   862						g_warn_if_reached();
   863						name = normalized_label;
   864					}
   865				}
   866				else
   867					name = normalized_label;
   868			}
   869	#if !GTK_CHECK_VERSION(3, 10, 0)
   870			else
   871			{
   872				GtkActivatable *activatable = GTK_ACTIVATABLE(item->menu_item);
   873				GtkAction *action = gtk_activatable_get_related_action(activatable);
   874	
   875				if (action != NULL)
   876				{
   877					GtkRadioAction *radio_action = GTK_RADIO_ACTION(action);
   878					const char *action_name      = gtk_action_get_name(action);
   879					char *normalized_action_name = NULL;
   880					gint value;
   881	
   882					g_object_get(radio_action, "value", &value, NULL);
   883	
   884					if (action_name != NULL && action_name[0] != '\0')
   885						normalized_action_name = g_strdup_normalize(action_name);
   886	
   887					if (normalized_action_name != NULL)
   888					{
   889						if (normalized_action_name[0] != '\0')
   890							name = g_strdup_printf("%s-%d",
   891							                       normalized_action_name,
   892							                       value);
   893						else
   894							name = g_strdup_printf("%d", value);
   895	
   896						g_free(normalized_action_name);
   897					}
   898					else
   899						name = g_strdup_printf("%d", value);
   900	
   901					if (item->action != NULL)
   902					{
   903						GHashTable *items_by_name = item->action->items_by_name;
   904	
   905						if (items_by_name != NULL &&
   906						    g_hash_table_contains(items_by_name, name))
   907						{
   908							char *next_name = NULL;
   909							guint i         = 0;
   910	
   911							do
   912							{
   913								g_free(next_name);
   914								next_name =
   915								    g_strdup_printf("%s-%u", name, i++);
   916							} while (g_hash_table_contains(items_by_name,
   917							                               next_name));
   918	
   919							g_free(name);
   920							name = next_name;
   921						}
   922					}
   923				}
   924			}
   925	#endif
   926	
   927			if (name == NULL)
   928			{
   929				/*
   930				 * We tried to find a good name for this radio menu item state, but
   931				 * the application wasn't nice enough to give us one, either by label
   932				 * or by action. So we have to pick a bad name which is unique for
   933				 * any given UnityGtkMenuItem.
   934				 */
   935	
   936				name = g_strdup_printf("%p", item);
   937			}
   938		}
   939	
   940		return name;
   941	}
   942	
   943	void unity_gtk_action_group_connect_item(UnityGtkActionGroup *group, UnityGtkMenuItem *item)
   944	{
   945		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(group));
   946		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   947	
   948		if (item->parent_shell != NULL &&
   949		    (item->parent_shell->action_group != group || item->action == NULL))
   950		{
   951			UnityGtkAction *new_action = NULL;
   952			UnityGtkAction *action     = NULL;
   953	
   954			if (item->action != NULL)
   955			{
   956				if (item->parent_shell->action_group != NULL)
   957					unity_gtk_action_group_disconnect_item(item->parent_shell
   958					                                           ->action_group,
   959					                                       item);
   960				else
   961					unity_gtk_menu_item_set_action(item, NULL);
   962			}
   963	
   964			if (unity_gtk_menu_item_is_radio(item))
   965			{
   966				GtkRadioMenuItem *radio_menu_item = GTK_RADIO_MENU_ITEM(item->menu_item);
   967				const char *action_name;
   968				char *state_name;
   969	
   970				g_return_if_fail(group->actions_by_name != NULL);
   971				g_return_if_fail(group->names_by_radio_menu_item != NULL);
   972	
   973				action_name =
   974				    g_hash_table_lookup(group->names_by_radio_menu_item, radio_menu_item);
   975	
   976				if (action_name == NULL)
   977				{
   978					GtkRadioMenuItem *last_radio_menu_item = NULL;
   979					GSList *iter = gtk_radio_menu_item_get_group(radio_menu_item);
   980	
   981					while (action_name == NULL && iter != NULL)
   982					{
   983						last_radio_menu_item = iter->data;
   984						action_name =
   985						    g_hash_table_lookup(group->names_by_radio_menu_item,
   986						                        last_radio_menu_item);
   987						iter = g_slist_next(iter);
   988					}
   989	
   990					if (action_name == NULL)
   991					{
   992						char *new_action_name =
   993						    unity_gtk_action_group_get_action_name(group, item);
   994	
   995						g_hash_table_insert(group->names_by_radio_menu_item,
   996						                    radio_menu_item,
   997						                    new_action_name);
   998	
   999						if (last_radio_menu_item != NULL &&
  1000						    last_radio_menu_item != radio_menu_item)
  1001							g_hash_table_insert(group->names_by_radio_menu_item,
  1002							                    last_radio_menu_item,
  1003							                    g_strdup(new_action_name));
  1004	
  1005						action_name = new_action_name;
  1006					}
  1007					else
  1008						g_hash_table_insert(group->names_by_radio_menu_item,
  1009						                    radio_menu_item,
  1010						                    g_strdup(action_name));
  1011				}
  1012	
  1013				action = g_hash_table_lookup(group->actions_by_name, action_name);
  1014	
  1015				if (action == NULL)
  1016					action = new_action = unity_gtk_action_new_radio(action_name);
  1017	
  1018				state_name = unity_gtk_action_group_get_state_name(group, item);
  1019				g_hash_table_insert(action->items_by_name, state_name, g_object_ref(item));
  1020			}
  1021			else if (!unity_gtk_menu_item_is_separator(item))
  1022			{
  1023				char *name = unity_gtk_action_group_get_action_name(group, item);
  1024				action = new_action = unity_gtk_action_new(name, item);
  1025				g_free(name);
  1026			}
  1027	
  1028			unity_gtk_menu_item_set_action(item, action);
  1029	
  1030			if (new_action != NULL)
  1031			{
  1032				if (group->actions_by_name != NULL)
  1033					g_hash_table_insert(group->actions_by_name,
  1034					                    new_action->name,
  1035					                    new_action);
  1036				else
  1037					g_warn_if_reached();
  1038	
  1039				g_action_group_action_added(G_ACTION_GROUP(group), new_action->name);
  1040	
  1041				/* Add a new submenu action so we can detect opening and closing. */
  1042				if (item->menu_item != NULL &&
  1043				    gtk_menu_item_get_submenu(item->menu_item) != NULL)
  1044				{
  1045					char *subname = unity_gtk_action_group_get_action_name(group, item);
  1046					unity_gtk_action_set_subname(new_action, subname);
  1047					g_free(subname);
  1048	
  1049					if (group->actions_by_name != NULL)
  1050						g_hash_table_insert(group->actions_by_name,
  1051						                    new_action->subname,
  1052						                    g_object_ref(new_action));
  1053					else
  1054						g_warn_if_reached();
  1055	
  1056					g_action_group_action_added(G_ACTION_GROUP(group),
  1057					                            new_action->subname);
  1058				}
  1059			}
  1060		}
  1061	}
  1062	
  1063	void unity_gtk_action_group_disconnect_item(UnityGtkActionGroup *group, UnityGtkMenuItem *item)
  1064	{
  1065		UnityGtkAction *action;
  1066	
  1067		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(group));
  1068		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
  1069		g_warn_if_fail(item->parent_shell != NULL);
  1070	
  1071		action = item->action;
  1072	
  1073		if (action != NULL)
  1074		{
  1075			if (action->items_by_name != NULL)
  1076			{
  1077				if (group->names_by_radio_menu_item != NULL)
  1078				{
  1079					const char *name = NULL;
  1080					GHashTableIter iter;
  1081					gpointer key;
  1082					gpointer value;
  1083	
  1084					g_hash_table_iter_init(&iter, action->items_by_name);
  1085					while (name == NULL && g_hash_table_iter_next(&iter, &key, &value))
  1086						if (value == item)
  1087							name = key;
  1088	
  1089					if (name != NULL)
  1090					{
  1091						g_hash_table_remove(action->items_by_name, name);
  1092	
  1093						if (group->names_by_radio_menu_item != NULL)
  1094							g_hash_table_remove(group->names_by_radio_menu_item,
  1095							                    item->menu_item);
  1096						else
  1097							g_warn_if_reached();
  1098	
  1099						if (g_hash_table_size(action->items_by_name) == 0)
  1100						{
  1101							/* Remove the submenu action used to detect opening
  1102							 * and closing. */
  1103							if (action->subname != NULL)
  1104							{
  1105								if (group->actions_by_name != NULL)
  1106									g_hash_table_remove(
  1107									    group->actions_by_name,
  1108									    action->subname);
  1109								else
  1110									g_warn_if_reached();
  1111	
  1112								g_action_group_action_removed(
  1113								    G_ACTION_GROUP(group), action->subname);
  1114							}
  1115	
  1116							if (group->actions_by_name != NULL)
  1117								g_hash_table_remove(group->actions_by_name,
  1118								                    action->name);
  1119							else
  1120								g_warn_if_reached();
  1121	
  1122							g_action_group_action_removed(G_ACTION_GROUP(group),
  1123							                              action->name);
  1124						}
  1125					}
  1126					else
  1127						g_warn_if_reached();
  1128				}
  1129				else
  1130					g_warn_if_reached();
  1131			}
  1132			else
  1133			{
  1134				/* Remove the submenu action used to detect opening and closing. */
  1135				if (action->subname != NULL)
  1136				{
  1137					if (group->actions_by_name != NULL)
  1138						g_hash_table_remove(group->actions_by_name,
  1139						                    action->subname);
  1140					else
  1141						g_warn_if_reached();
  1142	
  1143					g_action_group_action_removed(G_ACTION_GROUP(group),
  1144					                              action->subname);
  1145				}
  1146	
  1147				if (group->actions_by_name != NULL)
  1148					g_hash_table_remove(group->actions_by_name, action->name);
  1149				else
  1150					g_warn_if_reached();
  1151	
  1152				g_action_group_action_removed(G_ACTION_GROUP(group), action->name);
  1153			}
  1154		}
  1155	
  1156		unity_gtk_menu_item_set_action(item, NULL);
  1157	}
  1158	
  1159	/**
  1160	 * unity_gtk_action_group_connect_shell:
  1161	 * @group: a #UnityGtkActionGroup.
  1162	 * @shell: a #UnityGtkMenuShell.
  1163	 *
  1164	 * Creates actions for all menu items in @shell and adds them to @group.
  1165	 * Subsequent changes to @shell also affect @group.
  1166	 */
  1167	void unity_gtk_action_group_connect_shell(UnityGtkActionGroup *group, UnityGtkMenuShell *shell)
  1168	{
  1169		GSequence *visible_indices;
  1170	
  1171		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(group));
  1172		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
  1173	
  1174		visible_indices = shell->visible_indices;
  1175	
  1176		if (shell->action_group != NULL && shell->action_group != group)
  1177			unity_gtk_action_group_disconnect_shell(shell->action_group, shell);
  1178	
  1179		if (visible_indices != NULL)
  1180		{
  1181			GSequenceIter *iter = g_sequence_get_begin_iter(visible_indices);
  1182	
  1183			while (!g_sequence_iter_is_end(iter))
  1184			{
  1185				guint i                = GPOINTER_TO_UINT(g_sequence_get(iter));
  1186				UnityGtkMenuItem *item = g_ptr_array_index(shell->items, i);
  1187	
  1188				unity_gtk_action_group_connect_item(group, item);
  1189	
  1190				if (item->child_shell != NULL)
  1191				{
  1192					if (item->child_shell_valid)
  1193						unity_gtk_action_group_connect_shell(group,
  1194						                                     item->child_shell);
  1195					else
  1196						g_warn_if_reached();
  1197				}
  1198	
  1199				iter = g_sequence_iter_next(iter);
  1200			}
  1201		}
  1202	
  1203		if (shell->action_group == NULL)
  1204			shell->action_group = g_object_ref(group);
  1205	}
  1206	
  1207	/**
  1208	 * unity_gtk_action_group_disconnect_shell:
  1209	 * @group: a #UnityGtkActionGroup.
  1210	 * @shell: a #UnityGtkMenuShell.
  1211	 *
  1212	 * Removes the actions for @shell from @group.
  1213	 */
  1214	void unity_gtk_action_group_disconnect_shell(UnityGtkActionGroup *group, UnityGtkMenuShell *shell)
  1215	{
  1216		UnityGtkActionGroup *action_group;
  1217		GSequence *visible_indices;
  1218	
  1219		g_return_if_fail(UNITY_GTK_IS_ACTION_GROUP(group));
  1220		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
  1221		g_warn_if_fail(shell->action_group == NULL || shell->action_group == group);
  1222	
  1223		visible_indices = shell->visible_indices;
  1224	
  1225		if (visible_indices != NULL)
  1226		{
  1227			GSequenceIter *iter = g_sequence_get_begin_iter(visible_indices);
  1228	
  1229			while (!g_sequence_iter_is_end(iter))
  1230			{
  1231				guint i                = GPOINTER_TO_UINT(g_sequence_get(iter));
  1232				UnityGtkMenuItem *item = g_ptr_array_index(shell->items, i);
  1233	
  1234				unity_gtk_action_group_disconnect_item(group, item);
  1235	
  1236				if (item->child_shell != NULL)
  1237				{
  1238					if (item->child_shell_valid)
  1239						unity_gtk_action_group_disconnect_shell(group,
  1240						                                        item->child_shell);
  1241					else
  1242						g_warn_if_reached();
  1243				}
  1244	
  1245				iter = g_sequence_iter_next(iter);
  1246			}
  1247		}
  1248	
  1249		action_group = shell->action_group;
  1250	
  1251		if (action_group != NULL)
  1252		{
  1253			shell->action_group = NULL;
  1254			g_object_unref(action_group);
  1255		}
  1256	}
  1257	
  1258	void unity_gtk_action_group_print(UnityGtkActionGroup *group, guint indent)
  1259	{
  1260		char *space;
  1261	
  1262		g_return_if_fail(group == NULL || UNITY_GTK_IS_ACTION_GROUP(group));
  1263	
  1264		space = g_strnfill(indent, ' ');
  1265	
  1266		if (group != NULL)
  1267		{
  1268			g_print("%s(%s *) %p\n",
  1269			        space,
  1270			        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(group)),
  1271			        group);
  1272	
  1273			if (group->actions_by_name != NULL)
  1274			{
  1275				GHashTableIter iter;
  1276				gpointer key;
  1277				gpointer value;
  1278	
  1279				g_hash_table_iter_init(&iter, group->actions_by_name);
  1280				while (g_hash_table_iter_next(&iter, &key, &value))
  1281				{
  1282					g_print("%s  \"%s\" ->\n", space, (const char *)key);
  1283					unity_gtk_action_print(value, indent + 4);
  1284				}
  1285			}
  1286	
  1287			if (group->names_by_radio_menu_item != NULL)
  1288			{
  1289				GHashTableIter iter;
  1290				gpointer key;
  1291				gpointer value;
  1292	
  1293				g_hash_table_iter_init(&iter, group->names_by_radio_menu_item);
  1294				while (g_hash_table_iter_next(&iter, &key, &value))
  1295					g_print("%s  (%s *) %p -> \"%s\"\n",
  1296					        space,
  1297					        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(key)),
  1298					        key,
  1299					        (const char *)value);
  1300			}
  1301		}
  1302		else
  1303			g_print("%sNULL\n", space);
  1304	
  1305		g_free(space);
  1306	}
  1307	
  1308	gboolean unity_gtk_action_group_is_debug(void)
  1309	{
  1310		return unity_gtk_action_group_debug;
  1311	}
  1312	
  1313	/**
  1314	 * unity_gtk_action_group_set_debug:
  1315	 * @debug: #TRUE to enable debugging output
  1316	 *
  1317	 * Sets if action group changes should be logged using g_print ().
  1318	 */
  1319	void unity_gtk_action_group_set_debug(gboolean debug)
  1320	{
  1321		unity_gtk_action_group_debug = debug;
  1322	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-action-group-private.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#ifndef __UNITY_GTK_ACTION_GROUP_PRIVATE_H__
    21	#define __UNITY_GTK_ACTION_GROUP_PRIVATE_H__
    22	
    23	#include "appmenu-gtk-action-group.h"
    24	#include "unity-gtk-menu-item-private.h"
    25	#include <glib.h>
    26	
    27	G_BEGIN_DECLS
    28	
    29	void unity_gtk_action_group_connect_item(UnityGtkActionGroup *group,
    30	                                         UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    31	
    32	void unity_gtk_action_group_disconnect_item(UnityGtkActionGroup *group,
    33	                                            UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    34	
    35	void unity_gtk_action_group_print(UnityGtkActionGroup *group, guint indent) G_GNUC_INTERNAL;
    36	
    37	gboolean unity_gtk_action_group_is_debug(void) G_GNUC_INTERNAL;
    38	
    39	G_END_DECLS
    40	
    41	#endif /* __UNITY_GTK_ACTION_GROUP_PRIVATE_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-action-private.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#ifndef __UNITY_GTK_ACTION_PRIVATE_H__
    21	#define __UNITY_GTK_ACTION_PRIVATE_H__
    22	
    23	#include <glib-object.h>
    24	
    25	G_BEGIN_DECLS
    26	
    27	#define UNITY_GTK_TYPE_ACTION (unity_gtk_action_get_type())
    28	G_DECLARE_FINAL_TYPE(UnityGtkAction, unity_gtk_action, UNITY_GTK, ACTION, GObject)
    29	
    30	G_END_DECLS
    31	
    32	#include "unity-gtk-menu-item-private.h"
    33	
    34	G_BEGIN_DECLS
    35	
    36	struct _UnityGtkAction
    37	{
    38		GObject parent_instance;
    39	
    40		/*< private >*/
    41		char *name;
    42		char *subname;
    43		UnityGtkMenuItem *item;
    44		GHashTable *items_by_name;
    45	};
    46	
    47	GType unity_gtk_action_get_type(void) G_GNUC_INTERNAL;
    48	
    49	UnityGtkAction *unity_gtk_action_new(const char *name, UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    50	
    51	UnityGtkAction *unity_gtk_action_new_radio(const char *name) G_GNUC_INTERNAL;
    52	
    53	void unity_gtk_action_set_name(UnityGtkAction *action, const char *name) G_GNUC_INTERNAL;
    54	
    55	void unity_gtk_action_set_subname(UnityGtkAction *action, const char *subname) G_GNUC_INTERNAL;
    56	
    57	void unity_gtk_action_set_item(UnityGtkAction *action, UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    58	
    59	void unity_gtk_action_print(UnityGtkAction *action, guint indent) G_GNUC_INTERNAL;
    60	
    61	G_END_DECLS
    62	
    63	#endif /* __UNITY_GTK_ACTION_PRIVATE_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-menu-item.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#include "unity-gtk-action-group-private.h"
    21	#include "unity-gtk-menu-item-private.h"
    22	#include <string.h>
    23	
    24	G_DEFINE_TYPE(UnityGtkMenuItem, unity_gtk_menu_item, G_TYPE_OBJECT);
    25	
    26	typedef struct _UnityGtkSearch UnityGtkSearch;
    27	
    28	struct _UnityGtkSearch
    29	{
    30		GType type;
    31		guint index;
    32		GObject *object;
    33	};
    34	
    35	static void g_object_get_nth_object(GObject *object, gpointer data)
    36	{
    37		UnityGtkSearch *search = data;
    38	
    39		g_return_if_fail(G_IS_OBJECT(object));
    40	
    41		if (search->object == NULL)
    42		{
    43			if (g_type_is_a(G_OBJECT_TYPE(object), search->type))
    44			{
    45				if (search->index == 0)
    46					search->object = object;
    47				else
    48					search->index--;
    49			}
    50	
    51			if (search->object == NULL && GTK_IS_CONTAINER(object))
    52				gtk_container_forall(GTK_CONTAINER(object),
    53				                     (GtkCallback)g_object_get_nth_object,
    54				                     data);
    55		}
    56	}
    57	
    58	GtkLabel *gtk_menu_item_get_nth_label(GtkMenuItem *menu_item, guint index)
    59	{
    60		UnityGtkSearch search;
    61	
    62		g_return_val_if_fail(GTK_IS_MENU_ITEM(menu_item), NULL);
    63	
    64		search.type   = GTK_TYPE_LABEL;
    65		search.index  = index;
    66		search.object = NULL;
    67	
    68		g_object_get_nth_object(G_OBJECT(menu_item), &search);
    69	
    70		return search.object != NULL ? GTK_LABEL(search.object) : NULL;
    71	}
    72	
    73	const char *gtk_menu_item_get_nth_label_label(GtkMenuItem *menu_item, guint index)
    74	{
    75		GtkLabel *label;
    76		const char *label_label;
    77	
    78		g_return_val_if_fail(GTK_IS_MENU_ITEM(menu_item), NULL);
    79	
    80		label       = gtk_menu_item_get_nth_label(menu_item, index);
    81		label_label = NULL;
    82	
    83		if (label != NULL)
    84			label_label = gtk_label_get_label(label);
    85	
    86		return label_label != NULL && label_label[0] != '\0' ? label_label : NULL;
    87	}
    88	
    89	static GtkImage *gtk_menu_item_get_nth_image(GtkMenuItem *menu_item, guint index)
    90	{
    91		UnityGtkSearch search;
    92	
    93		g_return_val_if_fail(GTK_IS_MENU_ITEM(menu_item), NULL);
    94	
    95		search.type   = GTK_TYPE_IMAGE;
    96		search.index  = index;
    97		search.object = NULL;
    98	
    99		g_object_get_nth_object(G_OBJECT(menu_item), &search);
   100	
   101		return search.object != NULL ? GTK_IMAGE(search.object) : NULL;
   102	}
   103	
   104	static GIcon *gtk_image_get_icon(GtkImage *image)
   105	{
   106		GIcon *icon = NULL;
   107	
   108		g_return_val_if_fail(GTK_IS_IMAGE(image), NULL);
   109	
   110		switch (gtk_image_get_storage_type(image))
   111		{
   112		case GTK_IMAGE_GICON:
   113		{
   114			gtk_image_get_gicon(image, &icon, NULL);
   115	
   116			if (icon != NULL)
   117				g_object_ref(icon);
   118		}
   119	
   120		break;
   121	
   122		case GTK_IMAGE_ICON_NAME:
   123		{
   124			const char *name = NULL;
   125	
   126			gtk_image_get_icon_name(image, &name, NULL);
   127	
   128			if (name != NULL)
   129				icon = G_ICON(g_themed_icon_new_with_default_fallbacks(name));
   130		}
   131	
   132		break;
   133	
   134		case GTK_IMAGE_PIXBUF:
   135		{
   136			GdkPixbuf *pixbuf = gtk_image_get_pixbuf(image);
   137	
   138			if (pixbuf != NULL)
   139				icon = G_ICON(g_object_ref(pixbuf));
   140		}
   141	
   142		break;
   143	
   144		case GTK_IMAGE_ANIMATION:
   145		{
   146			GdkPixbufAnimation *animation = gtk_image_get_animation(image);
   147	
   148			if (animation != NULL)
   149			{
   150				GdkPixbuf *pixbuf = gdk_pixbuf_animation_get_static_image(animation);
   151	
   152				if (pixbuf != NULL)
   153					icon = G_ICON(g_object_ref(pixbuf));
   154			}
   155		}
   156	
   157		break;
   158	
   159		case GTK_IMAGE_STOCK:
   160	#if GTK_MAJOR_VERSION == 2
   161		{
   162			char *stock      = NULL;
   163			GtkIconSize size = GTK_ICON_SIZE_INVALID;
   164	
   165			gtk_image_get_stock(image, &stock, &size);
   166	
   167			if (stock != NULL)
   168			{
   169				GdkPixbuf *pixbuf =
   170				    gtk_widget_render_icon(GTK_WIDGET(image), stock, size, NULL);
   171	
   172				if (pixbuf != NULL)
   173					icon = G_ICON(pixbuf);
   174			}
   175		}
   176	#elif GTK_MAJOR_VERSION == 3
   177			G_GNUC_BEGIN_IGNORE_DEPRECATIONS
   178			{
   179				GtkStyleContext *context = gtk_widget_get_style_context(GTK_WIDGET(image));
   180	
   181				if (context != NULL)
   182				{
   183					char *stock      = NULL;
   184					GtkIconSize size = GTK_ICON_SIZE_INVALID;
   185	
   186					gtk_image_get_stock(image, &stock, &size);
   187	
   188					if (stock != NULL)
   189					{
   190						GtkIconSet *set =
   191						    gtk_style_context_lookup_icon_set(context, stock);
   192	
   193						if (set != NULL)
   194						{
   195							GdkPixbuf *pixbuf =
   196							    gtk_icon_set_render_icon_pixbuf(set,
   197							                                    context,
   198							                                    size);
   199	
   200							if (pixbuf != NULL)
   201								icon = G_ICON(pixbuf);
   202						}
   203					}
   204				}
   205			}
   206			G_GNUC_END_IGNORE_DEPRECATIONS
   207	#endif
   208	
   209		break;
   210	
   211		case GTK_IMAGE_ICON_SET:
   212	#if GTK_MAJOR_VERSION == 2
   213		{
   214			GtkIconSet *set  = NULL;
   215			GtkIconSize size = GTK_ICON_SIZE_INVALID;
   216	
   217			gtk_image_get_icon_set(image, &set, &size);
   218	
   219			if (set != NULL)
   220			{
   221				GtkStyle *style            = gtk_widget_get_style(GTK_WIDGET(image));
   222				GtkTextDirection direction = gtk_widget_get_direction(GTK_WIDGET(image));
   223				GtkStateType state         = gtk_widget_get_state(GTK_WIDGET(image));
   224				GdkPixbuf *pixbuf          = gtk_icon_set_render_icon(set,
   225	                                                                     style,
   226	                                                                     direction,
   227	                                                                     state,
   228	                                                                     size,
   229	                                                                     GTK_WIDGET(image),
   230	                                                                     NULL);
   231	
   232				if (pixbuf != NULL)
   233					icon = G_ICON(pixbuf);
   234			}
   235		}
   236	#elif GTK_MAJOR_VERSION == 3
   237			G_GNUC_BEGIN_IGNORE_DEPRECATIONS
   238			{
   239				GtkStyleContext *context = gtk_widget_get_style_context(GTK_WIDGET(image));
   240	
   241				if (context != NULL)
   242				{
   243					GtkIconSet *set  = NULL;
   244					GtkIconSize size = GTK_ICON_SIZE_INVALID;
   245	
   246					gtk_image_get_icon_set(image, &set, &size);
   247	
   248					if (set != NULL)
   249					{
   250						GdkPixbuf *pixbuf =
   251						    gtk_icon_set_render_icon_pixbuf(set, context, size);
   252	
   253						if (pixbuf != NULL)
   254							icon = G_ICON(pixbuf);
   255					}
   256				}
   257			}
   258			G_GNUC_END_IGNORE_DEPRECATIONS
   259	#endif
   260	
   261		break;
   262	
   263	#if GTK_MAJOR_VERSION == 2
   264		case GTK_IMAGE_IMAGE:
   265		{
   266			GdkImage *gdk_image = NULL;
   267	
   268			gtk_image_get_image(image, &gdk_image, NULL);
   269	
   270			if (gdk_image != NULL)
   271			{
   272				GdkColormap *colourmap = gtk_widget_get_colormap(GTK_WIDGET(image));
   273				GdkPixbuf *pixbuf      = gdk_pixbuf_get_from_image(NULL,
   274	                                                                      gdk_image,
   275	                                                                      colourmap,
   276	                                                                      0,
   277	                                                                      0,
   278	                                                                      0,
   279	                                                                      0,
   280	                                                                      gdk_image->width,
   281	                                                                      gdk_image->height);
   282	
   283				if (pixbuf != NULL)
   284					icon = G_ICON(pixbuf);
   285			}
   286		}
   287	
   288		break;
   289	
   290		case GTK_IMAGE_PIXMAP:
   291		{
   292			GdkPixmap *pixmap = NULL;
   293	
   294			gtk_image_get_pixmap(image, &pixmap, NULL);
   295	
   296			if (pixmap != NULL)
   297			{
   298				GdkPixbuf *pixbuf;
   299				GdkColormap *colourmap;
   300				gint width  = 0;
   301				gint height = 0;
   302	
   303				gdk_pixmap_get_size(pixmap, &width, &height);
   304				colourmap = gtk_widget_get_colormap(GTK_WIDGET(image));
   305				pixbuf    = gdk_pixbuf_get_from_drawable(NULL,
   306	                                                              pixmap,
   307	                                                              colourmap,
   308	                                                              0,
   309	                                                              0,
   310	                                                              0,
   311	                                                              0,
   312	                                                              width,
   313	                                                              height);
   314	
   315				if (pixbuf != NULL)
   316					icon = G_ICON(pixbuf);
   317			}
   318		}
   319	
   320		break;
   321	#endif
   322	
   323		default:
   324			break;
   325		}
   326	
   327		return icon;
   328	}
   329	
   330	static void unity_gtk_menu_item_handle_item_notify(GObject *object, GParamSpec *pspec,
   331	                                                   gpointer user_data)
   332	{
   333		static const char *label_name;
   334		static const char *use_underline_name;
   335	
   336		UnityGtkMenuItem *item;
   337		UnityGtkMenuShell *parent_shell;
   338		GObject *menu_item;
   339		const char *name;
   340	
   341		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(user_data));
   342	
   343		item         = UNITY_GTK_MENU_ITEM(user_data);
   344		parent_shell = item->parent_shell;
   345		menu_item    = G_OBJECT(item->menu_item);
   346	
   347		g_return_if_fail(parent_shell != NULL);
   348		g_warn_if_fail(object == menu_item);
   349	
   350		if (G_UNLIKELY(label_name == NULL))
   351			label_name = g_intern_static_string("label");
   352		if (G_UNLIKELY(use_underline_name == NULL))
   353			use_underline_name = g_intern_static_string("use-underline");
   354	
   355		name = g_param_spec_get_name(pspec);
   356	
   357		if (name != label_name && name != use_underline_name)
   358			unity_gtk_menu_shell_handle_item_notify(parent_shell, item, name);
   359	}
   360	
   361	static void unity_gtk_menu_item_handle_label_notify(GObject *object, GParamSpec *pspec,
   362	                                                    gpointer user_data)
   363	{
   364		static const char *label_name;
   365		static const char *use_underline_name;
   366	
   367		UnityGtkMenuItem *item;
   368		UnityGtkMenuShell *parent_shell;
   369		const char *name;
   370	
   371		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(user_data));
   372	
   373		item         = UNITY_GTK_MENU_ITEM(user_data);
   374		parent_shell = item->parent_shell;
   375	
   376		g_return_if_fail(parent_shell != NULL);
   377	
   378		if (G_UNLIKELY(label_name == NULL))
   379			label_name = g_intern_static_string("label");
   380		if (G_UNLIKELY(use_underline_name == NULL))
   381			use_underline_name = g_intern_static_string("use-underline");
   382	
   383		name = g_param_spec_get_name(pspec);
   384	
   385		if (name == label_name || name == use_underline_name)
   386			unity_gtk_menu_shell_handle_item_notify(parent_shell, item, name);
   387	}
   388	
   389	static void unity_gtk_menu_item_disconnect_labels(UnityGtkMenuItem *item)
   390	{
   391		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   392	
   393		if (item->second_label != NULL)
   394		{
   395			g_signal_handlers_disconnect_by_data(item->second_label, item);
   396			item->second_label = NULL;
   397		}
   398	
   399		if (item->first_label != NULL)
   400		{
   401			g_signal_handlers_disconnect_by_data(item->first_label, item);
   402			item->first_label = NULL;
   403		}
   404	}
   405	
   406	static gboolean unity_gtk_menu_item_connect_labels(UnityGtkMenuItem *item)
   407	{
   408		GtkLabel *first_label  = NULL;
   409		GtkLabel *second_label = NULL;
   410	
   411		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), FALSE);
   412	
   413		if (item->menu_item != NULL)
   414		{
   415			/* ensure label is available */
   416			gtk_menu_item_get_label(item->menu_item);
   417	
   418			first_label  = gtk_menu_item_get_nth_label(item->menu_item, 0);
   419			second_label = gtk_menu_item_get_nth_label(item->menu_item, 1);
   420		}
   421	
   422		if (first_label != item->first_label || second_label != item->second_label)
   423		{
   424			unity_gtk_menu_item_disconnect_labels(item);
   425	
   426			item->first_label  = first_label;
   427			item->second_label = second_label;
   428	
   429			if (item->first_label != NULL)
   430				g_signal_connect(item->first_label,
   431				                 "notify",
   432				                 G_CALLBACK(unity_gtk_menu_item_handle_label_notify),
   433				                 item);
   434			if (item->second_label != NULL)
   435				g_signal_connect(item->second_label,
   436				                 "notify",
   437				                 G_CALLBACK(unity_gtk_menu_item_handle_label_notify),
   438				                 item);
   439	
   440			return TRUE;
   441		}
   442	
   443		return FALSE;
   444	}
   445	
   446	static void unity_gtk_menu_item_handle_add_or_remove(GtkContainer *container, GtkWidget *widget,
   447	                                                     gpointer user_data)
   448	{
   449		UnityGtkMenuItem *item;
   450	
   451		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(user_data));
   452	
   453		item = UNITY_GTK_MENU_ITEM(user_data);
   454	
   455		/* just ignore the case when parent_shell is NULL */
   456		if (item->parent_shell != NULL && unity_gtk_menu_item_connect_labels(item))
   457			unity_gtk_menu_shell_handle_item_notify(item->parent_shell, item, "label");
   458	}
   459	
   460	static void unity_gtk_menu_item_handle_accel_closures_changed(GtkWidget *widget, gpointer user_data)
   461	{
   462		UnityGtkMenuItem *item;
   463		UnityGtkMenuShell *parent_shell;
   464	
   465		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(user_data));
   466	
   467		item         = UNITY_GTK_MENU_ITEM(user_data);
   468		parent_shell = item->parent_shell;
   469	
   470		g_return_if_fail(parent_shell != NULL);
   471	
   472		unity_gtk_menu_shell_handle_item_notify(parent_shell, item, "accel-path");
   473	}
   474	
   475	static void unity_gtk_menu_item_set_menu_item(UnityGtkMenuItem *item, GtkMenuItem *menu_item)
   476	{
   477		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   478	
   479		if (menu_item != item->menu_item)
   480		{
   481			UnityGtkMenuShell *child_shell = item->child_shell;
   482	
   483			unity_gtk_menu_item_disconnect_labels(item);
   484	
   485			if (item->menu_item != NULL)
   486				g_signal_handlers_disconnect_by_data(item->menu_item, item);
   487	
   488			if (child_shell != NULL)
   489			{
   490				g_warn_if_fail(item->child_shell_valid);
   491				item->child_shell = NULL;
   492				g_object_unref(child_shell);
   493			}
   494	
   495			item->child_shell_valid = FALSE;
   496			item->menu_item         = menu_item;
   497	
   498			if (menu_item != NULL)
   499			{
   500				g_signal_connect(menu_item,
   501				                 "notify",
   502				                 G_CALLBACK(unity_gtk_menu_item_handle_item_notify),
   503				                 item);
   504				g_signal_connect(menu_item,
   505				                 "add",
   506				                 G_CALLBACK(unity_gtk_menu_item_handle_add_or_remove),
   507				                 item);
   508				g_signal_connect(menu_item,
   509				                 "remove",
   510				                 G_CALLBACK(unity_gtk_menu_item_handle_add_or_remove),
   511				                 item);
   512				g_signal_connect(menu_item,
   513				                 "accel-closures-changed",
   514				                 G_CALLBACK(
   515				                     unity_gtk_menu_item_handle_accel_closures_changed),
   516				                 item);
   517	
   518				/*
   519				 * LP: #1208019: We do this because Eclipse sets menu item
   520				 * accelerators using private API, and there's no way for us to
   521				 * detect when they change.
   522				 */
   523				if (gtk_menu_item_get_submenu(menu_item) != NULL)
   524					g_signal_emit_by_name(gtk_menu_item_get_submenu(menu_item), "show");
   525			}
   526	
   527			unity_gtk_menu_item_connect_labels(item);
   528		}
   529	}
   530	
   531	static void unity_gtk_menu_item_set_parent_shell(UnityGtkMenuItem *item,
   532	                                                 UnityGtkMenuShell *parent_shell)
   533	{
   534		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   535	
   536		item->parent_shell = parent_shell;
   537	}
   538	
   539	static void unity_gtk_menu_item_dispose(GObject *object)
   540	{
   541		UnityGtkMenuItem *item;
   542	
   543		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(object));
   544	
   545		item = UNITY_GTK_MENU_ITEM(object);
   546	
   547		unity_gtk_menu_item_set_action(item, NULL);
   548		unity_gtk_menu_item_set_parent_shell(item, NULL);
   549		unity_gtk_menu_item_set_menu_item(item, NULL);
   550	
   551		G_OBJECT_CLASS(unity_gtk_menu_item_parent_class)->dispose(object);
   552	}
   553	
   554	static void unity_gtk_menu_item_finalize(GObject *object)
   555	{
   556		UnityGtkMenuItem *item;
   557	
   558		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(object));
   559	
   560		item = UNITY_GTK_MENU_ITEM(object);
   561	
   562		g_free(item->label_label);
   563		item->label_label = NULL;
   564	
   565		G_OBJECT_CLASS(unity_gtk_menu_item_parent_class)->finalize(object);
   566	}
   567	
   568	static void unity_gtk_menu_item_class_init(UnityGtkMenuItemClass *klass)
   569	{
   570		GObjectClass *object_class = G_OBJECT_CLASS(klass);
   571	
   572		object_class->dispose  = unity_gtk_menu_item_dispose;
   573		object_class->finalize = unity_gtk_menu_item_finalize;
   574	}
   575	
   576	static void unity_gtk_menu_item_init(UnityGtkMenuItem *self)
   577	{
   578	}
   579	
   580	UnityGtkMenuItem *unity_gtk_menu_item_new(GtkMenuItem *menu_item, UnityGtkMenuShell *parent_shell,
   581	                                          guint item_index)
   582	{
   583		UnityGtkMenuItem *item = g_object_new(UNITY_GTK_TYPE_MENU_ITEM, NULL);
   584	
   585		unity_gtk_menu_item_set_menu_item(item, menu_item);
   586		unity_gtk_menu_item_set_parent_shell(item, parent_shell);
   587		item->item_index = item_index;
   588	
   589		return item;
   590	}
   591	
   592	UnityGtkMenuShell *unity_gtk_menu_item_get_child_shell(UnityGtkMenuItem *item)
   593	{
   594		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), NULL);
   595	
   596		if (!item->child_shell_valid)
   597		{
   598			GtkMenuItem *menu_item         = item->menu_item;
   599			UnityGtkMenuShell *child_shell = item->child_shell;
   600	
   601			if (child_shell != NULL)
   602			{
   603				g_warn_if_reached();
   604				item->child_shell = NULL;
   605				g_object_unref(child_shell);
   606			}
   607	
   608			if (menu_item != NULL)
   609			{
   610				GtkWidget *submenu = gtk_menu_item_get_submenu(menu_item);
   611	
   612				if (submenu != NULL)
   613					item->child_shell =
   614					    unity_gtk_menu_shell_new_internal(GTK_MENU_SHELL(submenu));
   615			}
   616	
   617			item->child_shell_valid = TRUE;
   618	
   619			if (unity_gtk_menu_item_is_visible(item) && item->child_shell != NULL)
   620			{
   621				UnityGtkMenuShell *parent_shell = item->parent_shell;
   622	
   623				if (parent_shell != NULL)
   624				{
   625					if (parent_shell->action_group != NULL)
   626						unity_gtk_action_group_connect_shell(parent_shell
   627						                                         ->action_group,
   628						                                     item->child_shell);
   629				}
   630				else
   631					g_warn_if_reached();
   632			}
   633		}
   634	
   635		return item->child_shell;
   636	}
   637	
   638	void unity_gtk_menu_item_set_action(UnityGtkMenuItem *item, UnityGtkAction *action)
   639	{
   640		UnityGtkAction *old_action;
   641	
   642		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   643	
   644		old_action = item->action;
   645	
   646		if (action != old_action)
   647		{
   648			if (old_action != NULL)
   649			{
   650				item->action = NULL;
   651				g_object_unref(old_action);
   652			}
   653	
   654			if (action != NULL)
   655				item->action = g_object_ref(action);
   656		}
   657	}
   658	
   659	static char *g_strdup_no_mnemonics(const char *str)
   660	{
   661		if (str != NULL)
   662		{
   663			char *string;
   664			char *out;
   665			const char *in;
   666			gboolean underscore;
   667	
   668			string     = g_malloc(strlen(str) + 1);
   669			out        = string;
   670			underscore = FALSE;
   671	
   672			for (in = str; *in != '\0'; in++)
   673			{
   674				if (*in != '_')
   675				{
   676					underscore = FALSE;
   677					*out++     = *in;
   678				}
   679				else
   680				{
   681					if (!underscore)
   682						underscore = TRUE;
   683					else
   684					{
   685						/* double underscores are not accelerator markers */
   686						underscore = FALSE;
   687						*out++     = '_';
   688						*out++     = '_';
   689					}
   690				}
   691			}
   692	
   693			/* trailing underscores are not accelerator markers */
   694			if (underscore)
   695				*out++ = '_';
   696	
   697			*out++ = '\0';
   698	
   699			return string;
   700		}
   701	
   702		return NULL;
   703	}
   704	
   705	static char *g_strdup_escape_underscores(const char *str)
   706	{
   707		if (str != NULL)
   708		{
   709			char *string;
   710			char *out;
   711			const char *in;
   712			guint underscores;
   713	
   714			underscores = 0;
   715	
   716			for (in = strchr(str, '_'); in != NULL; in = strchr(in + 1, '_'))
   717				underscores++;
   718	
   719			if (underscores == 0)
   720				return g_strdup(str);
   721	
   722			string = g_malloc(strlen(str) + underscores + 1);
   723			out    = string;
   724	
   725			for (in = str; *in != '\0'; in++)
   726			{
   727				*out++ = *in;
   728	
   729				if (*in == '_')
   730					*out++ = '_';
   731			}
   732	
   733			*out++ = '\0';
   734	
   735			return string;
   736		}
   737	
   738		return NULL;
   739	}
   740	
   741	const char *unity_gtk_menu_item_get_label(UnityGtkMenuItem *item)
   742	{
   743		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), NULL);
   744		g_return_val_if_fail(item->menu_item != NULL, NULL);
   745	
   746		if (item->label_label == NULL)
   747		{
   748			const char *label_label = gtk_menu_item_get_label(item->menu_item);
   749	
   750			if (label_label != NULL && label_label[0] != '\0')
   751			{
   752				G_GNUC_BEGIN_IGNORE_DEPRECATIONS
   753				if (GTK_IS_IMAGE_MENU_ITEM(item->menu_item))
   754				{
   755					GtkImageMenuItem *image_menu_item =
   756					    GTK_IMAGE_MENU_ITEM(item->menu_item);
   757	
   758					if (gtk_image_menu_item_get_use_stock(image_menu_item))
   759					{
   760						GtkStockItem stock_item;
   761	
   762						if (gtk_stock_lookup(label_label, &stock_item))
   763							label_label = stock_item.label;
   764					}
   765				}
   766				G_GNUC_END_IGNORE_DEPRECATIONS
   767			}
   768	
   769			if (label_label == NULL || label_label[0] == '\0')
   770				label_label = gtk_menu_item_get_nth_label_label(item->menu_item, 0);
   771	
   772			if (label_label != NULL && label_label[0] != '\0')
   773			{
   774				GtkLabel *label = gtk_menu_item_get_nth_label(item->menu_item, 0);
   775	
   776				if (gtk_label_get_use_underline(label))
   777				{
   778					if (item->parent_shell == NULL || item->parent_shell->has_mnemonics)
   779						item->label_label = g_strdup(label_label);
   780					else
   781						item->label_label = g_strdup_no_mnemonics(label_label);
   782				}
   783				else
   784					item->label_label = g_strdup_escape_underscores(label_label);
   785			}
   786		}
   787	
   788		return item->label_label;
   789	}
   790	
   791	GIcon *unity_gtk_menu_item_get_icon(UnityGtkMenuItem *item)
   792	{
   793		GIcon *icon = NULL;
   794	
   795		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), NULL);
   796	
   797		G_GNUC_BEGIN_IGNORE_DEPRECATIONS
   798		if (item->menu_item != NULL && !GTK_IS_IMAGE_MENU_ITEM(item->menu_item))
   799		{
   800			GtkImage *image = gtk_menu_item_get_nth_image(item->menu_item, 0);
   801	
   802			if (image != NULL)
   803				icon = gtk_image_get_icon(image);
   804		}
   805		G_GNUC_END_IGNORE_DEPRECATIONS
   806		return icon;
   807	}
   808	
   809	gboolean unity_gtk_menu_item_is_visible(UnityGtkMenuItem *item)
   810	{
   811		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), FALSE);
   812		G_GNUC_BEGIN_IGNORE_DEPRECATIONS
   813		return item->menu_item != NULL && gtk_widget_get_visible(GTK_WIDGET(item->menu_item)) &&
   814		       !GTK_IS_TEAROFF_MENU_ITEM(item->menu_item);
   815		G_GNUC_END_IGNORE_DEPRECATIONS
   816	}
   817	
   818	gboolean unity_gtk_menu_item_is_sensitive(UnityGtkMenuItem *item)
   819	{
   820		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), FALSE);
   821	
   822		return item->menu_item != NULL && gtk_widget_is_sensitive(GTK_WIDGET(item->menu_item));
   823	}
   824	
   825	gboolean unity_gtk_menu_item_is_active(UnityGtkMenuItem *item)
   826	{
   827		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), FALSE);
   828	
   829		return GTK_IS_CHECK_MENU_ITEM(item->menu_item) &&
   830		       gtk_check_menu_item_get_active(GTK_CHECK_MENU_ITEM(item->menu_item));
   831	}
   832	
   833	gboolean unity_gtk_menu_item_is_separator(UnityGtkMenuItem *item)
   834	{
   835		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), FALSE);
   836	
   837		return GTK_IS_SEPARATOR_MENU_ITEM(item->menu_item);
   838	}
   839	
   840	gboolean unity_gtk_menu_item_is_check(UnityGtkMenuItem *item)
   841	{
   842		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), FALSE);
   843	
   844		return GTK_IS_CHECK_MENU_ITEM(item->menu_item);
   845	}
   846	
   847	gboolean unity_gtk_menu_item_is_radio(UnityGtkMenuItem *item)
   848	{
   849		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), FALSE);
   850	
   851		return GTK_IS_RADIO_MENU_ITEM(item->menu_item);
   852	}
   853	
   854	gboolean unity_gtk_menu_item_get_draw_as_radio(UnityGtkMenuItem *item)
   855	{
   856		g_return_val_if_fail(UNITY_GTK_IS_MENU_ITEM(item), FALSE);
   857	
   858		return GTK_IS_CHECK_MENU_ITEM(item->menu_item) &&
   859		       gtk_check_menu_item_get_draw_as_radio(GTK_CHECK_MENU_ITEM(item->menu_item));
   860	}
   861	
   862	void unity_gtk_menu_item_activate(UnityGtkMenuItem *item)
   863	{
   864		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   865		g_return_if_fail(item->parent_shell != NULL);
   866	
   867		unity_gtk_menu_shell_activate_item(item->parent_shell, item);
   868	}
   869	
   870	void unity_gtk_menu_item_print(UnityGtkMenuItem *item, guint indent)
   871	{
   872		char *space;
   873	
   874		g_return_if_fail(item == NULL || UNITY_GTK_IS_MENU_ITEM(item));
   875	
   876		space = g_strnfill(indent, ' ');
   877	
   878		if (item != NULL)
   879		{
   880			const char *label = unity_gtk_menu_item_get_label(item);
   881	
   882			if (label != NULL)
   883				g_print("%s%u (%s *) %p \"%s\"\n",
   884				        space,
   885				        item->item_index,
   886				        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(item)),
   887				        item,
   888				        label);
   889			else
   890				g_print("%s%u (%s *) %p\n",
   891				        space,
   892				        item->item_index,
   893				        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(item)),
   894				        item);
   895	
   896			if (item->menu_item != NULL)
   897				g_print("%s  (%s *) %p\n",
   898				        space,
   899				        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(item->menu_item)),
   900				        item->menu_item);
   901	
   902			if (item->parent_shell != NULL)
   903				g_print("%s  (%s *) %p\n",
   904				        space,
   905				        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(item->parent_shell)),
   906				        item->parent_shell);
   907	
   908			if (item->child_shell_valid || item->child_shell != NULL)
   909			{
   910				if (!item->child_shell_valid)
   911					g_print("%s  invalid\n", space);
   912	
   913				unity_gtk_menu_shell_print(item->child_shell, indent + 2);
   914			}
   915	
   916			if (item->action != NULL)
   917				unity_gtk_action_print(item->action, indent + 2);
   918		}
   919		else
   920			g_print("%sNULL\n", space);
   921	
   922		g_free(space);
   923	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-menu-item-private.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#ifndef __UNITY_GTK_MENU_ITEM_PRIVATE_H__
    21	#define __UNITY_GTK_MENU_ITEM_PRIVATE_H__
    22	
    23	#include <gtk/gtk.h>
    24	
    25	G_BEGIN_DECLS
    26	
    27	#define UNITY_GTK_TYPE_MENU_ITEM (unity_gtk_menu_item_get_type())
    28	G_DECLARE_FINAL_TYPE(UnityGtkMenuItem, unity_gtk_menu_item, UNITY_GTK, MENU_ITEM, GObject)
    29	
    30	G_END_DECLS
    31	
    32	#include "unity-gtk-action-private.h"
    33	#include "unity-gtk-menu-shell-private.h"
    34	
    35	G_BEGIN_DECLS
    36	
    37	struct _UnityGtkMenuItem
    38	{
    39		GObject parent_instance;
    40	
    41		/*< private >*/
    42		GtkMenuItem *menu_item;
    43		UnityGtkMenuShell *parent_shell;
    44		UnityGtkMenuShell *child_shell;
    45		guchar child_shell_valid : 1;
    46		guint item_index;
    47		UnityGtkAction *action;
    48		GtkLabel *first_label;
    49		GtkLabel *second_label;
    50		char *label_label;
    51	};
    52	
    53	GType unity_gtk_menu_item_get_type(void) G_GNUC_INTERNAL;
    54	
    55	UnityGtkMenuItem *unity_gtk_menu_item_new(GtkMenuItem *menu_item, UnityGtkMenuShell *parent_shell,
    56	                                          guint item_index) G_GNUC_INTERNAL;
    57	
    58	UnityGtkMenuShell *unity_gtk_menu_item_get_child_shell(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    59	
    60	void unity_gtk_menu_item_set_action(UnityGtkMenuItem *item, UnityGtkAction *action) G_GNUC_INTERNAL;
    61	
    62	const char *unity_gtk_menu_item_get_label(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    63	
    64	GIcon *unity_gtk_menu_item_get_icon(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    65	
    66	gboolean unity_gtk_menu_item_is_visible(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    67	
    68	gboolean unity_gtk_menu_item_is_sensitive(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    69	
    70	gboolean unity_gtk_menu_item_is_active(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    71	
    72	gboolean unity_gtk_menu_item_is_separator(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    73	
    74	gboolean unity_gtk_menu_item_is_check(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    75	
    76	gboolean unity_gtk_menu_item_is_radio(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    77	
    78	gboolean unity_gtk_menu_item_get_draw_as_radio(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    79	
    80	void unity_gtk_menu_item_activate(UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    81	
    82	void unity_gtk_menu_item_print(UnityGtkMenuItem *item, guint indent) G_GNUC_INTERNAL;
    83	
    84	GtkLabel *gtk_menu_item_get_nth_label(GtkMenuItem *menu_item, guint index) G_GNUC_INTERNAL;
    85	
    86	const char *gtk_menu_item_get_nth_label_label(GtkMenuItem *menu_item, guint index) G_GNUC_INTERNAL;
    87	
    88	G_END_DECLS
    89	
    90	#endif /* __UNITY_GTK_MENU_ITEM_PRIVATE_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-menu-section.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#include "unity-gtk-menu-section-private.h"
    21	
    22	#ifndef G_MENU_ATTRIBUTE_ACCEL
    23	#define G_MENU_ATTRIBUTE_ACCEL "accel"
    24	#endif
    25	
    26	#ifndef G_MENU_ATTRIBUTE_ACCEL_TEXT
    27	#define G_MENU_ATTRIBUTE_ACCEL_TEXT "x-canonical-accel"
    28	#endif
    29	
    30	#ifndef G_MENU_ATTRIBUTE_SUBMENU_ACTION
    31	#define G_MENU_ATTRIBUTE_SUBMENU_ACTION "submenu-action"
    32	#endif
    33	
    34	G_DEFINE_TYPE(UnityGtkMenuSection, unity_gtk_menu_section, G_TYPE_MENU_MODEL);
    35	
    36	static gint g_uintcmp(gconstpointer a, gconstpointer b, gpointer user_data)
    37	{
    38		return GPOINTER_TO_INT(a) - GPOINTER_TO_INT(b);
    39	}
    40	
    41	static gboolean g_closure_equal(GtkAccelKey *key, GClosure *closure, gpointer data)
    42	{
    43		return closure == data;
    44	}
    45	
    46	static void unity_gtk_menu_section_set_parent_shell(UnityGtkMenuSection *section,
    47	                                                    UnityGtkMenuShell *parent_shell)
    48	{
    49		g_return_if_fail(UNITY_GTK_IS_MENU_SECTION(section));
    50	
    51		section->parent_shell = parent_shell;
    52	}
    53	
    54	static void unity_gtk_menu_section_dispose(GObject *object)
    55	{
    56		UnityGtkMenuSection *section;
    57	
    58		g_return_if_fail(UNITY_GTK_IS_MENU_SECTION(object));
    59	
    60		section = UNITY_GTK_MENU_SECTION(object);
    61	
    62		unity_gtk_menu_section_set_parent_shell(section, NULL);
    63	
    64		G_OBJECT_CLASS(unity_gtk_menu_section_parent_class)->dispose(object);
    65	}
    66	
    67	static gboolean unity_gtk_menu_section_is_mutable(GMenuModel *model)
    68	{
    69		g_return_val_if_fail(UNITY_GTK_IS_MENU_SECTION(model), TRUE);
    70	
    71		return TRUE;
    72	}
    73	
    74	static gint unity_gtk_menu_section_get_n_items(GMenuModel *model)
    75	{
    76		UnityGtkMenuSection *section;
    77		GSequenceIter *begin;
    78		GSequenceIter *end;
    79	
    80		g_return_val_if_fail(UNITY_GTK_IS_MENU_SECTION(model), 0);
    81	
    82		section = UNITY_GTK_MENU_SECTION(model);
    83		begin   = unity_gtk_menu_section_get_begin_iter(section);
    84		end     = unity_gtk_menu_section_get_end_iter(section);
    85	
    86		g_return_val_if_fail(begin != NULL && end != NULL, 0);
    87	
    88		return g_sequence_iter_get_position(end) - g_sequence_iter_get_position(begin);
    89	}
    90	
    91	static void unity_gtk_menu_section_get_item_attributes(GMenuModel *model, gint item_index,
    92	                                                       GHashTable **attributes)
    93	{
    94		UnityGtkMenuSection *section;
    95		UnityGtkMenuShell *parent_shell;
    96		UnityGtkMenuItem *item;
    97		GSequenceIter *iter;
    98		guint index;
    99		const char *label;
   100		GIcon *icon;
   101		UnityGtkAction *action;
   102	
   103		g_return_if_fail(UNITY_GTK_IS_MENU_SECTION(model));
   104		g_return_if_fail(attributes != NULL);
   105	
   106		section      = UNITY_GTK_MENU_SECTION(model);
   107		parent_shell = section->parent_shell;
   108	
   109		g_return_if_fail(parent_shell != NULL);
   110	
   111		iter   = unity_gtk_menu_section_get_iter(section, item_index);
   112		index  = GPOINTER_TO_UINT(g_sequence_get(iter));
   113		item   = unity_gtk_menu_shell_get_item(parent_shell, index);
   114		label  = unity_gtk_menu_item_get_label(item);
   115		icon   = unity_gtk_menu_item_get_icon(item);
   116		action = item->action;
   117	
   118		*attributes =
   119		    g_hash_table_new_full(g_str_hash, g_str_equal, NULL, (GDestroyNotify)g_variant_unref);
   120	
   121		if (label != NULL)
   122			g_hash_table_insert(*attributes,
   123			                    G_MENU_ATTRIBUTE_LABEL,
   124			                    g_variant_ref_sink(g_variant_new_string(label)));
   125	
   126		if (icon != NULL)
   127		{
   128			g_hash_table_insert(*attributes, G_MENU_ATTRIBUTE_ICON, g_icon_serialize(icon));
   129			g_object_unref(icon);
   130		}
   131	
   132		if (action != NULL)
   133		{
   134			if (action->name != NULL)
   135			{
   136				char *name        = g_strdup_printf("unity.%s", action->name);
   137				GVariant *variant = g_variant_ref_sink(g_variant_new_string(name));
   138	
   139				g_hash_table_insert(*attributes, G_MENU_ATTRIBUTE_ACTION, variant);
   140	
   141				if (action->items_by_name != NULL)
   142				{
   143					GHashTableIter iter;
   144					gpointer key;
   145					gpointer value;
   146					const char *target = NULL;
   147	
   148					g_hash_table_iter_init(&iter, action->items_by_name);
   149					while (target == NULL &&
   150					       g_hash_table_iter_next(&iter, &key, &value))
   151						if (value == item)
   152							target = key;
   153	
   154					if (target != NULL)
   155						g_hash_table_insert(*attributes,
   156						                    G_MENU_ATTRIBUTE_TARGET,
   157						                    g_variant_ref_sink(
   158						                        g_variant_new_string(target)));
   159				}
   160				else if (unity_gtk_menu_item_get_draw_as_radio(item))
   161					g_hash_table_insert(*attributes,
   162					                    G_MENU_ATTRIBUTE_TARGET,
   163					                    g_variant_ref_sink(
   164					                        g_variant_new_string(action->name)));
   165	
   166				g_free(name);
   167			}
   168	
   169			if (action->subname != NULL)
   170			{
   171				char *subname     = g_strdup_printf("unity.%s", action->subname);
   172				GVariant *variant = g_variant_ref_sink(g_variant_new_string(subname));
   173				g_hash_table_insert(*attributes, G_MENU_ATTRIBUTE_SUBMENU_ACTION, variant);
   174				g_free(subname);
   175			}
   176		}
   177	
   178		if (item->menu_item != NULL)
   179		{
   180			char *accel_name       = NULL;
   181			const char *accel_path = gtk_menu_item_get_accel_path(item->menu_item);
   182	
   183			if (accel_path != NULL)
   184			{
   185				GtkAccelKey accel_key;
   186	
   187				if (gtk_accel_map_lookup_entry(accel_path, &accel_key))
   188					accel_name =
   189					    gtk_accelerator_name(accel_key.accel_key, accel_key.accel_mods);
   190			}
   191	
   192			if (accel_name == NULL)
   193			{
   194				GList *closures =
   195				    gtk_widget_list_accel_closures(GTK_WIDGET(item->menu_item));
   196				GList *iter;
   197	
   198				for (iter = closures; iter != NULL && accel_name == NULL;
   199				     iter = g_list_next(iter))
   200				{
   201					GClosure *closure = iter->data;
   202					GtkAccelGroup *accel_group =
   203					    gtk_accel_group_from_accel_closure(closure);
   204	
   205					if (accel_group != NULL)
   206					{
   207						GtkAccelKey *accel_key =
   208						    gtk_accel_group_find(accel_group,
   209						                         g_closure_equal,
   210						                         closure);
   211	
   212						if (accel_key != NULL)
   213							accel_name =
   214							    gtk_accelerator_name(accel_key->accel_key,
   215							                         accel_key->accel_mods);
   216					}
   217				}
   218	
   219				g_list_free(closures);
   220			}
   221	
   222			if (accel_name != NULL)
   223				g_hash_table_insert(*attributes,
   224				                    G_MENU_ATTRIBUTE_ACCEL,
   225				                    g_variant_ref_sink(g_variant_new_string(accel_name)));
   226			else
   227			{
   228	#if GTK_MAJOR_VERSION == 2
   229				/* LP: #1208019 */
   230				GtkLabel *accel_label = gtk_menu_item_get_nth_label(item->menu_item, 0);
   231	
   232				if (GTK_IS_ACCEL_LABEL(accel_label))
   233				{
   234					/* Eclipse uses private API. */
   235					if (GTK_ACCEL_LABEL(accel_label)->accel_string != NULL)
   236						accel_name =
   237						    g_strdup(GTK_ACCEL_LABEL(accel_label)->accel_string);
   238				}
   239	#endif
   240	
   241				if (accel_name == NULL)
   242					accel_name =
   243					    g_strdup(gtk_menu_item_get_nth_label_label(item->menu_item, 1));
   244	
   245				if (accel_name != NULL)
   246					g_hash_table_insert(*attributes,
   247					                    G_MENU_ATTRIBUTE_ACCEL_TEXT,
   248					                    g_variant_ref_sink(
   249					                        g_variant_new_string(accel_name)));
   250			}
   251	
   252			g_free(accel_name);
   253		}
   254	}
   255	
   256	static void unity_gtk_menu_section_get_item_links(GMenuModel *model, gint item_index,
   257	                                                  GHashTable **links)
   258	{
   259		UnityGtkMenuSection *section;
   260		UnityGtkMenuShell *parent_shell;
   261		UnityGtkMenuItem *item;
   262		GSequenceIter *iter;
   263		guint index;
   264		UnityGtkMenuShell *child_shell;
   265	
   266		g_return_if_fail(UNITY_GTK_IS_MENU_SECTION(model));
   267		g_return_if_fail(links != NULL);
   268	
   269		section      = UNITY_GTK_MENU_SECTION(model);
   270		parent_shell = section->parent_shell;
   271	
   272		g_return_if_fail(parent_shell != NULL);
   273	
   274		iter        = unity_gtk_menu_section_get_iter(section, item_index);
   275		index       = GPOINTER_TO_UINT(g_sequence_get(iter));
   276		item        = unity_gtk_menu_shell_get_item(parent_shell, index);
   277		child_shell = unity_gtk_menu_item_get_child_shell(item);
   278	
   279		*links = g_hash_table_new_full(g_str_hash, g_str_equal, NULL, g_object_unref);
   280	
   281		if (child_shell != NULL)
   282			g_hash_table_insert(*links, G_MENU_LINK_SUBMENU, g_object_ref(child_shell));
   283	}
   284	
   285	static void unity_gtk_menu_section_class_init(UnityGtkMenuSectionClass *klass)
   286	{
   287		GObjectClass *object_class        = G_OBJECT_CLASS(klass);
   288		GMenuModelClass *menu_model_class = G_MENU_MODEL_CLASS(klass);
   289	
   290		object_class->dispose                 = unity_gtk_menu_section_dispose;
   291		menu_model_class->is_mutable          = unity_gtk_menu_section_is_mutable;
   292		menu_model_class->get_n_items         = unity_gtk_menu_section_get_n_items;
   293		menu_model_class->get_item_attributes = unity_gtk_menu_section_get_item_attributes;
   294		menu_model_class->get_item_links      = unity_gtk_menu_section_get_item_links;
   295	}
   296	
   297	static void unity_gtk_menu_section_init(UnityGtkMenuSection *self)
   298	{
   299	}
   300	
   301	UnityGtkMenuSection *unity_gtk_menu_section_new(UnityGtkMenuShell *parent_shell,
   302	                                                guint section_index)
   303	{
   304		UnityGtkMenuSection *section = g_object_new(UNITY_GTK_TYPE_MENU_SECTION, NULL);
   305	
   306		unity_gtk_menu_section_set_parent_shell(section, parent_shell);
   307		section->section_index = section_index;
   308	
   309		return section;
   310	}
   311	
   312	GSequenceIter *unity_gtk_menu_section_get_begin_iter(UnityGtkMenuSection *section)
   313	{
   314		UnityGtkMenuShell *parent_shell;
   315		GSequence *separator_indices;
   316		GSequence *visible_indices;
   317		GSequenceIter *separator_iter;
   318		GSequenceIter *visible_iter;
   319		guint section_index;
   320	
   321		g_return_val_if_fail(UNITY_GTK_IS_MENU_SECTION(section), NULL);
   322	
   323		parent_shell = section->parent_shell;
   324	
   325		g_return_val_if_fail(parent_shell != NULL, NULL);
   326	
   327		separator_indices = unity_gtk_menu_shell_get_separator_indices(parent_shell);
   328		visible_indices   = unity_gtk_menu_shell_get_visible_indices(parent_shell);
   329		section_index     = section->section_index;
   330	
   331		if (section_index > 0)
   332			separator_iter = g_sequence_get_iter_at_pos(separator_indices, section_index - 1);
   333		else
   334			separator_iter = NULL;
   335	
   336		if (separator_iter != NULL)
   337		{
   338			gpointer separator_index = g_sequence_get(separator_iter);
   339			visible_iter = g_sequence_lookup(visible_indices, separator_index, g_uintcmp, NULL);
   340			visible_iter = g_sequence_iter_next(visible_iter);
   341		}
   342		else
   343			visible_iter = g_sequence_get_begin_iter(visible_indices);
   344	
   345		return visible_iter;
   346	}
   347	
   348	GSequenceIter *unity_gtk_menu_section_get_end_iter(UnityGtkMenuSection *section)
   349	{
   350		UnityGtkMenuShell *parent_shell;
   351		GSequence *separator_indices;
   352		GSequence *visible_indices;
   353		GSequenceIter *separator_iter;
   354		GSequenceIter *visible_iter;
   355	
   356		g_return_val_if_fail(UNITY_GTK_IS_MENU_SECTION(section), NULL);
   357	
   358		parent_shell = section->parent_shell;
   359	
   360		g_return_val_if_fail(parent_shell != NULL, NULL);
   361	
   362		separator_indices = unity_gtk_menu_shell_get_separator_indices(parent_shell);
   363		visible_indices   = unity_gtk_menu_shell_get_visible_indices(parent_shell);
   364		separator_iter    = g_sequence_get_iter_at_pos(separator_indices, section->section_index);
   365	
   366		if (g_sequence_iter_is_end(separator_iter))
   367			separator_iter = NULL;
   368	
   369		if (separator_iter != NULL)
   370			visible_iter = g_sequence_lookup(visible_indices,
   371			                                 g_sequence_get(separator_iter),
   372			                                 g_uintcmp,
   373			                                 NULL);
   374		else
   375			visible_iter = g_sequence_get_end_iter(visible_indices);
   376	
   377		return visible_iter;
   378	}
   379	
   380	GSequenceIter *unity_gtk_menu_section_get_iter(UnityGtkMenuSection *section, guint index)
   381	{
   382		g_return_val_if_fail(UNITY_GTK_IS_MENU_SECTION(section), NULL);
   383	
   384		return g_sequence_iter_move(unity_gtk_menu_section_get_begin_iter(section), index);
   385	}
   386	
   387	void unity_gtk_menu_section_print(UnityGtkMenuSection *section, guint indent)
   388	{
   389		char *space;
   390	
   391		g_return_if_fail(section == NULL || UNITY_GTK_IS_MENU_SECTION(section));
   392	
   393		space = g_strnfill(indent, ' ');
   394	
   395		if (section != NULL)
   396		{
   397			g_print("%s%u (%s *) %p\n",
   398			        space,
   399			        section->section_index,
   400			        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(section)),
   401			        section);
   402	
   403			if (section->parent_shell != NULL)
   404				g_print("%s  (%s *) %p\n",
   405				        space,
   406				        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(section->parent_shell)),
   407				        section->parent_shell);
   408		}
   409		else
   410			g_print("%sNULL\n", space);
   411	
   412		g_free(space);
   413	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-menu-section-private.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#ifndef __UNITY_GTK_MENU_SECTION_PRIVATE_H__
    21	#define __UNITY_GTK_MENU_SECTION_PRIVATE_H__
    22	
    23	#include <gio/gio.h>
    24	
    25	G_BEGIN_DECLS
    26	
    27	#define UNITY_GTK_TYPE_MENU_SECTION (unity_gtk_menu_section_get_type())
    28	G_DECLARE_FINAL_TYPE(UnityGtkMenuSection, unity_gtk_menu_section, UNITY_GTK, MENU_SECTION, GMenuModel)
    29	
    30	G_END_DECLS
    31	
    32	#include "unity-gtk-menu-shell-private.h"
    33	
    34	G_BEGIN_DECLS
    35	
    36	struct _UnityGtkMenuSection
    37	{
    38		GMenuModel parent_instance;
    39	
    40		/*< private >*/
    41		UnityGtkMenuShell *parent_shell;
    42		guint section_index;
    43	};
    44	
    45	GType unity_gtk_menu_section_get_type(void) G_GNUC_INTERNAL;
    46	
    47	UnityGtkMenuSection *unity_gtk_menu_section_new(UnityGtkMenuShell *parent_shell,
    48	                                                guint section_index) G_GNUC_INTERNAL;
    49	
    50	GSequenceIter *unity_gtk_menu_section_get_begin_iter(UnityGtkMenuSection *section) G_GNUC_INTERNAL;
    51	
    52	GSequenceIter *unity_gtk_menu_section_get_end_iter(UnityGtkMenuSection *section) G_GNUC_INTERNAL;
    53	
    54	GSequenceIter *unity_gtk_menu_section_get_iter(UnityGtkMenuSection *section,
    55	                                               guint index) G_GNUC_INTERNAL;
    56	
    57	void unity_gtk_menu_section_print(UnityGtkMenuSection *section, guint indent) G_GNUC_INTERNAL;
    58	
    59	G_END_DECLS
    60	
    61	#endif /* __UNITY_GTK_MENU_SECTION_PRIVATE_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-menu-shell.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	/**
    21	 * SECTION:unity-gtk-menu-shell
    22	 * @short_description: Menu shell proxy
    23	 * @include: unity-gtk-parser.h
    24	 *
    25	 * A #UnityGtkMenuShell is a #GMenuModel that acts as a proxy for a
    26	 * #GtkMenuShell. This can be used for purposes such as exporting menu
    27	 * shells over DBus with g_dbus_connection_export_menu_model ().
    28	 *
    29	 * #UnityGtkMenuShell<!-- -->s are most useful when used with
    30	 * #UnityGtkActionGroup<!-- -->s.
    31	 */
    32	
    33	#include "unity-gtk-action-group-private.h"
    34	#include "unity-gtk-menu-section-private.h"
    35	#include "unity-gtk-menu-shell-private.h"
    36	
    37	G_DEFINE_QUARK(menu_shell, menu_shell);
    38	
    39	G_DEFINE_TYPE(UnityGtkMenuShell, unity_gtk_menu_shell, G_TYPE_MENU_MODEL);
    40	
    41	static gboolean unity_gtk_menu_shell_debug;
    42	
    43	static gint g_uintcmp(gconstpointer a, gconstpointer b, gpointer user_data)
    44	{
    45		return GPOINTER_TO_INT(a) - GPOINTER_TO_INT(b);
    46	}
    47	
    48	static guint g_sequence_get_uint(GSequenceIter *iter)
    49	{
    50		return GPOINTER_TO_UINT(g_sequence_get(iter));
    51	}
    52	
    53	static void g_sequence_set_uint(GSequenceIter *iter, guint i)
    54	{
    55		g_sequence_set(iter, GUINT_TO_POINTER(i));
    56	}
    57	
    58	static GSequenceIter *g_sequence_insert_sorted_uint(GSequence *sequence, guint i)
    59	{
    60		return g_sequence_insert_sorted(sequence, GUINT_TO_POINTER(i), g_uintcmp, NULL);
    61	}
    62	
    63	static GSequenceIter *g_sequence_lookup_uint(GSequence *sequence, guint i)
    64	{
    65		return g_sequence_lookup(sequence, GUINT_TO_POINTER(i), g_uintcmp, NULL);
    66	}
    67	
    68	static GSequenceIter *g_sequence_search_uint(GSequence *sequence, guint i)
    69	{
    70		return g_sequence_search(sequence, GUINT_TO_POINTER(i), g_uintcmp, NULL);
    71	}
    72	
    73	static GSequenceIter *g_sequence_search_inf_uint(GSequence *sequence, guint i)
    74	{
    75		GSequenceIter *iter = g_sequence_iter_prev(g_sequence_search_uint(sequence, i));
    76	
    77		return !g_sequence_iter_is_end(iter) && g_sequence_get_uint(iter) <= i ? iter : NULL;
    78	}
    79	
    80	static gboolean gtk_menu_item_handle_idle_activate(gpointer user_data)
    81	{
    82		g_return_val_if_fail(GTK_IS_MENU_ITEM(user_data), G_SOURCE_REMOVE);
    83	
    84		gtk_menu_item_activate(user_data);
    85	
    86		return G_SOURCE_REMOVE;
    87	}
    88	
    89	static GPtrArray *unity_gtk_menu_shell_get_items(UnityGtkMenuShell *shell)
    90	{
    91		g_return_val_if_fail(UNITY_GTK_IS_MENU_SHELL(shell), NULL);
    92	
    93		if (shell->items == NULL)
    94		{
    95			GList *children;
    96			GList *iter;
    97			guint i;
    98	
    99			g_return_val_if_fail(shell->menu_shell != NULL, NULL);
   100	
   101			shell->items = g_ptr_array_new_with_free_func(g_object_unref);
   102			children     = gtk_container_get_children(GTK_CONTAINER(shell->menu_shell));
   103	
   104			for (iter = children, i = 0; iter != NULL; i++)
   105			{
   106				g_ptr_array_add(shell->items,
   107				                unity_gtk_menu_item_new(iter->data, shell, i));
   108				iter = g_list_next(iter);
   109			}
   110	
   111			g_list_free(children);
   112		}
   113	
   114		return shell->items;
   115	}
   116	
   117	static GPtrArray *unity_gtk_menu_shell_get_sections(UnityGtkMenuShell *shell)
   118	{
   119		g_return_val_if_fail(UNITY_GTK_IS_MENU_SHELL(shell), NULL);
   120	
   121		if (shell->sections == NULL)
   122		{
   123			GSequence *separator_indices = unity_gtk_menu_shell_get_separator_indices(shell);
   124			guint n                      = g_sequence_get_length(separator_indices);
   125			guint i;
   126	
   127			shell->sections = g_ptr_array_new_full(n + 1, g_object_unref);
   128	
   129			for (i = 0; i <= n; i++)
   130				g_ptr_array_add(shell->sections, unity_gtk_menu_section_new(shell, i));
   131		}
   132	
   133		return shell->sections;
   134	}
   135	
   136	static void unity_gtk_menu_shell_show_item(UnityGtkMenuShell *shell, UnityGtkMenuItem *item)
   137	{
   138		GSequence *visible_indices;
   139	
   140		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   141		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   142		g_warn_if_fail(item->parent_shell == shell);
   143	
   144		visible_indices = shell->visible_indices;
   145	
   146		if (visible_indices != NULL)
   147		{
   148			GSequence *separator_indices = shell->separator_indices;
   149			guint item_index             = item->item_index;
   150			GSequenceIter *insert_iter   = g_sequence_lookup_uint(visible_indices, item_index);
   151			gboolean already_visible     = insert_iter != NULL;
   152	
   153			if (!already_visible)
   154				insert_iter = g_sequence_insert_sorted_uint(visible_indices, item_index);
   155			else
   156				g_warn_if_reached();
   157	
   158			if (shell->action_group != NULL)
   159			{
   160				unity_gtk_action_group_connect_item(shell->action_group, item);
   161	
   162				if (item->child_shell != NULL)
   163				{
   164					if (item->child_shell_valid)
   165						unity_gtk_action_group_connect_shell(shell->action_group,
   166						                                     item->child_shell);
   167					else
   168						g_warn_if_reached();
   169				}
   170			}
   171	
   172			if (separator_indices != NULL)
   173			{
   174				GPtrArray *sections = shell->sections;
   175				GSequenceIter *separator_iter =
   176				    g_sequence_search_inf_uint(separator_indices, item_index);
   177				guint section_index =
   178				    separator_iter == NULL
   179				        ? 0
   180				        : g_sequence_iter_get_position(separator_iter) + 1;
   181				gboolean separator_already_visible =
   182				    separator_iter != NULL &&
   183				    g_sequence_get_uint(separator_iter) == item_index;
   184	
   185				if (!separator_already_visible)
   186				{
   187					if (unity_gtk_menu_item_is_separator(item))
   188					{
   189						g_sequence_insert_sorted_uint(separator_indices,
   190						                              item_index);
   191	
   192						if (sections != NULL)
   193						{
   194							UnityGtkMenuSection *section =
   195							    g_ptr_array_index(sections, section_index);
   196							GSequenceIter *section_iter =
   197							    unity_gtk_menu_section_get_begin_iter(section);
   198							guint position =
   199							    g_sequence_iter_get_position(insert_iter) -
   200							    g_sequence_iter_get_position(section_iter);
   201							UnityGtkMenuSection *new_section =
   202							    unity_gtk_menu_section_new(shell,
   203							                               section_index + 1);
   204							guint removed = g_menu_model_get_n_items(
   205							    G_MENU_MODEL(new_section));
   206							guint i;
   207	
   208							g_ptr_array_insert(sections,
   209							                   section_index + 1,
   210							                   new_section);
   211	
   212							for (i = section_index + 2; i < sections->len; i++)
   213								UNITY_GTK_MENU_SECTION(
   214								    g_ptr_array_index(sections, i))
   215								    ->section_index = i;
   216	
   217							if (removed)
   218								g_menu_model_items_changed(G_MENU_MODEL(
   219								                               section),
   220								                           position,
   221								                           removed,
   222								                           0);
   223	
   224							g_menu_model_items_changed(G_MENU_MODEL(shell),
   225							                           section_index + 1,
   226							                           0,
   227							                           1);
   228						}
   229					}
   230					else
   231					{
   232						if (sections != NULL)
   233						{
   234							UnityGtkMenuSection *section =
   235							    g_ptr_array_index(sections, section_index);
   236							GSequenceIter *section_iter =
   237							    unity_gtk_menu_section_get_begin_iter(section);
   238							guint position =
   239							    g_sequence_iter_get_position(insert_iter) -
   240							    g_sequence_iter_get_position(section_iter);
   241	
   242							g_menu_model_items_changed(G_MENU_MODEL(section),
   243							                           position,
   244							                           0,
   245							                           1);
   246						}
   247					}
   248				}
   249				else
   250					g_warn_if_reached();
   251			}
   252		}
   253	}
   254	
   255	static void unity_gtk_menu_shell_hide_item(UnityGtkMenuShell *shell, UnityGtkMenuItem *item)
   256	{
   257		GSequence *visible_indices;
   258	
   259		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   260		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   261		g_warn_if_fail(item->parent_shell == shell);
   262	
   263		visible_indices = shell->visible_indices;
   264	
   265		if (visible_indices != NULL)
   266		{
   267			GSequence *separator_indices = shell->separator_indices;
   268			guint item_index             = item->item_index;
   269			GSequenceIter *visible_iter  = g_sequence_lookup_uint(visible_indices, item_index);
   270	
   271			if (shell->action_group != NULL)
   272			{
   273				if (item->child_shell != NULL)
   274				{
   275					if (item->child_shell_valid)
   276						unity_gtk_action_group_disconnect_shell(shell->action_group,
   277						                                        item->child_shell);
   278					else
   279						g_warn_if_reached();
   280				}
   281	
   282				unity_gtk_action_group_disconnect_item(shell->action_group, item);
   283			}
   284	
   285			if (separator_indices != NULL)
   286			{
   287				if (unity_gtk_menu_item_is_separator(item))
   288				{
   289					GSequenceIter *separator_iter =
   290					    g_sequence_lookup_uint(separator_indices, item_index);
   291	
   292					if (separator_iter != NULL)
   293					{
   294						GPtrArray *sections = shell->sections;
   295						guint section_index =
   296						    g_sequence_iter_get_position(separator_iter);
   297	
   298						if (shell->sections != NULL)
   299						{
   300							UnityGtkMenuSection *section =
   301							    g_ptr_array_index(sections, section_index);
   302							UnityGtkMenuSection *next_section =
   303							    g_ptr_array_index(sections, section_index + 1);
   304							guint position =
   305							    g_menu_model_get_n_items(G_MENU_MODEL(section));
   306							guint added = g_menu_model_get_n_items(
   307							    G_MENU_MODEL(next_section));
   308							guint i;
   309	
   310							g_sequence_remove(separator_iter);
   311	
   312							if (visible_iter != NULL)
   313								g_sequence_remove(visible_iter);
   314							else
   315								g_warn_if_reached();
   316	
   317							g_menu_model_items_changed(G_MENU_MODEL(shell),
   318							                           section_index + 1,
   319							                           1,
   320							                           0);
   321	
   322							if (added)
   323								g_menu_model_items_changed(G_MENU_MODEL(
   324								                               section),
   325								                           position,
   326								                           0,
   327								                           added);
   328	
   329							g_ptr_array_remove_index(sections,
   330							                         section_index + 1);
   331	
   332							for (i = section_index + 1; i < sections->len; i++)
   333								UNITY_GTK_MENU_SECTION(
   334								    g_ptr_array_index(sections, i))
   335								    ->section_index = i;
   336						}
   337						else
   338						{
   339							g_sequence_remove(separator_iter);
   340	
   341							if (visible_iter != NULL)
   342								g_sequence_remove(visible_iter);
   343							else
   344								g_warn_if_reached();
   345						}
   346					}
   347					else
   348					{
   349						g_warn_if_reached();
   350	
   351						if (visible_iter != NULL)
   352							g_sequence_remove(visible_iter);
   353						else
   354							g_warn_if_reached();
   355					}
   356				}
   357				else
   358				{
   359					if (visible_iter != NULL)
   360					{
   361						GPtrArray *sections = shell->sections;
   362						GSequenceIter *separator_iter =
   363						    g_sequence_search_inf_uint(separator_indices,
   364						                               item_index);
   365						guint section_index =
   366						    separator_iter == NULL
   367						        ? 0
   368						        : g_sequence_iter_get_position(separator_iter) + 1;
   369	
   370						if (shell->sections != NULL)
   371						{
   372							UnityGtkMenuSection *section =
   373							    g_ptr_array_index(sections, section_index);
   374							GSequenceIter *section_iter =
   375							    unity_gtk_menu_section_get_begin_iter(section);
   376							guint position =
   377							    g_sequence_iter_get_position(visible_iter) -
   378							    g_sequence_iter_get_position(section_iter);
   379	
   380							g_sequence_remove(visible_iter);
   381							g_menu_model_items_changed(G_MENU_MODEL(section),
   382							                           position,
   383							                           1,
   384							                           0);
   385						}
   386					}
   387					else
   388						g_warn_if_reached();
   389				}
   390			}
   391			else
   392			{
   393				if (visible_iter != NULL)
   394					g_sequence_remove(visible_iter);
   395				else
   396					g_warn_if_reached();
   397			}
   398		}
   399	}
   400	
   401	static void unity_gtk_menu_shell_update_item(UnityGtkMenuShell *shell, UnityGtkMenuItem *item)
   402	{
   403		GSequence *visible_indices;
   404		GSequenceIter *visible_iter;
   405	
   406		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   407		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   408		g_warn_if_fail(item->parent_shell == shell);
   409	
   410		visible_indices = unity_gtk_menu_shell_get_visible_indices(shell);
   411		visible_iter    = g_sequence_lookup_uint(visible_indices, item->item_index);
   412	
   413		if (visible_iter != NULL)
   414		{
   415			GSequence *separator_indices;
   416			GSequenceIter *separator_iter;
   417			guint section_index;
   418			GPtrArray *sections;
   419			UnityGtkMenuSection *section;
   420			GSequenceIter *section_iter;
   421			guint position;
   422	
   423			separator_indices = unity_gtk_menu_shell_get_separator_indices(shell);
   424			separator_iter    = g_sequence_search_inf_uint(separator_indices, item->item_index);
   425			section_index =
   426			    separator_iter == NULL ? 0 : g_sequence_iter_get_position(separator_iter) + 1;
   427			sections     = unity_gtk_menu_shell_get_sections(shell);
   428			section      = g_ptr_array_index(sections, section_index);
   429			section_iter = unity_gtk_menu_section_get_begin_iter(section);
   430			position     = g_sequence_iter_get_position(visible_iter) -
   431			           g_sequence_iter_get_position(section_iter);
   432	
   433			g_menu_model_items_changed(G_MENU_MODEL(section), position, 1, 1);
   434		}
   435	}
   436	
   437	static void unity_gtk_menu_shell_handle_item_visible(UnityGtkMenuShell *shell,
   438	                                                     UnityGtkMenuItem *item)
   439	{
   440		GSequence *visible_indices;
   441	
   442		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   443		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   444		g_warn_if_fail(item->parent_shell == shell);
   445	
   446		visible_indices = shell->visible_indices;
   447	
   448		if (visible_indices != NULL)
   449		{
   450			GSequenceIter *visible_iter =
   451			    g_sequence_lookup_uint(visible_indices, item->item_index);
   452			gboolean was_visible = visible_iter != NULL;
   453			gboolean is_visible  = unity_gtk_menu_item_is_visible(item);
   454	
   455			if (!was_visible && is_visible)
   456				unity_gtk_menu_shell_show_item(shell, item);
   457			else if (was_visible && !is_visible)
   458				unity_gtk_menu_shell_hide_item(shell, item);
   459		}
   460	}
   461	
   462	static void unity_gtk_menu_shell_handle_item_sensitive(UnityGtkMenuShell *shell,
   463	                                                       UnityGtkMenuItem *item)
   464	{
   465		GActionGroup *action_group;
   466		UnityGtkAction *action;
   467	
   468		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   469		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   470		g_warn_if_fail(item->parent_shell == shell);
   471	
   472		action_group = G_ACTION_GROUP(shell->action_group);
   473		action       = item->action;
   474	
   475		if (action_group != NULL && action != NULL)
   476		{
   477			gboolean enabled = unity_gtk_menu_item_is_sensitive(item);
   478	
   479			g_action_group_action_enabled_changed(action_group, action->name, enabled);
   480		}
   481	}
   482	
   483	static void unity_gtk_menu_shell_handle_item_label(UnityGtkMenuShell *shell, UnityGtkMenuItem *item)
   484	{
   485		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   486		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   487		g_warn_if_fail(item->parent_shell == shell);
   488	
   489		g_free(item->label_label);
   490		item->label_label = NULL;
   491	
   492		unity_gtk_menu_shell_update_item(shell, item);
   493	}
   494	
   495	static void unity_gtk_menu_shell_handle_item_use_underline(UnityGtkMenuShell *shell,
   496	                                                           UnityGtkMenuItem *item)
   497	{
   498		unity_gtk_menu_shell_handle_item_label(shell, item);
   499	}
   500	
   501	static void unity_gtk_menu_shell_handle_item_accel_path(UnityGtkMenuShell *shell,
   502	                                                        UnityGtkMenuItem *item)
   503	{
   504		unity_gtk_menu_shell_update_item(shell, item);
   505	}
   506	
   507	static void unity_gtk_menu_shell_handle_item_active(UnityGtkMenuShell *shell,
   508	                                                    UnityGtkMenuItem *item)
   509	{
   510		GActionGroup *action_group;
   511		UnityGtkAction *action;
   512	
   513		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   514		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   515		g_warn_if_fail(item->parent_shell == shell);
   516	
   517		action_group = G_ACTION_GROUP(shell->action_group);
   518		action       = item->action;
   519	
   520		if (action_group != NULL && action != NULL)
   521		{
   522			if (action->items_by_name != NULL)
   523			{
   524				const char *name = NULL;
   525				GHashTableIter iter;
   526				gpointer key;
   527				gpointer value;
   528	
   529				g_hash_table_iter_init(&iter, action->items_by_name);
   530				while (name == NULL && g_hash_table_iter_next(&iter, &key, &value))
   531					if (unity_gtk_menu_item_is_active(value))
   532						name = key;
   533	
   534				if (name != NULL)
   535				{
   536					GVariant *state = g_variant_new_string(name);
   537	
   538					g_action_group_action_state_changed(action_group,
   539					                                    action->name,
   540					                                    state);
   541				}
   542				else
   543					g_action_group_action_state_changed(action_group,
   544					                                    action->name,
   545					                                    NULL);
   546			}
   547			else if (unity_gtk_menu_item_is_check(item))
   548			{
   549				gboolean active = unity_gtk_menu_item_is_active(item);
   550				GVariant *state = g_variant_new_boolean(active);
   551	
   552				g_action_group_action_state_changed(action_group, action->name, state);
   553			}
   554		}
   555	}
   556	
   557	static void unity_gtk_menu_shell_handle_item_parent(UnityGtkMenuShell *shell,
   558	                                                    UnityGtkMenuItem *item)
   559	{
   560		GtkMenuItem *menu_item;
   561		GtkWidget *parent;
   562	
   563		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   564		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   565		g_warn_if_fail(item->parent_shell == shell);
   566	
   567		menu_item = item->menu_item;
   568		parent    = gtk_widget_get_parent(GTK_WIDGET(menu_item));
   569	
   570		if (parent == NULL)
   571		{
   572			GPtrArray *items = shell->items;
   573	
   574			if (unity_gtk_menu_item_is_visible(item))
   575				unity_gtk_menu_shell_hide_item(shell, item);
   576	
   577			if (items != NULL)
   578			{
   579				GSequence *visible_indices   = shell->visible_indices;
   580				GSequence *separator_indices = shell->separator_indices;
   581				guint item_index             = item->item_index;
   582				guint i;
   583	
   584				g_ptr_array_remove_index(items, item_index);
   585	
   586				for (i = item_index; i < items->len; i++)
   587					UNITY_GTK_MENU_ITEM(g_ptr_array_index(items, i))->item_index = i;
   588	
   589				if (visible_indices != NULL)
   590				{
   591					GSequenceIter *iter =
   592					    g_sequence_search_uint(visible_indices, item_index);
   593	
   594					while (!g_sequence_iter_is_end(iter))
   595					{
   596						g_sequence_set_uint(iter, g_sequence_get_uint(iter) - 1);
   597						iter = g_sequence_iter_next(iter);
   598					}
   599				}
   600	
   601				if (separator_indices != NULL)
   602				{
   603					GSequenceIter *iter =
   604					    g_sequence_search_uint(separator_indices, item_index);
   605	
   606					while (!g_sequence_iter_is_end(iter))
   607					{
   608						g_sequence_set_uint(iter, g_sequence_get_uint(iter) - 1);
   609						iter = g_sequence_iter_next(iter);
   610					}
   611				}
   612			}
   613		}
   614	}
   615	
   616	static void unity_gtk_menu_shell_handle_item_submenu(UnityGtkMenuShell *shell,
   617	                                                     UnityGtkMenuItem *item)
   618	{
   619		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   620		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
   621		g_warn_if_fail(item->parent_shell == shell);
   622	
   623		if (shell->action_group != NULL)
   624		{
   625			/* If a submenu was added or removed, we need to update the submenu action. */
   626			unity_gtk_action_group_disconnect_item(shell->action_group, item);
   627			unity_gtk_action_group_connect_item(shell->action_group, item);
   628		}
   629	
   630		if (item->child_shell_valid)
   631		{
   632			GtkMenuShell *old_submenu =
   633			    item->child_shell != NULL ? item->child_shell->menu_shell : NULL;
   634			GtkMenuShell *new_submenu =
   635			    item->menu_item != NULL
   636			        ? GTK_MENU_SHELL(gtk_menu_item_get_submenu(item->menu_item))
   637			        : NULL;
   638	
   639			if (new_submenu != old_submenu)
   640			{
   641				UnityGtkMenuShell *child_shell = item->child_shell;
   642				GSequence *visible_indices =
   643				    unity_gtk_menu_shell_get_visible_indices(shell);
   644				GSequence *separator_indices =
   645				    unity_gtk_menu_shell_get_separator_indices(shell);
   646				GSequenceIter *separator_iter =
   647				    g_sequence_search_inf_uint(separator_indices, item->item_index);
   648				guint section_index =
   649				    separator_iter == NULL
   650				        ? 0
   651				        : g_sequence_iter_get_position(separator_iter) + 1;
   652				GPtrArray *sections          = unity_gtk_menu_shell_get_sections(shell);
   653				UnityGtkMenuSection *section = g_ptr_array_index(sections, section_index);
   654				GSequenceIter *section_iter =
   655				    unity_gtk_menu_section_get_begin_iter(section);
   656				GSequenceIter *visible_iter =
   657				    g_sequence_lookup_uint(visible_indices, item->item_index);
   658				guint position = g_sequence_iter_get_position(visible_iter) -
   659				                 g_sequence_iter_get_position(section_iter);
   660	
   661				if (child_shell != NULL)
   662				{
   663					item->child_shell = NULL;
   664					g_object_unref(child_shell);
   665				}
   666	
   667				item->child_shell_valid = FALSE;
   668	
   669				g_menu_model_items_changed(G_MENU_MODEL(section), position, 1, 1);
   670			}
   671		}
   672	}
   673	
   674	static void unity_gtk_menu_shell_handle_shell_insert(GtkMenuShell *menu_shell, GtkWidget *child,
   675	                                                     gint position, gpointer user_data)
   676	{
   677		UnityGtkMenuShell *shell;
   678		GPtrArray *items;
   679	
   680		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(user_data));
   681	
   682		if (unity_gtk_menu_shell_is_debug())
   683			g_print("%s ((%s *) %p, (%s *) %p \"%s\", %d, (%s *) %p)\n",
   684			        G_STRFUNC,
   685			        G_OBJECT_TYPE_NAME(menu_shell),
   686			        menu_shell,
   687			        G_OBJECT_TYPE_NAME(child),
   688			        child,
   689			        gtk_menu_item_get_label(GTK_MENU_ITEM(child)),
   690			        position,
   691			        G_OBJECT_TYPE_NAME(user_data),
   692			        user_data);
   693	
   694		shell = UNITY_GTK_MENU_SHELL(user_data);
   695		items = shell->items;
   696	
   697		if (items != NULL)
   698		{
   699			UnityGtkMenuItem *item;
   700			GtkMenuItem *menu_item;
   701			GSequence *visible_indices;
   702			GSequence *separator_indices;
   703			guint i;
   704	
   705			if (position < 0)
   706				position = items->len;
   707	
   708			menu_item = GTK_MENU_ITEM(child);
   709			item      = unity_gtk_menu_item_new(menu_item, shell, position);
   710			g_ptr_array_insert(items, position, item);
   711	
   712			for (i = position + 1; i < items->len; i++)
   713				UNITY_GTK_MENU_ITEM(g_ptr_array_index(items, i))->item_index = i;
   714	
   715			visible_indices   = shell->visible_indices;
   716			separator_indices = shell->separator_indices;
   717	
   718			if (visible_indices != NULL)
   719			{
   720				GSequenceIter *iter = g_sequence_search_uint(visible_indices, position - 1);
   721	
   722				while (!g_sequence_iter_is_end(iter))
   723				{
   724					g_sequence_set_uint(iter, g_sequence_get_uint(iter) + 1);
   725					iter = g_sequence_iter_next(iter);
   726				}
   727			}
   728	
   729			if (separator_indices != NULL)
   730			{
   731				GSequenceIter *iter =
   732				    g_sequence_search_uint(separator_indices, position - 1);
   733	
   734				while (!g_sequence_iter_is_end(iter))
   735				{
   736					g_sequence_set_uint(iter, g_sequence_get_uint(iter) + 1);
   737					iter = g_sequence_iter_next(iter);
   738				}
   739			}
   740	
   741			if (unity_gtk_menu_item_is_visible(item))
   742				unity_gtk_menu_shell_show_item(shell, item);
   743		}
   744	}
   745	
   746	static void unity_gtk_menu_shell_set_has_mnemonics(UnityGtkMenuShell *shell, gboolean has_mnemonics)
   747	{
   748		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   749	
   750		if (has_mnemonics != shell->has_mnemonics)
   751		{
   752			shell->has_mnemonics = has_mnemonics;
   753	
   754			if (shell->items != NULL)
   755			{
   756				guint i;
   757	
   758				for (i = 0; i < shell->items->len; i++)
   759					unity_gtk_menu_shell_handle_item_label(
   760					    shell, g_ptr_array_index(shell->items, i));
   761			}
   762		}
   763	}
   764	
   765	static void unity_gtk_menu_shell_handle_settings_notify(GObject *object, GParamSpec *pspec,
   766	                                                        gpointer user_data)
   767	{
   768		gboolean has_mnemonics;
   769	
   770		g_return_if_fail(GTK_IS_SETTINGS(object));
   771		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(user_data));
   772	
   773		g_object_get(GTK_SETTINGS(object), "gtk-enable-mnemonics", &has_mnemonics, NULL);
   774	
   775		unity_gtk_menu_shell_set_has_mnemonics(UNITY_GTK_MENU_SHELL(user_data), has_mnemonics);
   776	}
   777	
   778	static void unity_gtk_menu_shell_clear_menu_shell(UnityGtkMenuShell *shell);
   779	
   780	static void unity_gtk_menu_shell_set_menu_shell(UnityGtkMenuShell *shell, GtkMenuShell *menu_shell)
   781	{
   782		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   783	
   784		if (menu_shell != shell->menu_shell)
   785		{
   786			GPtrArray *items             = shell->items;
   787			GPtrArray *sections          = shell->sections;
   788			GSequence *visible_indices   = shell->visible_indices;
   789			GSequence *separator_indices = shell->separator_indices;
   790	
   791			if (shell->action_group != NULL)
   792				unity_gtk_action_group_disconnect_shell(shell->action_group, shell);
   793	
   794			if (shell->menu_shell != NULL)
   795				g_signal_handlers_disconnect_by_data(shell->menu_shell, shell);
   796	
   797			if (separator_indices != NULL)
   798			{
   799				shell->separator_indices = NULL;
   800				g_sequence_free(separator_indices);
   801			}
   802	
   803			if (visible_indices != NULL)
   804			{
   805				shell->visible_indices = NULL;
   806				g_sequence_free(visible_indices);
   807			}
   808	
   809			if (sections != NULL)
   810			{
   811				shell->sections = NULL;
   812				g_ptr_array_unref(sections);
   813			}
   814	
   815			if (items != NULL)
   816			{
   817				shell->items = NULL;
   818				g_ptr_array_unref(items);
   819			}
   820	
   821			if (shell->menu_shell != NULL)
   822				g_object_steal_qdata(G_OBJECT(shell->menu_shell), menu_shell_quark());
   823	
   824			shell->menu_shell = menu_shell;
   825	
   826			if (menu_shell != NULL)
   827			{
   828				g_object_set_qdata_full(G_OBJECT(menu_shell),
   829				                        menu_shell_quark(),
   830				                        shell,
   831				                        (GDestroyNotify)
   832				                            unity_gtk_menu_shell_clear_menu_shell);
   833	
   834				g_signal_connect(menu_shell,
   835				                 "insert",
   836				                 G_CALLBACK(unity_gtk_menu_shell_handle_shell_insert),
   837				                 shell);
   838			}
   839		}
   840	}
   841	
   842	static void unity_gtk_menu_shell_clear_menu_shell(UnityGtkMenuShell *shell)
   843	{
   844		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
   845	
   846		unity_gtk_menu_shell_set_menu_shell(shell, NULL);
   847	}
   848	
   849	static void unity_gtk_menu_shell_dispose(GObject *object)
   850	{
   851		UnityGtkMenuShell *shell;
   852		GtkSettings *settings;
   853	
   854		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(object));
   855	
   856		shell    = UNITY_GTK_MENU_SHELL(object);
   857		settings = gtk_settings_get_default();
   858	
   859		unity_gtk_menu_shell_set_menu_shell(shell, NULL);
   860	
   861		if (settings != NULL)
   862			g_signal_handlers_disconnect_by_data(settings, shell);
   863	
   864		G_OBJECT_CLASS(unity_gtk_menu_shell_parent_class)->dispose(object);
   865	}
   866	
   867	static gboolean unity_gtk_menu_shell_is_mutable(GMenuModel *model)
   868	{
   869		g_return_val_if_fail(UNITY_GTK_IS_MENU_SHELL(model), TRUE);
   870	
   871		return TRUE;
   872	}
   873	
   874	static gint unity_gtk_menu_shell_get_n_items(GMenuModel *model)
   875	{
   876		g_return_val_if_fail(UNITY_GTK_IS_MENU_SHELL(model), 0);
   877	
   878		return unity_gtk_menu_shell_get_sections(UNITY_GTK_MENU_SHELL(model))->len;
   879	}
   880	
   881	static void unity_gtk_menu_shell_get_item_attributes(GMenuModel *model, gint item_index,
   882	                                                     GHashTable **attributes)
   883	{
   884		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(model));
   885		g_return_if_fail(0 <= item_index && item_index < g_menu_model_get_n_items(model));
   886		g_return_if_fail(attributes != NULL);
   887	
   888		*attributes =
   889		    g_hash_table_new_full(g_str_hash, g_str_equal, NULL, (GDestroyNotify)g_variant_unref);
   890	}
   891	
   892	static void unity_gtk_menu_shell_get_item_links(GMenuModel *model, gint item_index,
   893	                                                GHashTable **links)
   894	{
   895		UnityGtkMenuShell *shell;
   896		GPtrArray *sections;
   897		UnityGtkMenuSection *section;
   898	
   899		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(model));
   900		g_return_if_fail(0 <= item_index && item_index < g_menu_model_get_n_items(model));
   901		g_return_if_fail(links != NULL);
   902	
   903		shell    = UNITY_GTK_MENU_SHELL(model);
   904		sections = unity_gtk_menu_shell_get_sections(shell);
   905		section  = g_ptr_array_index(sections, item_index);
   906	
   907		*links = g_hash_table_new_full(g_str_hash, g_str_equal, NULL, g_object_unref);
   908		g_hash_table_insert(*links, G_MENU_LINK_SECTION, g_object_ref(section));
   909	}
   910	
   911	static void unity_gtk_menu_shell_class_init(UnityGtkMenuShellClass *klass)
   912	{
   913		GObjectClass *object_class        = G_OBJECT_CLASS(klass);
   914		GMenuModelClass *menu_model_class = G_MENU_MODEL_CLASS(klass);
   915	
   916		object_class->dispose                 = unity_gtk_menu_shell_dispose;
   917		menu_model_class->is_mutable          = unity_gtk_menu_shell_is_mutable;
   918		menu_model_class->get_n_items         = unity_gtk_menu_shell_get_n_items;
   919		menu_model_class->get_item_attributes = unity_gtk_menu_shell_get_item_attributes;
   920		menu_model_class->get_item_links      = unity_gtk_menu_shell_get_item_links;
   921	}
   922	
   923	static void unity_gtk_menu_shell_init(UnityGtkMenuShell *self)
   924	{
   925		self->has_mnemonics = TRUE;
   926	}
   927	
   928	/**
   929	 * unity_gtk_menu_shell_new:
   930	 * @menu_shell: a #GtkMenuShell to watch.
   931	 *
   932	 * Creates a new #UnityGtkMenuShell based on the contents of the given
   933	 * @menu_shell. Any subsequent changes to @menu_shell are reflected in
   934	 * the returned #UnityGtkMenuShell.
   935	 *
   936	 * Returns: a new #UnityGtkMenuShell based on @menu_shell.
   937	 */
   938	UnityGtkMenuShell *unity_gtk_menu_shell_new(GtkMenuShell *menu_shell)
   939	{
   940		UnityGtkMenuShell *shell = g_object_new(UNITY_GTK_TYPE_MENU_SHELL, NULL);
   941		GtkSettings *settings    = gtk_settings_get_default();
   942	
   943		if (settings != NULL)
   944		{
   945			g_signal_connect(settings,
   946			                 "notify::gtk-enable-mnemonics",
   947			                 G_CALLBACK(unity_gtk_menu_shell_handle_settings_notify),
   948			                 shell);
   949			g_object_get(settings, "gtk-enable-mnemonics", &shell->has_mnemonics, NULL);
   950		}
   951	
   952		unity_gtk_menu_shell_set_menu_shell(shell, menu_shell);
   953	
   954		return shell;
   955	}
   956	
   957	UnityGtkMenuShell *unity_gtk_menu_shell_new_internal(GtkMenuShell *menu_shell)
   958	{
   959		UnityGtkMenuShell *shell = g_object_new(UNITY_GTK_TYPE_MENU_SHELL, NULL);
   960	
   961		unity_gtk_menu_shell_set_menu_shell(shell, menu_shell);
   962	
   963		return shell;
   964	}
   965	
   966	UnityGtkMenuItem *unity_gtk_menu_shell_get_item(UnityGtkMenuShell *shell, guint index)
   967	{
   968		GPtrArray *items;
   969	
   970		g_return_val_if_fail(UNITY_GTK_IS_MENU_SHELL(shell), NULL);
   971	
   972		items = unity_gtk_menu_shell_get_items(shell);
   973	
   974		g_return_val_if_fail(index < items->len, NULL);
   975	
   976		return g_ptr_array_index(items, index);
   977	}
   978	
   979	GSequence *unity_gtk_menu_shell_get_visible_indices(UnityGtkMenuShell *shell)
   980	{
   981		g_return_val_if_fail(UNITY_GTK_IS_MENU_SHELL(shell), NULL);
   982	
   983		if (shell->visible_indices == NULL)
   984		{
   985			GPtrArray *items = unity_gtk_menu_shell_get_items(shell);
   986			guint i;
   987	
   988			shell->visible_indices = g_sequence_new(NULL);
   989	
   990			for (i = 0; i < items->len; i++)
   991			{
   992				UnityGtkMenuItem *item = g_ptr_array_index(items, i);
   993	
   994				if (unity_gtk_menu_item_is_visible(item))
   995					g_sequence_append(shell->visible_indices, GUINT_TO_POINTER(i));
   996			}
   997	
   998			if (shell->action_group != NULL)
   999				unity_gtk_action_group_connect_shell(shell->action_group, shell);
  1000		}
  1001	
  1002		return shell->visible_indices;
  1003	}
  1004	
  1005	GSequence *unity_gtk_menu_shell_get_separator_indices(UnityGtkMenuShell *shell)
  1006	{
  1007		g_return_val_if_fail(UNITY_GTK_IS_MENU_SHELL(shell), NULL);
  1008	
  1009		unity_gtk_menu_shell_get_visible_indices(shell);
  1010	
  1011		if (shell->separator_indices == NULL)
  1012		{
  1013			GPtrArray *items = unity_gtk_menu_shell_get_items(shell);
  1014			guint i;
  1015	
  1016			shell->separator_indices = g_sequence_new(NULL);
  1017	
  1018			for (i = 0; i < items->len; i++)
  1019			{
  1020				UnityGtkMenuItem *item = g_ptr_array_index(items, i);
  1021	
  1022				if (unity_gtk_menu_item_is_visible(item) &&
  1023				    unity_gtk_menu_item_is_separator(item))
  1024					g_sequence_append(shell->separator_indices, GUINT_TO_POINTER(i));
  1025			}
  1026		}
  1027	
  1028		return shell->separator_indices;
  1029	}
  1030	
  1031	void unity_gtk_menu_shell_handle_item_notify(UnityGtkMenuShell *shell, UnityGtkMenuItem *item,
  1032	                                             const char *property)
  1033	{
  1034		static const char *visible_name;
  1035		static const char *sensitive_name;
  1036		static const char *label_name;
  1037		static const char *use_underline_name;
  1038		static const char *accel_path_name;
  1039		static const char *active_name;
  1040		static const char *parent_name;
  1041		static const char *submenu_name;
  1042	
  1043		const char *name;
  1044	
  1045		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
  1046		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
  1047	
  1048		if (G_UNLIKELY(visible_name == NULL))
  1049			visible_name = g_intern_static_string("visible");
  1050		if (G_UNLIKELY(sensitive_name == NULL))
  1051			sensitive_name = g_intern_static_string("sensitive");
  1052		if (G_UNLIKELY(label_name == NULL))
  1053			label_name = g_intern_static_string("label");
  1054		if (G_UNLIKELY(use_underline_name == NULL))
  1055			use_underline_name = g_intern_static_string("use-underline");
  1056		if (G_UNLIKELY(accel_path_name == NULL))
  1057			accel_path_name = g_intern_static_string("accel-path");
  1058		if (G_UNLIKELY(active_name == NULL))
  1059			active_name = g_intern_static_string("active");
  1060		if (G_UNLIKELY(parent_name == NULL))
  1061			parent_name = g_intern_static_string("parent");
  1062		if (G_UNLIKELY(submenu_name == NULL))
  1063			submenu_name = g_intern_static_string("submenu");
  1064	
  1065		name = g_intern_string(property);
  1066	
  1067		if (unity_gtk_menu_shell_is_debug())
  1068			g_print("%s ((%s *) %p, (%s *) %p { \"%s\" }, %s)\n",
  1069			        G_STRFUNC,
  1070			        G_OBJECT_TYPE_NAME(shell),
  1071			        shell,
  1072			        G_OBJECT_TYPE_NAME(item),
  1073			        item,
  1074			        unity_gtk_menu_item_get_label(item),
  1075			        name);
  1076	
  1077		if (name == visible_name)
  1078			unity_gtk_menu_shell_handle_item_visible(shell, item);
  1079		else if (name == sensitive_name)
  1080			unity_gtk_menu_shell_handle_item_sensitive(shell, item);
  1081		else if (name == label_name)
  1082			unity_gtk_menu_shell_handle_item_label(shell, item);
  1083		else if (name == use_underline_name)
  1084			unity_gtk_menu_shell_handle_item_use_underline(shell, item);
  1085		else if (name == accel_path_name)
  1086			unity_gtk_menu_shell_handle_item_accel_path(shell, item);
  1087		else if (name == active_name)
  1088			unity_gtk_menu_shell_handle_item_active(shell, item);
  1089		else if (name == parent_name)
  1090			unity_gtk_menu_shell_handle_item_parent(shell, item);
  1091		else if (name == submenu_name)
  1092			unity_gtk_menu_shell_handle_item_submenu(shell, item);
  1093	}
  1094	
  1095	void unity_gtk_menu_shell_activate_item(UnityGtkMenuShell *shell, UnityGtkMenuItem *item)
  1096	{
  1097		g_return_if_fail(UNITY_GTK_IS_MENU_SHELL(shell));
  1098		g_return_if_fail(UNITY_GTK_IS_MENU_ITEM(item));
  1099	
  1100		if (item->menu_item != NULL)
  1101		{
  1102			if (GTK_IS_MENU(shell->menu_shell))
  1103				gtk_menu_set_active(GTK_MENU(shell->menu_shell), item->item_index);
  1104	
  1105			/*
  1106			 * We dispatch the menu item activation in an idle to fix LP: #1258669.
  1107			 *
  1108			 * We get a deadlock when the menu item is activated if something like
  1109			 * gtk_dialog_run () is called. gtk_dialog_run () releases the GDK lock
  1110			 * just before starting its own main loop, and tries to re-acquire it
  1111			 * once it terminates. For whatever reason, a direct call to
  1112			 * gtk_menu_item_activate () here causes the GDK lock to be acquired
  1113			 * before gtk_dialog_run () tries to acquire it, whereas dispatching it
  1114			 * using gdk_threads_add_idle_full () seems to cleanly acquire the lock
  1115			 * once only at the beginning, preventing the deadlock.
  1116			 *
  1117			 * Suspicion is that this was executing during the main context
  1118			 * iteration of gtk_main_iteration (), which grabs the GDK lock
  1119			 * immediately after. But it's still not clear how that's possible....
  1120			 */
  1121	
  1122			gdk_threads_add_idle_full(G_PRIORITY_DEFAULT_IDLE,
  1123			                          gtk_menu_item_handle_idle_activate,
  1124			                          g_object_ref(item->menu_item),
  1125			                          g_object_unref);
  1126		}
  1127	}
  1128	
  1129	void unity_gtk_menu_shell_print(UnityGtkMenuShell *shell, guint indent)
  1130	{
  1131		char *space;
  1132	
  1133		g_return_if_fail(shell == NULL || UNITY_GTK_IS_MENU_SHELL(shell));
  1134	
  1135		space = g_strnfill(indent, ' ');
  1136	
  1137		if (shell != NULL)
  1138		{
  1139			g_print("%s(%s *) %p\n",
  1140			        space,
  1141			        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(shell)),
  1142			        shell);
  1143	
  1144			if (shell->menu_shell != NULL)
  1145				g_print("%s  (%s *) %p\n",
  1146				        space,
  1147				        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(shell->menu_shell)),
  1148				        shell->menu_shell);
  1149	
  1150			if (shell->items != NULL)
  1151			{
  1152				guint i;
  1153	
  1154				for (i = 0; i < shell->items->len; i++)
  1155					unity_gtk_menu_item_print(g_ptr_array_index(shell->items, i),
  1156					                          indent + 2);
  1157			}
  1158	
  1159			if (shell->sections != NULL)
  1160			{
  1161				guint i;
  1162	
  1163				for (i = 0; i < shell->sections->len; i++)
  1164					unity_gtk_menu_section_print(g_ptr_array_index(shell->sections, i),
  1165					                             indent + 2);
  1166			}
  1167	
  1168			if (shell->visible_indices != NULL)
  1169			{
  1170				GSequenceIter *iter = g_sequence_get_begin_iter(shell->visible_indices);
  1171	
  1172				g_print("%s ", space);
  1173	
  1174				while (!g_sequence_iter_is_end(iter))
  1175				{
  1176					g_print(" %u", g_sequence_get_uint(iter));
  1177					iter = g_sequence_iter_next(iter);
  1178				}
  1179	
  1180				g_print("\n");
  1181			}
  1182	
  1183			if (shell->separator_indices != NULL)
  1184			{
  1185				GSequenceIter *iter = g_sequence_get_begin_iter(shell->separator_indices);
  1186	
  1187				g_print("%s ", space);
  1188	
  1189				while (!g_sequence_iter_is_end(iter))
  1190				{
  1191					g_print(" %u", g_sequence_get_uint(iter));
  1192					iter = g_sequence_iter_next(iter);
  1193				}
  1194	
  1195				g_print("\n");
  1196			}
  1197	
  1198			if (shell->action_group != NULL)
  1199				g_print("%s  (%s *) %p\n",
  1200				        space,
  1201				        G_OBJECT_CLASS_NAME(G_OBJECT_GET_CLASS(shell->action_group)),
  1202				        shell->action_group);
  1203		}
  1204		else
  1205			g_print("%sNULL\n", space);
  1206	
  1207		g_free(space);
  1208	}
  1209	
  1210	gboolean unity_gtk_menu_shell_is_debug(void)
  1211	{
  1212		return unity_gtk_menu_shell_debug;
  1213	}
  1214	
  1215	/**
  1216	 * unity_gtk_menu_shell_set_debug:
  1217	 * @debug: #TRUE to enable debugging output
  1218	 *
  1219	 * Sets if menu shell changes should be logged using g_print ().
  1220	 */
  1221	void unity_gtk_menu_shell_set_debug(gboolean debug)
  1222	{
  1223		unity_gtk_menu_shell_debug = debug;
  1224	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/lib/unity-gtk-menu-shell-private.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright 2012 Canonical Ltd.
     3	 *
     4	 * This program is free software: you can redistribute it and/or modify
     5	 * it under the terms of the GNU Lesser General Public License as published by
     6	 * the Free Software Foundation, version 3 of the License.
     7	 *
     8	 * This program is distributed in the hope that it will be useful,
     9	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    10	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    11	 * GNU Lesser General Public License for more details.
    12	 *
    13	 * You should have received a copy of the GNU Lesser General Public License
    14	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    15	 *
    16	 * Authors: Ryan Lortie <desrt@desrt.ca>
    17	 *          William Hua <william.hua@canonical.com>
    18	 */
    19	
    20	#ifndef __UNITY_GTK_MENU_SHELL_PRIVATE_H__
    21	#define __UNITY_GTK_MENU_SHELL_PRIVATE_H__
    22	
    23	#include "appmenu-gtk-menu-shell.h"
    24	#include "unity-gtk-menu-item-private.h"
    25	
    26	#include <glib-object.h>
    27	
    28	G_BEGIN_DECLS
    29	
    30	UnityGtkMenuShell *unity_gtk_menu_shell_new_internal(GtkMenuShell *menu_shell) G_GNUC_INTERNAL;
    31	
    32	UnityGtkMenuItem *unity_gtk_menu_shell_get_item(UnityGtkMenuShell *shell,
    33	                                                guint index) G_GNUC_INTERNAL;
    34	
    35	GSequence *unity_gtk_menu_shell_get_visible_indices(UnityGtkMenuShell *shell) G_GNUC_INTERNAL;
    36	
    37	GSequence *unity_gtk_menu_shell_get_separator_indices(UnityGtkMenuShell *shell) G_GNUC_INTERNAL;
    38	
    39	void unity_gtk_menu_shell_handle_item_notify(UnityGtkMenuShell *shell, UnityGtkMenuItem *item,
    40	                                             const char *property) G_GNUC_INTERNAL;
    41	
    42	void unity_gtk_menu_shell_activate_item(UnityGtkMenuShell *shell,
    43	                                        UnityGtkMenuItem *item) G_GNUC_INTERNAL;
    44	
    45	void unity_gtk_menu_shell_print(UnityGtkMenuShell *shell, guint indent) G_GNUC_INTERNAL;
    46	
    47	gboolean unity_gtk_menu_shell_is_debug(void) G_GNUC_INTERNAL;
    48	
    49	G_END_DECLS
    50	
    51	#endif /* __UNITY_GTK_MENU_SHELL_PRIVATE_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/LICENSE
--------------------------------------------------------------------------------
     1	
     2	GNU LESSER GENERAL PUBLIC LICENSE
     3	
     4	Version 3, 29 June 2007
     5	
     6	Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/>
     7	
     8	Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.
     9	
    10	This version of the GNU Lesser General Public License incorporates the terms and conditions of version 3 of the GNU General Public License, supplemented by the additional permissions listed below.
    11	0. Additional Definitions.
    12	
    13	As used herein, “this License” refers to version 3 of the GNU Lesser General Public License, and the “GNU GPL” refers to version 3 of the GNU General Public License.
    14	
    15	“The Library” refers to a covered work governed by this License, other than an Application or a Combined Work as defined below.
    16	
    17	An “Application” is any work that makes use of an interface provided by the Library, but which is not otherwise based on the Library. Defining a subclass of a class defined by the Library is deemed a mode of using an interface provided by the Library.
    18	
    19	A “Combined Work” is a work produced by combining or linking an Application with the Library. The particular version of the Library with which the Combined Work was made is also called the “Linked Version”.
    20	
    21	The “Minimal Corresponding Source” for a Combined Work means the Corresponding Source for the Combined Work, excluding any source code for portions of the Combined Work that, considered in isolation, are based on the Application, and not on the Linked Version.
    22	
    23	The “Corresponding Application Code” for a Combined Work means the object code and/or source code for the Application, including any data and utility programs needed for reproducing the Combined Work from the Application, but excluding the System Libraries of the Combined Work.
    24	1. Exception to Section 3 of the GNU GPL.
    25	
    26	You may convey a covered work under sections 3 and 4 of this License without being bound by section 3 of the GNU GPL.
    27	2. Conveying Modified Versions.
    28	
    29	If you modify a copy of the Library, and, in your modifications, a facility refers to a function or data to be supplied by an Application that uses the facility (other than as an argument passed when the facility is invoked), then you may convey a copy of the modified version:
    30	
    31	    a) under this License, provided that you make a good faith effort to ensure that, in the event an Application does not supply the function or data, the facility still operates, and performs whatever part of its purpose remains meaningful, or
    32	    b) under the GNU GPL, with none of the additional permissions of this License applicable to that copy.
    33	
    34	3. Object Code Incorporating Material from Library Header Files.
    35	
    36	The object code form of an Application may incorporate material from a header file that is part of the Library. You may convey such object code under terms of your choice, provided that, if the incorporated material is not limited to numerical parameters, data structure layouts and accessors, or small macros, inline functions and templates (ten or fewer lines in length), you do both of the following:
    37	
    38	    a) Give prominent notice with each copy of the object code that the Library is used in it and that the Library and its use are covered by this License.
    39	    b) Accompany the object code with a copy of the GNU GPL and this license document.
    40	
    41	4. Combined Works.
    42	
    43	You may convey a Combined Work under terms of your choice that, taken together, effectively do not restrict modification of the portions of the Library contained in the Combined Work and reverse engineering for debugging such modifications, if you also do each of the following:
    44	
    45	    a) Give prominent notice with each copy of the Combined Work that the Library is used in it and that the Library and its use are covered by this License.
    46	    b) Accompany the Combined Work with a copy of the GNU GPL and this license document.
    47	    c) For a Combined Work that displays copyright notices during execution, include the copyright notice for the Library among these notices, as well as a reference directing the user to the copies of the GNU GPL and this license document.
    48	    d) Do one of the following:
    49	        0) Convey the Minimal Corresponding Source under the terms of this License, and the Corresponding Application Code in a form suitable for, and under terms that permit, the user to recombine or relink the Application with a modified version of the Linked Version to produce a modified Combined Work, in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.
    50	        1) Use a suitable shared library mechanism for linking with the Library. A suitable mechanism is one that (a) uses at run time a copy of the Library already present on the user's computer system, and (b) will operate properly with a modified version of the Library that is interface-compatible with the Linked Version.
    51	    e) Provide Installation Information, but only if you would otherwise be required to provide such information under section 6 of the GNU GPL, and only to the extent that such information is necessary to install and execute a modified version of the Combined Work produced by recombining or relinking the Application with a modified version of the Linked Version. (If you use option 4d0, the Installation Information must accompany the Minimal Corresponding Source and Corresponding Application Code. If you use option 4d1, you must provide the Installation Information in the manner specified by section 6 of the GNU GPL for conveying Corresponding Source.)
    52	
    53	5. Combined Libraries.
    54	
    55	You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities that are not Applications and are not covered by this License, and convey such a combined library under terms of your choice, if you do both of the following:
    56	
    57	    a) Accompany the combined library with a copy of the same work based on the Library, uncombined with any other library facilities, conveyed under the terms of this License.
    58	    b) Give prominent notice with the combined library that part of it is a work based on the Library, and explaining where to find the accompanying uncombined form of the same work.
    59	
    60	6. Revised Versions of the GNU Lesser General Public License.
    61	
    62	The Free Software Foundation may publish revised and/or new versions of the GNU Lesser General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.
    63	
    64	Each version is given a distinguishing version number. If the Library as you received it specifies that a certain numbered version of the GNU Lesser General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that published version or of any later version published by the Free Software Foundation. If the Library as you received it does not specify a version number of the GNU Lesser General Public License, you may choose any version of the GNU Lesser General Public License ever published by the Free Software Foundation.
    65	
    66	If the Library as you received it specifies that a proxy can decide whether future versions of the GNU Lesser General Public License shall apply, that proxy's public statement of acceptance of any version is permanent authorization for you to choose that version for the Library.
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/meson.build
--------------------------------------------------------------------------------
     1	project('appmenu-gtk-module', 'c',
     2		meson_version: '>=0.61.0',
     3		version: '25.04',
     4		license: ['LGPL-3.0-or-later'],
     5	    default_options: [
     6	        'c_std=gnu11',
     7	        'buildtype=debugoptimized',
     8	        'warning_level=1'
     9	        ])
    10	
    11	##################
    12	# Module imports #
    13	##################
    14	
    15	gnome = import('gnome')
    16	i18n = import('i18n')
    17	pkgconfig = import('pkgconfig')
    18	
    19	###############
    20	# Directories #
    21	###############
    22	prefix = get_option('prefix')
    23	datadir = get_option('datadir')
    24	localedir = get_option('localedir')
    25	schema_dir = join_paths(get_option('datadir'), 'glib-2.0', 'schemas')
    26	docdir = join_paths(prefix,datadir, 'doc')
    27	
    28	################
    29	# Dependencies #
    30	################
    31	glib_ver = '>=2.52.0'
    32	giounix = dependency('gio-unix-2.0', version: glib_ver)
    33	
    34	gtk_versions = get_option('gtk')
    35	gtk2_requested = '2' in gtk_versions
    36	gtk3_requested = '3' in gtk_versions
    37	
    38	gtk2_ver = '>=2.24.0'
    39	gtk3_ver = '>=3.22.0'
    40	
    41	gtk2 = dependency('gtk+-2.0', version: gtk2_ver, required: gtk2_requested)
    42	gtk3 = dependency('gtk+-3.0', version: gtk3_ver, required: gtk3_requested)
    43	
    44	build_gtk2 = gtk2.found()
    45	build_gtk3 = gtk3.found()
    46	
    47	#################
    48	# Configuration #
    49	#################
    50	
    51	readmes = [
    52	    'README.md',
    53	    'TODO',
    54	    'AUTHORS'
    55	]
    56	install_data(readmes, install_dir : join_paths(get_option('datadir'), 'doc', meson.project_name()))
    57	install_data('LICENSE', install_dir : join_paths(get_option('datadir'), 'licenses', meson.project_name()))
    58	
    59	
    60	subdir('lib')
    61	subdir('src')
    62	subdir('data')
    63	subdir('docs')
    64	subdir('tests')
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/meson_options.txt
--------------------------------------------------------------------------------
     1	option('gtk', type: 'array', choices : ['2','3'],  value: ['2','3'], description: 'Supported GTK versions')
     2	option('tests', type : 'boolean', value : false, description: 'Parser tests')
     3	option('gtk_doc', type: 'boolean', value: false, description: 'Build API reference')
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/README.md
--------------------------------------------------------------------------------
     1	---
     2	Application Menu GTK+ Module
     3	---
     4	
     5	This is renamed port of [Launchpad repository](https://launchpad.net/unity-gtk-module) of Unity GTK+ Module.
     6	
     7	Unity GTK+ Module is small GTK Module than strips menus from all GTK programs, converts to MenuModel and send to AppMenu.
     8	Ubuntu users now does not need to install this.
     9	
    10	**REQUIRED DEPENDENCES**
    11	
    12	*All:*
    13	 * GLib (>= 2.50.0)
    14	 * GTK+ (>= 3.22.0)
    15	
    16	*GTK2 Support*
    17	 * GTK+ (>= 2.24.0)
    18	
    19	*Demos*
    20	 * valac (>= 0.24.0)
    21	 
    22	---
    23	Usage Instructions
    24	---
    25	**XFCE**
    26	- Type following into your console:
    27	`xfconf-query -c xsettings -p /Gtk/Modules -n -t string -s "appmenu-gtk-module"`
    28	
    29	**BUDGIE***
    30	- Type following into your console:
    31	`gsettings set org.gnome.settings-daemon.plugins.xsettings enabled-gtk-modules "['appmenu-gtk-module']"`
    32	
    33	**OTHER**
    34	- Create file .gtkrc-2.0 into your home directory, if it do not exists already
    35	    - Add to this file `gtk-modules="appmenu-gtk-module"`
    36	- Create file .config/gtk-3.0/settings.ini into your home directory, if it do not exists already
    37	Add to this file:
    38	    - If it is just created, `[Settings]`
    39	    - And then ``gtk-modules="appmenu-gtk-module"``
    40	
    41	**IF ABOVE DOES NOT WORK**
    42	* Add to .profile or .bashrc:
    43	
    44	```sh
    45	if [ -n "$GTK_MODULES" ]; then
    46	    GTK_MODULES="${GTK_MODULES}:appmenu-gtk-module"
    47	else
    48	    GTK_MODULES="appmenu-gtk-module"
    49	fi
    50	
    51	if [ -z "$UBUNTU_MENUPROXY" ]; then
    52	    UBUNTU_MENUPROXY=1
    53	fi
    54	
    55	export GTK_MODULES
    56	export UBUNTU_MENUPROXY
    57	```
    58	
    59	**IF NONE OF THESE ARE WORKING**
    60	* Add above snippet to any place where environment variables should set.
    61	
    62	**YOU SHOULD RELOGIN AFTER INSTALLING THIS MODULE FIRST TIME**
    63	
    64	
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/appmenu-gtk-module.c
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#include <gtk/gtk.h>
    26	
    27	#include "hijack.h"
    28	#include "support.h"
    29	
    30	static void sync_gtk2_settings()
    31	{
    32	#if GTK_MAJOR_VERSION < 3
    33		GParamSpec *pspec;
    34	
    35		pspec = g_object_class_find_property(g_type_class_ref(GTK_TYPE_SETTINGS),
    36		                                     "gtk-shell-shows-menubar");
    37	
    38		if (!G_IS_PARAM_SPEC(pspec))
    39		{
    40			gtk_settings_install_property(
    41			    g_param_spec_boolean("gtk-shell-shows-menubar",
    42			                         "Desktop shell shows the menubar",
    43			                         "Set to TRUE if the desktop environment is displaying the "
    44			                         "menubar, FALSE if the app should display it itself.",
    45			                         FALSE,
    46			                         G_PARAM_READWRITE));
    47		}
    48	#endif
    49	}
    50	
    51	void gtk_module_init(void)
    52	{
    53		if (gtk_module_should_run())
    54		{
    55			sync_gtk2_settings();
    56			watch_registrar_dbus();
    57			enable_debug();
    58			store_pre_hijacked();
    59			hijack_menu_bar_class_vtable(GTK_TYPE_MENU_BAR);
    60		}
    61	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/blacklist.c
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#include <gtk/gtk.h>
    26	
    27	#include "blacklist.h"
    28	#include "consts.h"
    29	
    30	static const char *const BLACKLIST[] = { "acroread",
    31		                                 "emacs",
    32		                                 "emacs23",
    33		                                 "emacs23-lucid",
    34		                                 "emacs24",
    35		                                 "emacs24-lucid",
    36		                                 "budgie-panel",
    37		                                 "mate-panel",
    38		                                 "mate-menu",
    39		                                 "vala-panel",
    40		                                 "wrapper-1.0",
    41		                                 "wrapper-2.0",
    42		                                 "indicator-applet",
    43		                                 "mate-indicator-applet",
    44		                                 "mate-indicator-applet-appmenu",
    45		                                 "mate-indicator-applet-complete",
    46		                                 "appmenu-mate",
    47		                                 NULL };
    48	
    49	static bool is_string_in_array(const char *string, GVariant *array)
    50	{
    51		GVariantIter iter;
    52		char *element;
    53	
    54		g_return_val_if_fail(array != NULL, false);
    55		g_return_val_if_fail(g_variant_is_of_type(array, G_VARIANT_TYPE("as")), false);
    56	
    57		g_variant_iter_init(&iter, array);
    58		while (g_variant_iter_loop(&iter, "&s", &element))
    59		{
    60			if (g_strcmp0(element, string) == 0)
    61				return true;
    62		}
    63	
    64		return false;
    65	}
    66	
    67	static bool is_listed(const char *name, const char *key)
    68	{
    69		GSettings *settings       = g_settings_new(UNITY_GTK_MODULE_SCHEMA);
    70		g_autoptr(GVariant) array = g_settings_get_value(settings, key);
    71		bool listed               = is_string_in_array(name, array);
    72		g_clear_object(&settings);
    73		return listed;
    74	}
    75	
    76	G_GNUC_INTERNAL
    77	bool is_blacklisted(const char *name)
    78	{
    79		guint n;
    80		guint i;
    81	
    82		n = sizeof(BLACKLIST) / sizeof(const char *);
    83	
    84		for (i = 0; i < n; i++)
    85		{
    86			if (g_strcmp0(name, BLACKLIST[i]) == 0)
    87				return !is_listed(name, WHITELIST_KEY);
    88		}
    89	
    90		return is_listed(name, BLACKLIST_KEY);
    91	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/blacklist.h
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#ifndef BLACKLIST_H
    26	#define BLACKLIST_H
    27	
    28	#include <glib.h>
    29	#include <stdbool.h>
    30	
    31	G_GNUC_INTERNAL bool is_blacklisted(const char *name);
    32	
    33	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/consts.h
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#ifndef CONSTS_H
    26	#define CONSTS_H
    27	
    28	#define UNITY_GTK_MODULE_SCHEMA "org.appmenu.gtk-module"
    29	#define BLACKLIST_KEY "blacklist"
    30	#define WHITELIST_KEY "whitelist"
    31	#define INNER_MENU_KEY "always-show-inner-menu"
    32	#define RUN_ON_WAYLAND "run-on-wayland"
    33	
    34	#define _GTK_UNIQUE_BUS_NAME "_GTK_UNIQUE_BUS_NAME"
    35	#define _UNITY_OBJECT_PATH "_UNITY_OBJECT_PATH"
    36	#define _GTK_MENUBAR_OBJECT_PATH "_GTK_MENUBAR_OBJECT_PATH"
    37	#define OBJECT_PATH "/org/appmenu/gtk/window"
    38	
    39	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/datastructs.c
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#include "datastructs.h"
    26	#include "datastructs-private.h"
    27	#include "platform.h"
    28	
    29	#include <appmenu-gtk-menu-shell.h>
    30	
    31	G_GNUC_INTERNAL G_DEFINE_QUARK(window_data, window_data);
    32	G_DEFINE_BOXED_TYPE(WindowData, window_data, (GBoxedCopyFunc)window_data_copy,
    33	                    (GBoxedFreeFunc)window_data_free);
    34	G_GNUC_INTERNAL G_DEFINE_QUARK(menu_shell_data, menu_shell_data);
    35	G_DEFINE_BOXED_TYPE(MenuShellData, menu_shell_data, (GBoxedCopyFunc)menu_shell_data_copy,
    36	                    (GBoxedFreeFunc)menu_shell_data_free);
    37	
    38	G_GNUC_INTERNAL WindowData *window_data_new(void)
    39	{
    40		return g_slice_new0(WindowData);
    41	}
    42	
    43	G_GNUC_INTERNAL void window_data_free(gpointer data)
    44	{
    45		WindowData *window_data = data;
    46	
    47		if (window_data != NULL)
    48		{
    49			GDBusConnection *session = g_bus_get_sync(G_BUS_TYPE_SESSION, NULL, NULL);
    50	
    51			if (window_data->action_group_export_id)
    52				g_dbus_connection_unexport_action_group(session,
    53				                                        window_data
    54				                                            ->action_group_export_id);
    55	
    56			if (window_data->menu_model_export_id)
    57				g_dbus_connection_unexport_menu_model(session,
    58				                                      window_data->menu_model_export_id);
    59	
    60			if (window_data->action_group != NULL)
    61				g_object_unref(window_data->action_group);
    62	
    63			if (window_data->menu_model != NULL)
    64				g_object_unref(window_data->menu_model);
    65	
    66			if (window_data->old_model != NULL)
    67				g_object_unref(window_data->old_model);
    68	
    69			if (window_data->menus != NULL)
    70				g_slist_free_full(window_data->menus, g_object_unref);
    71	
    72			g_slice_free(WindowData, window_data);
    73		}
    74	}
    75	
    76	G_GNUC_INTERNAL WindowData *window_data_copy(WindowData *source)
    77	{
    78		WindowData *ret             = window_data_new();
    79		ret->action_group_export_id = source->action_group_export_id;
    80		ret->menu_model_export_id   = source->menu_model_export_id;
    81		if (source->action_group != NULL)
    82			ret->action_group = g_object_ref(source->action_group);
    83	
    84		if (source->menu_model != NULL)
    85			ret->menu_model = g_object_ref(source->menu_model);
    86	
    87		if (source->old_model != NULL)
    88			ret->old_model = g_object_ref(source->old_model);
    89	
    90		if (source->menus != NULL)
    91			ret->menus = g_slist_copy_deep(source->menus, (GCopyFunc)g_object_ref, NULL);
    92	
    93		return ret;
    94	}
    95	
    96	G_GNUC_INTERNAL MenuShellData *menu_shell_data_new(void)
    97	{
    98		return g_slice_new0(MenuShellData);
    99	}
   100	
   101	G_GNUC_INTERNAL void menu_shell_data_free(gpointer data)
   102	{
   103		if (data != NULL)
   104			g_slice_free(MenuShellData, data);
   105	}
   106	
   107	G_GNUC_INTERNAL MenuShellData *menu_shell_data_copy(MenuShellData *source)
   108	{
   109		MenuShellData *ret = menu_shell_data_new();
   110		ret->window        = source->window;
   111		return ret;
   112	}
   113	
   114	G_GNUC_INTERNAL bool menu_shell_data_has_window(MenuShellData *source)
   115	{
   116		return source->window != NULL;
   117	}
   118	
   119	G_GNUC_INTERNAL GtkWindow *menu_shell_data_get_window(MenuShellData *source)
   120	{
   121		return source->window;
   122	}
   123	
   124	G_GNUC_INTERNAL MenuShellData *gtk_menu_shell_get_menu_shell_data(GtkMenuShell *menu_shell)
   125	{
   126		MenuShellData *menu_shell_data;
   127	
   128		g_return_val_if_fail(GTK_IS_MENU_SHELL(menu_shell), NULL);
   129	
   130		menu_shell_data = g_object_get_qdata(G_OBJECT(menu_shell), menu_shell_data_quark());
   131	
   132		if (menu_shell_data == NULL)
   133		{
   134			menu_shell_data = menu_shell_data_new();
   135	
   136			g_object_set_qdata_full(G_OBJECT(menu_shell),
   137			                        menu_shell_data_quark(),
   138			                        menu_shell_data,
   139			                        menu_shell_data_free);
   140		}
   141	
   142		return menu_shell_data;
   143	}
   144	
   145	G_GNUC_INTERNAL WindowData *gtk_window_get_window_data(GtkWindow *window)
   146	{
   147		WindowData *window_data = NULL;
   148	
   149		g_return_val_if_fail(GTK_IS_WINDOW(window), NULL);
   150	
   151	#if (defined(GDK_WINDOWING_WAYLAND))
   152		if (GDK_IS_WAYLAND_DISPLAY(gdk_display_get_default()))
   153			window_data = gtk_wayland_window_get_window_data(window);
   154	#endif
   155	#if (defined(GDK_WINDOWING_X11))
   156	#if GTK_MAJOR_VERSION == 3
   157		if (GDK_IS_X11_DISPLAY(gdk_display_get_default()))
   158	#endif
   159			window_data = gtk_x11_window_get_window_data(window);
   160	#endif
   161		return window_data;
   162	}
   163	
   164	G_GNUC_INTERNAL void gtk_window_disconnect_menu_shell(GtkWindow *window, GtkMenuShell *menu_shell)
   165	{
   166		WindowData *window_data;
   167		MenuShellData *menu_shell_data;
   168	
   169		g_return_if_fail(GTK_IS_WINDOW(window));
   170		g_return_if_fail(GTK_IS_MENU_SHELL(menu_shell));
   171	
   172		menu_shell_data = gtk_menu_shell_get_menu_shell_data(menu_shell);
   173	
   174		g_warn_if_fail(window == menu_shell_data->window);
   175	
   176		window_data = gtk_window_get_window_data(menu_shell_data->window);
   177	
   178		if (window_data != NULL)
   179		{
   180			GSList *iter;
   181			guint i = 0;
   182	
   183			if (window_data->old_model != NULL)
   184				i++;
   185	
   186			for (iter = window_data->menus; iter != NULL; iter = g_slist_next(iter), i++)
   187				if (UNITY_GTK_MENU_SHELL(iter->data)->menu_shell == menu_shell)
   188					break;
   189	
   190			if (iter != NULL)
   191			{
   192				g_menu_remove(window_data->menu_model, i);
   193	
   194				unity_gtk_action_group_disconnect_shell(window_data->action_group,
   195				                                        iter->data);
   196	
   197				g_object_unref(iter->data);
   198	
   199				window_data->menus = g_slist_delete_link(window_data->menus, iter);
   200			}
   201	
   202			menu_shell_data->window = NULL;
   203		}
   204	}
   205	
   206	G_GNUC_INTERNAL void gtk_window_connect_menu_shell(GtkWindow *window, GtkMenuShell *menu_shell)
   207	{
   208		MenuShellData *menu_shell_data;
   209	
   210		g_return_if_fail(GTK_IS_WINDOW(window));
   211		g_return_if_fail(GTK_IS_MENU_SHELL(menu_shell));
   212	
   213		menu_shell_data = gtk_menu_shell_get_menu_shell_data(menu_shell);
   214	
   215		if (window != menu_shell_data->window)
   216		{
   217			WindowData *window_data;
   218	
   219			if (menu_shell_data->window != NULL)
   220				gtk_window_disconnect_menu_shell(menu_shell_data->window, menu_shell);
   221	
   222			window_data = gtk_window_get_window_data(window);
   223	
   224			if (window_data != NULL)
   225			{
   226				GSList *iter;
   227	
   228				for (iter = window_data->menus; iter != NULL; iter = g_slist_next(iter))
   229					if (UNITY_GTK_MENU_SHELL(iter->data)->menu_shell == menu_shell)
   230						break;
   231	
   232				if (iter == NULL)
   233				{
   234					UnityGtkMenuShell *shell = unity_gtk_menu_shell_new(menu_shell);
   235	
   236					unity_gtk_action_group_connect_shell(window_data->action_group,
   237					                                     shell);
   238	
   239					g_menu_append_section(window_data->menu_model,
   240					                      NULL,
   241					                      G_MENU_MODEL(shell));
   242	
   243					window_data->menus = g_slist_append(window_data->menus, shell);
   244				}
   245			}
   246	
   247			menu_shell_data->window = window;
   248		}
   249	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/datastructs.h
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#ifndef DATASTRUCTS_H
    26	#define DATASTRUCTS_H
    27	
    28	#include <gtk/gtk.h>
    29	#include <stdbool.h>
    30	
    31	typedef struct _WindowData WindowData;
    32	
    33	G_GNUC_INTERNAL GQuark window_data_quark(void);
    34	G_GNUC_INTERNAL WindowData *window_data_new(void);
    35	G_GNUC_INTERNAL WindowData *window_data_copy(WindowData *source);
    36	G_GNUC_INTERNAL WindowData *gtk_window_get_window_data(GtkWindow *window);
    37	G_GNUC_INTERNAL void window_data_free(gpointer data);
    38	G_DEFINE_AUTOPTR_CLEANUP_FUNC(WindowData, window_data_free);
    39	
    40	typedef struct _MenuShellData MenuShellData;
    41	
    42	G_GNUC_INTERNAL MenuShellData *menu_shell_data_new(void);
    43	G_GNUC_INTERNAL MenuShellData *menu_shell_data_copy(MenuShellData *source);
    44	G_GNUC_INTERNAL MenuShellData *gtk_menu_shell_get_menu_shell_data(GtkMenuShell *menu_shell);
    45	G_GNUC_INTERNAL bool menu_shell_data_has_window(MenuShellData *source);
    46	G_GNUC_INTERNAL GtkWindow *menu_shell_data_get_window(MenuShellData *source);
    47	G_GNUC_INTERNAL void menu_shell_data_free(gpointer data);
    48	G_DEFINE_AUTOPTR_CLEANUP_FUNC(MenuShellData, menu_shell_data_free);
    49	
    50	G_GNUC_INTERNAL void gtk_window_connect_menu_shell(GtkWindow *window, GtkMenuShell *menu_shell);
    51	G_GNUC_INTERNAL void gtk_window_disconnect_menu_shell(GtkWindow *window, GtkMenuShell *menu_shell);
    52	
    53	#endif // DATASTRUCTS_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/datastructs-private.h
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#ifndef DATASTRUCTSPRIVATE_H
    26	#define DATASTRUCTSPRIVATE_H
    27	
    28	#include <appmenu-gtk-action-group.h>
    29	#include <gtk/gtk.h>
    30	
    31	struct _WindowData
    32	{
    33		uint window_id;
    34		ulong wayland_window_id;
    35		GMenu *menu_model;
    36		guint menu_model_export_id;
    37		GSList *menus;
    38		GMenuModel *old_model;
    39		UnityGtkActionGroup *action_group;
    40		guint action_group_export_id;
    41	};
    42	
    43	struct _MenuShellData
    44	{
    45		GtkWindow *window;
    46	};
    47	
    48	#endif // DATASTRUCTSPRIVATE_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/gtk-2.0/meson.build
--------------------------------------------------------------------------------
     1	gtk2_module = shared_module(
     2	    'appmenu-gtk-module', module_sources,
     3	    dependencies: gtk2_parser_dep,
     4	    c_args: '-Wno-deprecated-declarations',
     5	    install: true,
     6	    install_dir: join_paths(gtk2.get_variable(pkgconfig:'libdir'),'gtk-2.0','modules')
     7	)
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/gtk-3.0/meson.build
--------------------------------------------------------------------------------
     1	gtk3_module = shared_module(
     2	    'appmenu-gtk-module', module_sources,
     3	    dependencies: gtk3_parser_dep,
     4	    install: true,
     5	    install_dir: join_paths(gtk3.get_variable(pkgconfig:'libdir'),'gtk-3.0','modules')
     6	)
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/hijack.c
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#include <gtk/gtk.h>
    26	
    27	#include <appmenu-gtk-action-group.h>
    28	
    29	#include "consts.h"
    30	#include "datastructs.h"
    31	#include "hijack.h"
    32	#include "platform.h"
    33	#include "support.h"
    34	
    35	static void (*pre_hijacked_window_realize)(GtkWidget *widget);
    36	
    37	static void (*pre_hijacked_window_unrealize)(GtkWidget *widget);
    38	
    39	#if GTK_MAJOR_VERSION == 3
    40	static void (*pre_hijacked_application_window_realize)(GtkWidget *widget);
    41	#endif
    42	
    43	static void (*pre_hijacked_menu_bar_realize)(GtkWidget *widget);
    44	
    45	static void (*pre_hijacked_menu_bar_unrealize)(GtkWidget *widget);
    46	
    47	static void (*pre_hijacked_widget_size_allocate)(GtkWidget *widget, GtkAllocation *allocation);
    48	
    49	static void (*pre_hijacked_menu_bar_size_allocate)(GtkWidget *widget, GtkAllocation *allocation);
    50	
    51	#if GTK_MAJOR_VERSION == 2
    52	static void (*pre_hijacked_menu_bar_size_request)(GtkWidget *widget, GtkRequisition *requisition);
    53	#elif GTK_MAJOR_VERSION == 3
    54	static void (*pre_hijacked_menu_bar_get_preferred_width)(GtkWidget *widget, gint *minimum_width,
    55	                                                         gint *natural_width);
    56	
    57	static void (*pre_hijacked_menu_bar_get_preferred_height)(GtkWidget *widget, gint *minimum_height,
    58	                                                          gint *natural_height);
    59	
    60	static void (*pre_hijacked_menu_bar_get_preferred_width_for_height)(GtkWidget *widget, gint height,
    61	                                                                    gint *minimum_width,
    62	                                                                    gint *natural_width);
    63	
    64	static void (*pre_hijacked_menu_bar_get_preferred_height_for_width)(GtkWidget *widget, gint width,
    65	                                                                    gint *minimum_height,
    66	                                                                    gint *natural_height);
    67	#endif
    68	
    69	static void hijacked_window_realize(GtkWidget *widget)
    70	{
    71		g_return_if_fail(GTK_IS_WINDOW(widget));
    72	
    73		GdkScreen *screen      = gtk_widget_get_screen(widget);
    74		GdkVisual *visual      = gdk_screen_get_rgba_visual(screen);
    75		GdkWindowTypeHint hint = gtk_window_get_type_hint(GTK_WINDOW(widget));
    76		bool is_hint_viable =
    77		    ((hint == GDK_WINDOW_TYPE_HINT_NORMAL) || (hint == GDK_WINDOW_TYPE_HINT_DIALOG));
    78		if (visual && (hint == GDK_WINDOW_TYPE_HINT_DND))
    79			gtk_widget_set_visual(widget, visual);
    80	
    81	// In Wayland the DBUS Menu need to be register before realize the window.
    82	#ifdef GDK_WINDOWING_WAYLAND
    83		if (GDK_IS_WAYLAND_DISPLAY(gdk_display_get_default()) && is_hint_viable &&
    84		    (!GTK_IS_APPLICATION_WINDOW(GTK_WINDOW(widget))))
    85			gtk_window_get_window_data(GTK_WINDOW(widget));
    86	#endif
    87	
    88		if (pre_hijacked_window_realize != NULL)
    89			pre_hijacked_window_realize(widget);
    90	
    91	#ifdef GDK_WINDOWING_X11
    92		if (is_hint_viable
    93	#if GTK_MAJOR_VERSION == 3
    94		    && GDK_IS_X11_DISPLAY(gdk_display_get_default()) && (!GTK_IS_APPLICATION_WINDOW(widget))
    95	#endif
    96		)
    97			gtk_window_get_window_data(GTK_WINDOW(widget));
    98	#endif
    99	}
   100	
   101	static void hijacked_window_unrealize(GtkWidget *widget)
   102	{
   103		g_return_if_fail(GTK_IS_WINDOW(widget));
   104	
   105		if (pre_hijacked_window_unrealize != NULL)
   106			pre_hijacked_window_unrealize(widget);
   107	
   108		g_object_set_qdata(G_OBJECT(widget), window_data_quark(), NULL);
   109	}
   110	
   111	#if GTK_MAJOR_VERSION == 3
   112	static void hijacked_application_window_realize(GtkWidget *widget)
   113	{
   114		g_return_if_fail(GTK_IS_APPLICATION_WINDOW(widget));
   115	
   116	#ifdef GDK_WINDOWING_WAYLAND
   117		if (GDK_IS_WAYLAND_DISPLAY(gdk_display_get_default()))
   118			gtk_window_get_window_data(GTK_WINDOW(widget));
   119	#endif
   120	
   121		if (pre_hijacked_application_window_realize != NULL)
   122			pre_hijacked_application_window_realize(widget);
   123	
   124	#ifdef GDK_WINDOWING_X11
   125		if (GDK_IS_X11_DISPLAY(gdk_display_get_default()))
   126			gtk_window_get_window_data(GTK_WINDOW(widget));
   127	#endif
   128	}
   129	#endif
   130	
   131	static void hijacked_menu_bar_realize(GtkWidget *widget)
   132	{
   133		GtkWidget *window;
   134	
   135		g_return_if_fail(GTK_IS_MENU_BAR(widget));
   136	
   137		if (pre_hijacked_menu_bar_realize != NULL)
   138			(*pre_hijacked_menu_bar_realize)(widget);
   139	
   140		window = gtk_widget_get_toplevel(widget);
   141	
   142		if (GTK_IS_WINDOW(window))
   143			gtk_window_connect_menu_shell(GTK_WINDOW(window), GTK_MENU_SHELL(widget));
   144	
   145		gtk_widget_connect_settings(widget);
   146	}
   147	
   148	static void hijacked_menu_bar_unrealize(GtkWidget *widget)
   149	{
   150		MenuShellData *menu_shell_data;
   151	
   152		g_return_if_fail(GTK_IS_MENU_BAR(widget));
   153	
   154		menu_shell_data = gtk_menu_shell_get_menu_shell_data(GTK_MENU_SHELL(widget));
   155	
   156		gtk_widget_disconnect_settings(widget);
   157	
   158		if (menu_shell_data_has_window(menu_shell_data))
   159			gtk_window_disconnect_menu_shell(menu_shell_data_get_window(menu_shell_data),
   160			                                 GTK_MENU_SHELL(widget));
   161	
   162		if (pre_hijacked_menu_bar_unrealize != NULL)
   163			pre_hijacked_menu_bar_unrealize(widget);
   164	}
   165	
   166	static void hijacked_menu_bar_size_allocate(GtkWidget *widget, GtkAllocation *allocation)
   167	{
   168		GtkAllocation zero = { 0, 0, 0, 0 };
   169		GdkWindow *window;
   170	
   171		g_return_if_fail(GTK_IS_MENU_BAR(widget));
   172	
   173		if (gtk_widget_shell_shows_menubar(widget))
   174		{
   175			/*
   176			 * We manually assign an empty allocation to the menu bar to
   177			 * prevent the container from attempting to draw it at all.
   178			 */
   179			if (pre_hijacked_widget_size_allocate != NULL)
   180				pre_hijacked_widget_size_allocate(widget, &zero);
   181	
   182			/*
   183			 * Then we move the GdkWindow belonging to the menu bar outside of
   184			 * the clipping rectangle of the parent window so that we can't
   185			 * see it.
   186			 */
   187			window = gtk_widget_get_window(widget);
   188	
   189			if (window != NULL)
   190				gdk_window_move_resize(window, -1, -1, 1, 1);
   191		}
   192		else if (pre_hijacked_menu_bar_size_allocate != NULL)
   193			pre_hijacked_menu_bar_size_allocate(widget, allocation);
   194	}
   195	
   196	#if GTK_MAJOR_VERSION == 2
   197	static void hijacked_menu_bar_size_request(GtkWidget *widget, GtkRequisition *requisition)
   198	{
   199		g_return_if_fail(GTK_IS_MENU_BAR(widget));
   200	
   201		if (pre_hijacked_menu_bar_size_request != NULL)
   202			pre_hijacked_menu_bar_size_request(widget, requisition);
   203	
   204		if (gtk_widget_shell_shows_menubar(widget))
   205		{
   206			requisition->width  = 0;
   207			requisition->height = 0;
   208		}
   209	}
   210	#elif GTK_MAJOR_VERSION == 3
   211	static void hijacked_menu_bar_get_preferred_width(GtkWidget *widget, gint *minimum_width,
   212	                                                  gint *natural_width)
   213	{
   214		g_return_if_fail(GTK_IS_MENU_BAR(widget));
   215	
   216		if (pre_hijacked_menu_bar_get_preferred_width != NULL)
   217			pre_hijacked_menu_bar_get_preferred_width(widget, minimum_width, natural_width);
   218	
   219		if (gtk_widget_shell_shows_menubar(widget))
   220		{
   221			*minimum_width = 0;
   222			*natural_width = 0;
   223		}
   224	}
   225	
   226	static void hijacked_menu_bar_get_preferred_height(GtkWidget *widget, gint *minimum_height,
   227	                                                   gint *natural_height)
   228	{
   229		g_return_if_fail(GTK_IS_MENU_BAR(widget));
   230	
   231		if (pre_hijacked_menu_bar_get_preferred_height != NULL)
   232			pre_hijacked_menu_bar_get_preferred_height(widget, minimum_height, natural_height);
   233	
   234		if (gtk_widget_shell_shows_menubar(widget))
   235		{
   236			*minimum_height = 0;
   237			*natural_height = 0;
   238		}
   239	}
   240	
   241	static void hijacked_menu_bar_get_preferred_width_for_height(GtkWidget *widget, gint height,
   242	                                                             gint *minimum_width,
   243	                                                             gint *natural_width)
   244	{
   245		g_return_if_fail(GTK_IS_MENU_BAR(widget));
   246	
   247		if (pre_hijacked_menu_bar_get_preferred_width_for_height != NULL)
   248			pre_hijacked_menu_bar_get_preferred_width_for_height(widget,
   249			                                                     height,
   250			                                                     minimum_width,
   251			                                                     natural_width);
   252	
   253		if (gtk_widget_shell_shows_menubar(widget))
   254		{
   255			*minimum_width = 0;
   256			*natural_width = 0;
   257		}
   258	}
   259	
   260	static void hijacked_menu_bar_get_preferred_height_for_width(GtkWidget *widget, gint width,
   261	                                                             gint *minimum_height,
   262	                                                             gint *natural_height)
   263	{
   264		g_return_if_fail(GTK_IS_MENU_BAR(widget));
   265	
   266		if (pre_hijacked_menu_bar_get_preferred_height_for_width != NULL)
   267			pre_hijacked_menu_bar_get_preferred_height_for_width(widget,
   268			                                                     width,
   269			                                                     minimum_height,
   270			                                                     natural_height);
   271	
   272		if (gtk_widget_shell_shows_menubar(widget))
   273		{
   274			*minimum_height = 0;
   275			*natural_height = 0;
   276		}
   277	}
   278	#endif
   279	
   280	static void hijack_window_class_vtable(GType type)
   281	{
   282		GtkWidgetClass *widget_class = g_type_class_ref(type);
   283		GType *children;
   284		guint n;
   285		guint i;
   286	
   287		if (widget_class->realize == pre_hijacked_window_realize)
   288			widget_class->realize = hijacked_window_realize;
   289	
   290	#if GTK_MAJOR_VERSION == 3
   291		if (widget_class->realize == pre_hijacked_application_window_realize)
   292			widget_class->realize = hijacked_application_window_realize;
   293	#endif
   294	
   295		if (widget_class->unrealize == pre_hijacked_window_unrealize)
   296			widget_class->unrealize = hijacked_window_unrealize;
   297	
   298		children = g_type_children(type, &n);
   299	
   300		for (i = 0; i < n; i++)
   301			hijack_window_class_vtable(children[i]);
   302	
   303		g_free(children);
   304	}
   305	
   306	G_GNUC_INTERNAL void store_pre_hijacked()
   307	{
   308		GtkWidgetClass *widget_class;
   309		/* store the base GtkWidget size_allocate vfunc */
   310		widget_class                      = g_type_class_ref(GTK_TYPE_WIDGET);
   311		pre_hijacked_widget_size_allocate = widget_class->size_allocate;
   312	
   313	#if GTK_MAJOR_VERSION == 3
   314		/* store the base GtkApplicationWindow realize vfunc */
   315		widget_class                            = g_type_class_ref(GTK_TYPE_APPLICATION_WINDOW);
   316		pre_hijacked_application_window_realize = widget_class->realize;
   317	#endif
   318	
   319		/* intercept window realize vcalls on GtkWindow */
   320		widget_class                  = g_type_class_ref(GTK_TYPE_WINDOW);
   321		pre_hijacked_window_realize   = widget_class->realize;
   322		pre_hijacked_window_unrealize = widget_class->unrealize;
   323		hijack_window_class_vtable(GTK_TYPE_WINDOW);
   324	
   325		/* intercept size request and allocate vcalls on GtkMenuBar (for hiding) */
   326		widget_class                        = g_type_class_ref(GTK_TYPE_MENU_BAR);
   327		pre_hijacked_menu_bar_realize       = widget_class->realize;
   328		pre_hijacked_menu_bar_unrealize     = widget_class->unrealize;
   329		pre_hijacked_menu_bar_size_allocate = widget_class->size_allocate;
   330	#if GTK_MAJOR_VERSION == 2
   331		pre_hijacked_menu_bar_size_request = widget_class->size_request;
   332	#elif GTK_MAJOR_VERSION == 3
   333		pre_hijacked_menu_bar_get_preferred_width  = widget_class->get_preferred_width;
   334		pre_hijacked_menu_bar_get_preferred_height = widget_class->get_preferred_height;
   335		pre_hijacked_menu_bar_get_preferred_width_for_height =
   336		    widget_class->get_preferred_width_for_height;
   337		pre_hijacked_menu_bar_get_preferred_height_for_width =
   338		    widget_class->get_preferred_height_for_width;
   339	#endif
   340	}
   341	G_GNUC_INTERNAL void hijack_menu_bar_class_vtable(GType type)
   342	{
   343		GtkWidgetClass *widget_class = g_type_class_ref(type);
   344		GType *children;
   345		guint n;
   346		guint i;
   347	
   348		/* This fixes lp:1113008. */
   349		widget_class->hierarchy_changed = NULL;
   350	
   351		if (widget_class->realize == pre_hijacked_menu_bar_realize)
   352			widget_class->realize = hijacked_menu_bar_realize;
   353	
   354		if (widget_class->unrealize == pre_hijacked_menu_bar_unrealize)
   355			widget_class->unrealize = hijacked_menu_bar_unrealize;
   356	
   357		if (widget_class->size_allocate == pre_hijacked_menu_bar_size_allocate)
   358			widget_class->size_allocate = hijacked_menu_bar_size_allocate;
   359	
   360	#if GTK_MAJOR_VERSION == 2
   361		if (widget_class->size_request == pre_hijacked_menu_bar_size_request)
   362			widget_class->size_request = hijacked_menu_bar_size_request;
   363	#elif GTK_MAJOR_VERSION == 3
   364		if (widget_class->get_preferred_width == pre_hijacked_menu_bar_get_preferred_width)
   365			widget_class->get_preferred_width = hijacked_menu_bar_get_preferred_width;
   366	
   367		if (widget_class->get_preferred_height == pre_hijacked_menu_bar_get_preferred_height)
   368			widget_class->get_preferred_height = hijacked_menu_bar_get_preferred_height;
   369	
   370		if (widget_class->get_preferred_width_for_height ==
   371		    pre_hijacked_menu_bar_get_preferred_width_for_height)
   372			widget_class->get_preferred_width_for_height =
   373			    hijacked_menu_bar_get_preferred_width_for_height;
   374	
   375		if (widget_class->get_preferred_height_for_width ==
   376		    pre_hijacked_menu_bar_get_preferred_height_for_width)
   377			widget_class->get_preferred_height_for_width =
   378			    hijacked_menu_bar_get_preferred_height_for_width;
   379	#endif
   380	
   381		children = g_type_children(type, &n);
   382	
   383		for (i = 0; i < n; i++)
   384			hijack_menu_bar_class_vtable(children[i]);
   385	
   386		g_free(children);
   387	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/hijack.h
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#ifndef HIJACK_H
    26	#define HIJACK_H
    27	
    28	#include <glib-object.h>
    29	#include <glib.h>
    30	
    31	G_GNUC_INTERNAL void store_pre_hijacked();
    32	G_GNUC_INTERNAL void hijack_menu_bar_class_vtable(GType type);
    33	
    34	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/meson.build
--------------------------------------------------------------------------------
     1	module_sources = files(
     2	    'appmenu-gtk-module.c',
     3	    'datastructs.c',
     4	    'datastructs.h',
     5	    'datastructs-private.h',
     6	    'hijack.c',
     7	    'hijack.h',
     8	    'support.c',
     9	    'support.h',
    10	    'blacklist.c',
    11	    'blacklist.h',
    12	    'platform.c',
    13	    'platform.h',
    14	    'consts.h'
    15	)
    16	
    17	module_subdirs = ['gtk-2.0','gtk-3.0']
    18	
    19	if build_gtk2
    20	    subdir('gtk-2.0')
    21	endif
    22	
    23	if build_gtk3
    24	    subdir('gtk-3.0')
    25	endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/platform.c
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#include "platform.h"
    26	#include "consts.h"
    27	#include "datastructs-private.h"
    28	#include "datastructs.h"
    29	
    30	#ifdef GDK_WINDOWING_X11
    31	G_GNUC_INTERNAL char *gtk_widget_get_x11_property_string(GtkWidget *widget, const char *name)
    32	{
    33		GdkWindow *window;
    34		GdkDisplay *display;
    35		Display *xdisplay;
    36		Window xwindow;
    37		Atom property;
    38		Atom actual_type;
    39		int actual_format;
    40		unsigned long nitems;
    41		unsigned long bytes_after;
    42		unsigned char *prop;
    43	
    44		g_return_val_if_fail(GTK_IS_WIDGET(widget), NULL);
    45	
    46		window   = gtk_widget_get_window(widget);
    47		display  = gdk_window_get_display(window);
    48		xdisplay = GDK_DISPLAY_XDISPLAY(display);
    49		xwindow  = GDK_WINDOW_XID(window);
    50	
    51		property = None;
    52	
    53		if (display != NULL)
    54			property = gdk_x11_get_xatom_by_name_for_display(display, name);
    55	
    56		if (property == None)
    57			property = gdk_x11_get_xatom_by_name(name);
    58	
    59		g_return_val_if_fail(property != None, NULL);
    60	
    61		if (XGetWindowProperty(xdisplay,
    62		                       xwindow,
    63		                       property,
    64		                       0,
    65		                       G_MAXLONG,
    66		                       False,
    67		                       AnyPropertyType,
    68		                       &actual_type,
    69		                       &actual_format,
    70		                       &nitems,
    71		                       &bytes_after,
    72		                       &prop) == Success)
    73		{
    74			if (actual_format)
    75			{
    76				char *string = g_strdup((const char *)prop);
    77	
    78				if (prop != NULL)
    79					XFree(prop);
    80	
    81				return string;
    82			}
    83			else
    84				return NULL;
    85		}
    86	
    87		return NULL;
    88	}
    89	
    90	G_GNUC_INTERNAL void gtk_widget_set_x11_property_string(GtkWidget *widget, const char *name,
    91	                                                        const char *value)
    92	{
    93		GdkWindow *window;
    94		GdkDisplay *display;
    95		Display *xdisplay;
    96		Window xwindow;
    97		Atom property;
    98		Atom type;
    99	
   100		g_return_if_fail(GTK_IS_WIDGET(widget));
   101	
   102		window   = gtk_widget_get_window(widget);
   103		display  = gdk_window_get_display(window);
   104		xdisplay = GDK_DISPLAY_XDISPLAY(display);
   105		xwindow  = GDK_WINDOW_XID(window);
   106	
   107		property = None;
   108	
   109		if (display != NULL)
   110			property = gdk_x11_get_xatom_by_name_for_display(display, name);
   111	
   112		if (property == None)
   113			property = gdk_x11_get_xatom_by_name(name);
   114	
   115		g_return_if_fail(property != None);
   116	
   117		type = None;
   118	
   119		if (display != NULL)
   120			type = gdk_x11_get_xatom_by_name_for_display(display, "UTF8_STRING");
   121	
   122		if (type == None)
   123			type = gdk_x11_get_xatom_by_name("UTF8_STRING");
   124	
   125		g_return_if_fail(type != None);
   126	
   127		if (value != NULL)
   128			XChangeProperty(xdisplay,
   129			                xwindow,
   130			                property,
   131			                type,
   132			                8,
   133			                PropModeReplace,
   134			                (unsigned char *)value,
   135			                g_utf8_strlen(value, -1));
   136		else
   137			XDeleteProperty(xdisplay, xwindow, property);
   138	}
   139	
   140	G_GNUC_INTERNAL WindowData *gtk_x11_window_get_window_data(GtkWindow *window)
   141	{
   142		WindowData *window_data;
   143	
   144		g_return_val_if_fail(GTK_IS_WINDOW(window), NULL);
   145	
   146		window_data = g_object_get_qdata(G_OBJECT(window), window_data_quark());
   147	
   148		if (window_data == NULL)
   149		{
   150			static guint window_id;
   151	
   152			GDBusConnection *session = g_bus_get_sync(G_BUS_TYPE_SESSION, NULL, NULL);
   153			char *object_path        = g_strdup_printf(OBJECT_PATH "/%d", window_id);
   154			char *old_unique_bus_name =
   155			    gtk_widget_get_x11_property_string(GTK_WIDGET(window), _GTK_UNIQUE_BUS_NAME);
   156			char *old_unity_object_path =
   157			    gtk_widget_get_x11_property_string(GTK_WIDGET(window), _UNITY_OBJECT_PATH);
   158			char *old_menubar_object_path =
   159			    gtk_widget_get_x11_property_string(GTK_WIDGET(window),
   160			                                       _GTK_MENUBAR_OBJECT_PATH);
   161			GDBusActionGroup *old_action_group = NULL;
   162			GDBusMenuModel *old_menu_model     = NULL;
   163	
   164			if (old_unique_bus_name != NULL)
   165			{
   166				if (old_unity_object_path != NULL)
   167					old_action_group = g_dbus_action_group_get(session,
   168					                                           old_unique_bus_name,
   169					                                           old_unity_object_path);
   170	
   171				if (old_menubar_object_path != NULL)
   172					old_menu_model = g_dbus_menu_model_get(session,
   173					                                       old_unique_bus_name,
   174					                                       old_menubar_object_path);
   175			}
   176	
   177			window_data             = window_data_new();
   178			window_data->window_id  = window_id++;
   179			window_data->menu_model = g_menu_new();
   180			window_data->action_group =
   181			    unity_gtk_action_group_new(G_ACTION_GROUP(old_action_group));
   182	
   183			if (old_menu_model != NULL)
   184			{
   185				window_data->old_model = G_MENU_MODEL(g_object_ref(old_menu_model));
   186				g_menu_append_section(window_data->menu_model,
   187				                      NULL,
   188				                      G_MENU_MODEL(old_menu_model));
   189			}
   190	
   191			window_data->menu_model_export_id =
   192			    g_dbus_connection_export_menu_model(session,
   193			                                        old_menubar_object_path != NULL
   194			                                            ? old_menubar_object_path
   195			                                            : object_path,
   196			                                        G_MENU_MODEL(window_data->menu_model),
   197			                                        NULL);
   198			window_data->action_group_export_id =
   199			    g_dbus_connection_export_action_group(session,
   200			                                          old_unity_object_path != NULL
   201			                                              ? old_unity_object_path
   202			                                              : object_path,
   203			                                          G_ACTION_GROUP(window_data->action_group),
   204			                                          NULL);
   205	
   206			if (old_unique_bus_name == NULL)
   207				gtk_widget_set_x11_property_string(GTK_WIDGET(window),
   208				                                   _GTK_UNIQUE_BUS_NAME,
   209				                                   g_dbus_connection_get_unique_name(
   210				                                       session));
   211	
   212			if (old_unity_object_path == NULL)
   213				gtk_widget_set_x11_property_string(GTK_WIDGET(window),
   214				                                   _UNITY_OBJECT_PATH,
   215				                                   object_path);
   216	
   217			if (old_menubar_object_path == NULL)
   218				gtk_widget_set_x11_property_string(GTK_WIDGET(window),
   219				                                   _GTK_MENUBAR_OBJECT_PATH,
   220				                                   object_path);
   221	
   222			g_object_set_qdata_full(G_OBJECT(window),
   223			                        window_data_quark(),
   224			                        window_data,
   225			                        window_data_free);
   226	
   227			g_free(old_menubar_object_path);
   228			g_free(old_unity_object_path);
   229			g_free(old_unique_bus_name);
   230			g_free(object_path);
   231		}
   232	
   233		return window_data;
   234	}
   235	#endif
   236	#ifdef GDK_WINDOWING_WAYLAND
   237	
   238	#include <wayland-client.h>
   239	
   240	void gdk_wayland_window_set_dbus_properties_libgtk_only(
   241	    GdkWindow *window, const char *application_id, const char *app_menu_path,
   242	    const char *menubar_path, const char *window_object_path, const char *application_object_path,
   243	    const char *unique_bus_name);
   244	
   245	G_GNUC_INTERNAL WindowData *gtk_wayland_window_get_window_data(GtkWindow *window)
   246	{
   247		WindowData *window_data;
   248	
   249		g_return_val_if_fail(GTK_IS_WINDOW(window), NULL);
   250	
   251		window_data = g_object_get_qdata(G_OBJECT(window), window_data_quark());
   252		if (window_data == NULL)
   253		{
   254			static guint window_id;
   255			GMenuModel *old_menu_model         = NULL;
   256			GDBusActionGroup *old_action_group = NULL;
   257			GtkApplication *application;
   258			GApplication *gApp;
   259			GDBusConnection *connection;
   260	
   261			char *unique_bus_name;
   262			char *object_path;
   263			char *menubar_object_path;
   264			char *application_id;
   265			char *application_object_path;
   266	
   267			window_data             = window_data_new();
   268			window_data->menu_model = g_menu_new();
   269	
   270			if (GTK_IS_APPLICATION_WINDOW(window))
   271			{
   272				char *unity_object_path;
   273	
   274				application = gtk_window_get_application(window);
   275				g_return_val_if_fail(GTK_IS_APPLICATION(application), NULL);
   276	
   277				window_data->action_group = NULL;
   278	
   279				gApp = G_APPLICATION(application);
   280				g_return_val_if_fail(g_application_get_is_registered(gApp), NULL);
   281				g_return_val_if_fail(!g_application_get_is_remote(gApp), NULL);
   282				g_return_val_if_fail(window_data->menu_model == NULL ||
   283				                         G_IS_MENU_MODEL(window_data->menu_model),
   284				                     NULL);
   285	
   286				application_id =
   287				    g_strdup_printf("%s", g_application_get_application_id(gApp));
   288				application_object_path =
   289				    g_strdup_printf("%s", g_application_get_dbus_object_path(gApp));
   290	
   291				window_data->window_id = window_id++; // IN THE GNOME IMPLEMENTATION THIS IS
   292				                                      // STARTED IN ONE NOT CERO (So, we
   293				                                      // make is similar)
   294	
   295				connection  = g_application_get_dbus_connection(gApp);
   296				object_path = g_strdup_printf(OBJECT_PATH "/%d", window_id);
   297	
   298				unique_bus_name =
   299				    g_strdup_printf("%s", g_dbus_connection_get_unique_name(connection));
   300				unity_object_path =
   301				    g_strdup_printf("%s%s",
   302				                    g_application_get_dbus_object_path(gApp) != NULL
   303				                        ? g_application_get_dbus_object_path(gApp)
   304				                        : object_path,
   305				                    g_application_get_dbus_object_path(gApp) != NULL
   306				                        ? "/menus/menubar"
   307				                        : "");
   308				menubar_object_path = g_strdup_printf("%s", unity_object_path);
   309	
   310				old_menu_model = G_MENU_MODEL(gtk_application_get_menubar(application));
   311				if (old_menu_model != NULL)
   312				{
   313					old_action_group       = g_dbus_action_group_get(connection,
   314	                                                                           unique_bus_name,
   315	                                                                           unity_object_path);
   316					window_data->old_model = g_object_ref(old_menu_model);
   317					g_menu_append_section(window_data->menu_model,
   318					                      NULL,
   319					                      old_menu_model);
   320				}
   321	
   322				// Set the actions
   323				window_data->action_group =
   324				    unity_gtk_action_group_new(G_ACTION_GROUP(old_action_group));
   325				window_data->action_group_export_id =
   326				    g_dbus_connection_export_action_group(connection,
   327				                                          unity_object_path,
   328				                                          G_ACTION_GROUP(
   329				                                              window_data->action_group),
   330				                                          NULL);
   331	
   332				// Set the menubar
   333				gtk_application_set_menubar(GTK_APPLICATION(application),
   334				                            G_MENU_MODEL(window_data->menu_model));
   335	
   336				g_free(unity_object_path);
   337			}
   338			else
   339			{
   340				GdkWindow *gdk_win;
   341				const char *app_menu_path = NULL;
   342	
   343				window_data->window_id = window_id++;
   344	
   345				connection = g_bus_get_sync(G_BUS_TYPE_SESSION, NULL, NULL);
   346				unique_bus_name =
   347				    g_strdup_printf("%s", g_dbus_connection_get_unique_name(connection));
   348				gdk_win     = gtk_widget_get_window(GTK_WIDGET(window));
   349				application = gtk_window_get_application(window);
   350	
   351				old_menu_model = G_MENU_MODEL(window_data->menu_model);
   352	
   353				window_data->action_group =
   354				    unity_gtk_action_group_new(G_ACTION_GROUP(old_action_group));
   355	
   356				if (GTK_IS_APPLICATION(application))
   357				{
   358					gApp = G_APPLICATION(application);
   359					application_id =
   360					    g_strdup_printf("%s", g_application_get_application_id(gApp));
   361					object_path =
   362					    g_strdup_printf("%s/menus/menubar/%d",
   363					                    g_application_get_dbus_object_path(gApp),
   364					                    window_data->window_id);
   365					application_object_path =
   366					    g_strdup_printf("%s", g_application_get_dbus_object_path(gApp));
   367					menubar_object_path = g_strdup_printf("%s/window/%d",
   368					                                      object_path,
   369					                                      window_data->window_id);
   370				}
   371				else
   372				{
   373					application_id          = g_strdup_printf("%s",
   374	                                                                 g_get_prgname() != NULL
   375	                                                                     ? g_get_prgname()
   376	                                                                     : gdk_get_program_class());
   377					object_path             = g_strdup_printf("%s/menus/menubar/%d",
   378	                                                              OBJECT_PATH,
   379	                                                              window_data->window_id);
   380					application_object_path = g_strdup_printf("%s", OBJECT_PATH);
   381					menubar_object_path     = g_strdup_printf("%s/window/%d",
   382	                                                                      object_path,
   383	                                                                      window_data->window_id);
   384				}
   385	
   386				window_data->menu_model_export_id =
   387				    g_dbus_connection_export_menu_model(connection,
   388				                                        object_path,
   389				                                        G_MENU_MODEL(
   390				                                            window_data->menu_model),
   391				                                        NULL);
   392				window_data->action_group_export_id =
   393				    g_dbus_connection_export_action_group(connection,
   394				                                          object_path,
   395				                                          G_ACTION_GROUP(
   396				                                              window_data->action_group),
   397				                                          NULL);
   398	
   399				gdk_wayland_window_set_dbus_properties_libgtk_only(gdk_win,
   400				                                                   application_id,
   401				                                                   app_menu_path,
   402				                                                   object_path,
   403				                                                   menubar_object_path,
   404				                                                   application_object_path,
   405				                                                   unique_bus_name);
   406			}
   407			g_free(unique_bus_name);
   408			g_free(object_path);
   409			g_free(menubar_object_path);
   410			g_free(application_id);
   411			g_free(application_object_path);
   412			g_object_set_qdata_full(G_OBJECT(window),
   413			                        window_data_quark(),
   414			                        window_data,
   415			                        window_data_free);
   416		}
   417		return window_data;
   418	}
   419	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/platform.h
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#ifndef PLATFORM_H
    26	#define PLATFORM_H
    27	
    28	#include <gdk/gdkx.h>
    29	#include <gtk/gtk.h>
    30	
    31	#if GTK_MAJOR_VERSION >= 3
    32	#ifdef GDK_WINDOWING_WAYLAND
    33	#include <gdk/gdkwayland.h>
    34	#endif
    35	#endif
    36	
    37	#include "datastructs.h"
    38	
    39	#ifdef GDK_WINDOWING_X11
    40	G_GNUC_INTERNAL WindowData *gtk_x11_window_get_window_data(GtkWindow *window);
    41	#endif
    42	
    43	#ifdef GDK_WINDOWING_WAYLAND
    44	G_GNUC_INTERNAL WindowData *gtk_wayland_window_get_window_data(GtkWindow *window);
    45	#endif
    46	
    47	#endif // PLATFORM_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/support.c
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#include <gdk/gdk.h>
    26	#include <gdk/gdkx.h>
    27	#include <gtk/gtk.h>
    28	#if GTK_MAJOR_VERSION >= 3
    29	#ifdef GDK_WINDOWING_WAYLAND
    30	#include <gdk/gdkwayland.h>
    31	#else
    32	#define GDK_IS_WAYLAND_DISPLAY(display) 0
    33	#endif
    34	#endif
    35	
    36	#include <appmenu-gtk-action-group.h>
    37	#include <appmenu-gtk-menu-shell.h>
    38	
    39	#include "blacklist.h"
    40	#include "consts.h"
    41	#include "support.h"
    42	
    43	static bool is_true(const char *value)
    44	{
    45		return value != NULL && value[0] != '\0' && g_ascii_strcasecmp(value, "0") != 0 &&
    46		       g_ascii_strcasecmp(value, "no") != 0 && g_ascii_strcasecmp(value, "off") != 0 &&
    47		       g_ascii_strcasecmp(value, "false") != 0;
    48	}
    49	
    50	G_GNUC_INTERNAL bool gtk_module_should_run()
    51	{
    52		const char *proxy          = g_getenv("UBUNTU_MENUPROXY");
    53		bool is_platform_supported = false;
    54		bool is_program_supported  = false;
    55		bool should_run            = false;
    56		static bool run_once       = true;
    57	#if GTK_MAJOR_VERSION >= 3
    58		if (GDK_IS_X11_DISPLAY(gdk_display_get_default()))
    59			is_platform_supported = true;
    60		else if (GDK_IS_WAYLAND_DISPLAY(gdk_display_get_default()))
    61		{
    62			g_autoptr(GSettings) gsettings = g_settings_new(UNITY_GTK_MODULE_SCHEMA);
    63			bool use_wayland                  = g_settings_get_boolean(gsettings, RUN_ON_WAYLAND);
    64			is_platform_supported = use_wayland;
    65		}
    66		else
    67			is_platform_supported = false;
    68	#else
    69		is_platform_supported = true;
    70	#endif
    71		is_program_supported =
    72		    (proxy == NULL || is_true(proxy)) && !is_blacklisted(g_get_prgname());
    73		should_run = is_program_supported && is_platform_supported && run_once;
    74		run_once   = !(is_program_supported && is_platform_supported);
    75		return should_run;
    76	}
    77	
    78	G_GNUC_INTERNAL void enable_debug()
    79	{
    80		unity_gtk_menu_shell_set_debug(is_true(g_getenv("UNITY_GTK_MENU_SHELL_DEBUG")));
    81		unity_gtk_action_group_set_debug(is_true(g_getenv("UNITY_GTK_ACTION_GROUP_DEBUG")));
    82	}
    83	
    84	G_GNUC_INTERNAL bool gtk_widget_shell_shows_menubar(GtkWidget *widget)
    85	{
    86		GtkSettings *settings;
    87		GParamSpec *pspec;
    88		gboolean shell_shows_menubar;
    89	
    90		g_return_val_if_fail(GTK_IS_WIDGET(widget), false);
    91	
    92		settings = gtk_widget_get_settings(widget);
    93	
    94		g_return_val_if_fail(GTK_IS_SETTINGS(settings), false);
    95	
    96		pspec =
    97		    g_object_class_find_property(G_OBJECT_GET_CLASS(settings), "gtk-shell-shows-menubar");
    98	
    99		g_return_val_if_fail(G_IS_PARAM_SPEC(pspec), false);
   100		g_return_val_if_fail(pspec->value_type == G_TYPE_BOOLEAN, false);
   101	
   102		g_object_get(settings, "gtk-shell-shows-menubar", &shell_shows_menubar, NULL);
   103	
   104		return shell_shows_menubar;
   105	}
   106	static void gtk_settings_handle_gtk_shell_shows_menubar(GObject *object, GParamSpec *pspec,
   107	                                                        gpointer user_data)
   108	{
   109		gtk_widget_queue_resize(user_data);
   110	}
   111	G_GNUC_INTERNAL void gtk_widget_connect_settings(GtkWidget *widget)
   112	{
   113		GtkSettings *settings = gtk_widget_get_settings(widget);
   114		g_signal_connect(settings,
   115		                 "notify::gtk-shell-shows-menubar",
   116		                 G_CALLBACK(gtk_settings_handle_gtk_shell_shows_menubar),
   117		                 widget);
   118	}
   119	
   120	G_GNUC_INTERNAL void gtk_widget_disconnect_settings(GtkWidget *widget)
   121	{
   122		GtkSettings *settings = gtk_widget_get_settings(widget);
   123		if (settings != NULL)
   124			g_signal_handlers_disconnect_by_data(settings, widget);
   125	}
   126	
   127	#if (GTK_MAJOR_VERSION < 3) || defined(GDK_WINDOWING_WAYLAND)
   128	static uint watcher_id = 0;
   129	
   130	static gboolean is_dbus_present()
   131	{
   132		GDBusConnection *connection;
   133		GVariant *ret, *names;
   134		GVariantIter *iter;
   135		char *name;
   136		gboolean is_present;
   137		GError *error = NULL;
   138	
   139		is_present = false;
   140	
   141		connection = g_bus_get_sync(G_BUS_TYPE_SESSION, NULL, &error);
   142		if (connection == NULL)
   143		{
   144			g_warning("Unable to connect to dbus: %s", error->message);
   145			g_error_free(error);
   146			return false;
   147		}
   148	
   149		ret = g_dbus_connection_call_sync(connection,
   150		                                  "org.freedesktop.DBus",
   151		                                  "/org/freedesktop/DBus",
   152		                                  "org.freedesktop.DBus",
   153		                                  "ListNames",
   154		                                  NULL,
   155		                                  G_VARIANT_TYPE("(as)"),
   156		                                  G_DBUS_CALL_FLAGS_NONE,
   157		                                  -1,
   158		                                  NULL,
   159		                                  &error);
   160		if (ret == NULL)
   161		{
   162			g_warning("Unable to query dbus: %s", error->message);
   163			g_error_free(error);
   164			return false;
   165		}
   166		names = g_variant_get_child_value(ret, 0);
   167		g_variant_get(names, "as", &iter);
   168		while (g_variant_iter_loop(iter, "s", &name))
   169		{
   170			if (g_str_equal(name, "com.canonical.AppMenu.Registrar"))
   171			{
   172				is_present = true;
   173				break;
   174			}
   175		}
   176		g_variant_iter_free(iter);
   177		g_variant_unref(names);
   178		g_variant_unref(ret);
   179	
   180		return is_present;
   181	}
   182	
   183	static bool set_gtk_shell_shows_menubar(bool shows)
   184	{
   185		GtkSettings *settings = gtk_settings_get_default();
   186	
   187		g_return_val_if_fail(GTK_IS_SETTINGS(settings), false);
   188	
   189		GParamSpec *pspec =
   190		    g_object_class_find_property(G_OBJECT_GET_CLASS(settings), "gtk-shell-shows-menubar");
   191	
   192		g_return_val_if_fail(G_IS_PARAM_SPEC(pspec), false);
   193		g_return_val_if_fail(pspec->value_type == G_TYPE_BOOLEAN, false);
   194	
   195		g_autoptr(GSettings) gsettings = g_settings_new(UNITY_GTK_MODULE_SCHEMA);
   196		bool need_set                  = !g_settings_get_boolean(gsettings, INNER_MENU_KEY);
   197	
   198		g_object_set(settings, "gtk-shell-shows-menubar", need_set ? shows : false, NULL);
   199	
   200		return true;
   201	}
   202	
   203	static void on_name_appeared(GDBusConnection *connection, const char *name, const char *name_owner,
   204	                             gpointer user_data)
   205	{
   206		g_debug("Name %s on the session bus is owned by %s\n", name, name_owner);
   207	
   208		set_gtk_shell_shows_menubar(true);
   209	}
   210	
   211	static void on_name_vanished(GDBusConnection *connection, const char *name, gpointer user_data)
   212	{
   213		g_debug("Name %s does not exist on the session bus\n", name);
   214	
   215		set_gtk_shell_shows_menubar(false);
   216	}
   217	#endif
   218	
   219	G_GNUC_INTERNAL void watch_registrar_dbus()
   220	{
   221	#if (GTK_MAJOR_VERSION < 3) || defined(GDK_WINDOWING_WAYLAND)
   222		set_gtk_shell_shows_menubar(is_dbus_present());
   223	
   224		if (watcher_id == 0)
   225		{
   226			watcher_id = g_bus_watch_name(G_BUS_TYPE_SESSION,
   227			                              "com.canonical.AppMenu.Registrar",
   228			                              G_BUS_NAME_WATCHER_FLAGS_NONE,
   229			                              on_name_appeared,
   230			                              on_name_vanished,
   231			                              NULL,
   232			                              NULL);
   233		}
   234	#endif
   235	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/src/support.h
--------------------------------------------------------------------------------
     1	/*
     2	 * appmenu-gtk-module
     3	 * Copyright 2012 Canonical Ltd.
     4	 * Copyright (C) 2015-2017 Konstantin Pugin <ria.freelander@gmail.com>
     5	 *
     6	 * This program is free software: you can redistribute it and/or modify
     7	 * it under the terms of the GNU Lesser General Public License as published by
     8	 * the Free Software Foundation, either version 3 of the License, or
     9	 * (at your option) any later version.
    10	 *
    11	 * This program is distributed in the hope that it will be useful,
    12	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    13	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14	 * GNU General Public License for more details.
    15	 *
    16	 * You should have received a copy of the GNU Lesser General Public License
    17	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18	 *
    19	 * Authors: Ryan Lortie <desrt@desrt.ca>
    20	 *          William Hua <william.hua@canonical.com>
    21	 *          Konstantin Pugin <ria.freelander@gmail.com>
    22	 *          Lester Carballo Perez <lestcape@gmail.com>
    23	 */
    24	
    25	#ifndef SUPPORT_H
    26	#define SUPPORT_H
    27	
    28	#include <gtk/gtk.h>
    29	#include <stdbool.h>
    30	
    31	G_GNUC_INTERNAL bool gtk_widget_shell_shows_menubar(GtkWidget *widget);
    32	G_GNUC_INTERNAL void gtk_widget_connect_settings(GtkWidget *widget);
    33	G_GNUC_INTERNAL void gtk_widget_disconnect_settings(GtkWidget *widget);
    34	G_GNUC_INTERNAL bool gtk_module_should_run();
    35	G_GNUC_INTERNAL void watch_registrar_dbus();
    36	G_GNUC_INTERNAL void enable_debug();
    37	
    38	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/autopilot/__init__.py
--------------------------------------------------------------------------------
     1	# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
     2	# Copyright 2013 Canonical
     3	#
     4	# This file is part of unity-gtk-module.
     5	
     6	"""unity-gtk-module autopilot tests - top level package."""
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/autopilot/test.sh
--------------------------------------------------------------------------------
     1	#!/bin/sh
     2	
     3	for name in `autopilot list tests | head -n -3 | tail -n +3`
     4	do
     5	  autopilot run $name || exit 1
     6	done
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/autopilot/tests/__init__.py
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/autopilot/tests/test_gedit.py
--------------------------------------------------------------------------------
     1	import autopilot.introspection.gtk
     2	import os
     3	import pyatspi.registry
     4	import pyatspi.utils
     5	import time
     6	import unity.tests
     7	
     8	def print_accessible(root, level=0):
     9	    print level * ' ', root
    10	
    11	    for node in root:
    12	        print_accessible(node, level + 1)
    13	
    14	def get_accessible_with_name_and_role(root, name, role):
    15	    is_accessible = lambda a: a.name == name and a.get_role_name() == role
    16	    return pyatspi.utils.findDescendant(root, is_accessible, True);
    17	
    18	def get_panel_accessible(root):
    19	    return get_accessible_with_name_and_role(root, 'unity-panel-service', 'application')
    20	
    21	def get_app_menu_accessible(root):
    22	    is_app_menu = lambda a: len(a) > 0 and a[0].name == 'File' and a[0].get_role_name() == 'label'
    23	    return pyatspi.utils.findDescendant(root, is_app_menu, True)
    24	
    25	def get_label_accessible_with_name(root, name):
    26	    return get_accessible_with_name_and_role(root, name, 'label')
    27	
    28	def get_submenu_accessible(root):
    29	    return root[0]
    30	
    31	def get_menu_item_accessible_with_name(root, name):
    32	    is_menu_item = lambda a: a.name == name and a.get_role_name() in ('menu item', 'check menu item', 'radio menu item')
    33	    return pyatspi.utils.findDescendant(root, is_menu_item, True);
    34	
    35	def get_accessible_index(root, node):
    36	    for i in xrange(len(root)):
    37	        if root[i] == node:
    38	            return i
    39	
    40	    return -1
    41	
    42	class GeditTestCase(unity.tests.UnityTestCase):
    43	
    44	    def setUp(self):
    45	        super(GeditTestCase, self).setUp()
    46	
    47	        registry = pyatspi.registry.Registry()
    48	        self.desktop = registry.getDesktop(0)
    49	
    50	        module_name = 'unity-gtk-module'
    51	
    52	        if os.path.isfile(module_name):
    53	            modules = [module for module in os.getenv('GTK_MODULES', '').split(':') if module]
    54	            modules = [module for module in modules if module != 'unity-gtk-module']
    55	            modules.append(module_name)
    56	
    57	            self.patch_environment('GTK_MODULES', ':'.join(modules))
    58	
    59	        # This is needed on systems other than the EN locale
    60	        os.putenv("LC_ALL", "C")
    61	        self.addCleanup(os.unsetenv, "LC_ALL")
    62	
    63	    def test_file_new(self):
    64	        """Test if menu item insertion works."""
    65	        self.app = self.launch_test_application('gedit')
    66	        time.sleep(0.2)
    67	
    68	        # Open and close the Documents menu
    69	        panel = self.unity.panels.get_active_panel()
    70	        menu = panel.menus.get_menu_by_label('_Documents')
    71	        menu.mouse_click()
    72	        menu.mouse_click()
    73	
    74	        # Assert that Untitled Document 1 is checked
    75	        panel = get_panel_accessible(self.desktop)
    76	        app_menu = get_app_menu_accessible(panel)
    77	        documents_item = get_label_accessible_with_name(app_menu, 'Documents')
    78	        documents_menu = get_submenu_accessible(documents_item)
    79	        untitled_document_1_item = get_menu_item_accessible_with_name(documents_menu, 'Untitled Document 1')
    80	        untitled_document_1_index = get_accessible_index(documents_menu, untitled_document_1_item)
    81	        self.assertTrue(untitled_document_1_item.get_state_set().contains(pyatspi.STATE_CHECKED))
    82	
    83	        # Activate File > New
    84	        panel = self.unity.panels.get_active_panel()
    85	        menu = panel.menus.get_menu_by_label('_File')
    86	        menu.mouse_click()
    87	        self.keyboard.press_and_release('Down')
    88	        self.keyboard.press_and_release('Enter')
    89	
    90	        # Open and close the Documents menu
    91	        menu = panel.menus.get_menu_by_label('_Documents')
    92	        menu.mouse_click()
    93	        menu.mouse_click()
    94	
    95	        # Assert that two documents are open
    96	        tabs = self.app.select_many('GeditTab')
    97	        self.assertTrue(len(tabs) == 2)
    98	        self.assertTrue(tabs[0].name == 'Untitled Document 1')
    99	        self.assertTrue(tabs[1].name == 'Untitled Document 2')
   100	
   101	        # Assert that Untitled Document 2 is checked
   102	        untitled_document_1_item = documents_menu[untitled_document_1_index]
   103	        untitled_document_2_item = documents_menu[untitled_document_1_index + 1]
   104	        self.assertTrue(untitled_document_1_item.name == 'Untitled Document 1')
   105	        self.assertTrue(untitled_document_2_item.name == 'Untitled Document 2')
   106	        self.assertFalse(untitled_document_1_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   107	        self.assertTrue(untitled_document_2_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   108	
   109	    def test_file_close(self):
   110	        """Test if menu item removal works."""
   111	        self.app = self.launch_test_application('gedit')
   112	        time.sleep(0.2)
   113	
   114	        # Open and close the Documents menu
   115	        panel = self.unity.panels.get_active_panel()
   116	        menu = panel.menus.get_menu_by_label('_Documents')
   117	        menu.mouse_click()
   118	        menu.mouse_click()
   119	
   120	        # Assert that Untitled Document 1 is checked
   121	        panel = get_panel_accessible(self.desktop)
   122	        app_menu = get_app_menu_accessible(panel)
   123	        documents_item = get_label_accessible_with_name(app_menu, 'Documents')
   124	        documents_menu = get_submenu_accessible(documents_item)
   125	        untitled_document_1_item = get_menu_item_accessible_with_name(documents_menu, 'Untitled Document 1')
   126	        self.assertTrue(untitled_document_1_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   127	
   128	        # Activate File > Close
   129	        panel = self.unity.panels.get_active_panel()
   130	        menu = panel.menus.get_menu_by_label('_File')
   131	        menu.mouse_click()
   132	        self.keyboard.press_and_release('Up')
   133	        self.keyboard.press_and_release('Up')
   134	        self.keyboard.press_and_release('Enter')
   135	
   136	        # Open and close the Documents menu
   137	        menu = panel.menus.get_menu_by_label('_Documents')
   138	        menu.mouse_click()
   139	        menu.mouse_click()
   140	
   141	        # Assert that no documents are open
   142	        tabs = self.app.select_many('GeditTab')
   143	        self.assertFalse(tabs)
   144	
   145	        # Assert that Untitled Document 1 was removed
   146	        untitled_document_1_item = get_menu_item_accessible_with_name(documents_menu, 'Untitled Document 1')
   147	        self.assertFalse(untitled_document_1_item)
   148	
   149	    def test_file_quit(self):
   150	        """Test if menu item activation works."""
   151	        self.app = self.launch_test_application('gedit')
   152	        time.sleep(0.2)
   153	
   154	        # Activate File > Quit
   155	        panel = self.unity.panels.get_active_panel()
   156	        menu = panel.menus.get_menu_by_label('_File')
   157	        menu.mouse_click()
   158	        self.keyboard.press_and_release('Up')
   159	        self.keyboard.press_and_release('Enter')
   160	
   161	        # Assert that the application quit
   162	        self.assertFalse(self.process_manager.app_is_running('Text Editor'))
   163	
   164	    def test_edit_undo(self):
   165	        """Test if menu item sensitivity works."""
   166	        self.app = self.launch_test_application('gedit')
   167	        time.sleep(2.2)
   168	
   169	        # Hi!
   170	        self.keyboard.type('hi')
   171	
   172	        # Assert that Undo is sensitive
   173	        panel = get_panel_accessible(self.desktop)
   174	        app_menu = get_app_menu_accessible(panel)
   175	        edit_item = get_label_accessible_with_name(app_menu, 'Edit')
   176	        edit_menu = get_submenu_accessible(edit_item)
   177	        undo_item = get_menu_item_accessible_with_name(edit_menu, 'Undo')
   178	        self.assertTrue(undo_item.get_state_set().contains(pyatspi.STATE_SENSITIVE))
   179	
   180	        # Activate Edit > Undo
   181	        panel = self.unity.panels.get_active_panel()
   182	        menu = panel.menus.get_menu_by_label('_Edit')
   183	        menu.mouse_click()
   184	        self.keyboard.press_and_release('Down')
   185	        self.keyboard.press_and_release('Enter')
   186	
   187	        # Open and close the Edit menu
   188	        menu.mouse_click()
   189	        menu.mouse_click()
   190	
   191	        # Assert that Undo is insensitive
   192	        self.assertFalse(undo_item.get_state_set().contains(pyatspi.STATE_SENSITIVE))
   193	
   194	    def test_view_toolbar(self):
   195	        """Test if check menu item activation works."""
   196	        self.app = self.launch_test_application('gedit')
   197	        time.sleep(0.2)
   198	
   199	        # Assert that View > Toolbar matches the visibility of the tool bar
   200	        panel = get_panel_accessible(self.desktop)
   201	        app_menu = get_app_menu_accessible(panel)
   202	        view_item = get_label_accessible_with_name(app_menu, 'View')
   203	        view_menu = get_submenu_accessible(view_item)
   204	        toolbar_item = get_menu_item_accessible_with_name(view_menu, 'Toolbar')
   205	        checked = toolbar_item.get_state_set().contains(pyatspi.STATE_CHECKED)
   206	        toolbar = self.app.select_many('GtkToolbar')[0]
   207	        visible = toolbar.visible
   208	        self.assertTrue(checked == visible)
   209	
   210	        # Activate View > Toolbar
   211	        panel = self.unity.panels.get_active_panel()
   212	        menu = panel.menus.get_menu_by_label('_View')
   213	        menu.mouse_click()
   214	        self.keyboard.press_and_release('Down')
   215	        self.keyboard.press_and_release('Enter')
   216	
   217	        # Open and close the View menu
   218	        menu.mouse_click()
   219	        menu.mouse_click()
   220	
   221	        # Assert that the visibility changed
   222	        self.assertTrue(checked == visible)
   223	        self.assertFalse(toolbar.visible == visible)
   224	        self.assertFalse(toolbar_item.get_state_set().contains(pyatspi.STATE_CHECKED) == checked)
   225	
   226	        # Activate View > Toolbar
   227	        menu.mouse_click()
   228	        self.keyboard.press_and_release('Down')
   229	        self.keyboard.press_and_release('Enter')
   230	
   231	        # Open and close the View menu
   232	        menu.mouse_click()
   233	        menu.mouse_click()
   234	
   235	        # Assert that the visibility is restored
   236	        self.assertTrue(checked == visible)
   237	        self.assertTrue(toolbar.visible == visible)
   238	        self.assertTrue(toolbar_item.get_state_set().contains(pyatspi.STATE_CHECKED) == checked)
   239	
   240	    def test_documents_untitled_document(self):
   241	        """Test if radio menu item activation works."""
   242	        self.app = self.launch_test_application('gedit')
   243	        time.sleep(0.2)
   244	
   245	        # Open and close the Documents menu
   246	        panel = self.unity.panels.get_active_panel()
   247	        menu = panel.menus.get_menu_by_label('_Documents')
   248	        menu.mouse_click()
   249	        menu.mouse_click()
   250	
   251	        # Assert that Untitled Document 1 is checked
   252	        panel = get_panel_accessible(self.desktop)
   253	        app_menu = get_app_menu_accessible(panel)
   254	        documents_item = get_label_accessible_with_name(app_menu, 'Documents')
   255	        documents_menu = get_submenu_accessible(documents_item)
   256	        untitled_document_1_item = get_menu_item_accessible_with_name(documents_menu, 'Untitled Document 1')
   257	        untitled_document_1_index = get_accessible_index(documents_menu, untitled_document_1_item)
   258	        self.assertTrue(untitled_document_1_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   259	
   260	        # Activate File > New
   261	        panel = self.unity.panels.get_active_panel()
   262	        menu = panel.menus.get_menu_by_label('_File')
   263	        menu.mouse_click()
   264	        self.keyboard.press_and_release('Down')
   265	        self.keyboard.press_and_release('Enter')
   266	
   267	        # Open and close the Documents menu
   268	        menu = panel.menus.get_menu_by_label('_Documents')
   269	        menu.mouse_click()
   270	        menu.mouse_click()
   271	
   272	        # Assert that two documents are open
   273	        tabs = self.app.select_many('GeditTab')
   274	        self.assertTrue(len(tabs) == 2)
   275	        self.assertTrue(tabs[0].name == 'Untitled Document 1')
   276	        self.assertTrue(tabs[1].name == 'Untitled Document 2')
   277	
   278	        # Assert that Untitled Document 2 is checked
   279	        untitled_document_1_item = documents_menu[untitled_document_1_index]
   280	        untitled_document_2_item = documents_menu[untitled_document_1_index + 1]
   281	        self.assertTrue(untitled_document_1_item.name == 'Untitled Document 1')
   282	        self.assertTrue(untitled_document_2_item.name == 'Untitled Document 2')
   283	        self.assertFalse(untitled_document_1_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   284	        self.assertTrue(untitled_document_2_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   285	
   286	        # Activate Documents > Untitled Document 1
   287	        menu.mouse_click()
   288	        self.keyboard.press_and_release('Up')
   289	        self.keyboard.press_and_release('Up')
   290	        self.keyboard.press_and_release('Enter')
   291	
   292	        # Open and close the Documents menu
   293	        menu.mouse_click()
   294	        menu.mouse_click()
   295	
   296	        # Assert that Untitled Document 1 is checked
   297	        self.assertTrue(untitled_document_1_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   298	        self.assertFalse(untitled_document_2_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   299	
   300	    def test_ctrl_n(self):
   301	        """Test if menu item insertion works."""
   302	        self.app = self.launch_test_application('gedit')
   303	        time.sleep(0.2)
   304	
   305	        # Open and close the Documents menu
   306	        panel = self.unity.panels.get_active_panel()
   307	        menu = panel.menus.get_menu_by_label('_Documents')
   308	        menu.mouse_click()
   309	        menu.mouse_click()
   310	
   311	        # Assert that Untitled Document 1 is checked
   312	        panel = get_panel_accessible(self.desktop)
   313	        app_menu = get_app_menu_accessible(panel)
   314	        documents_item = get_label_accessible_with_name(app_menu, 'Documents')
   315	        documents_menu = get_submenu_accessible(documents_item)
   316	        untitled_document_1_item = get_menu_item_accessible_with_name(documents_menu, 'Untitled Document 1')
   317	        untitled_document_1_index = get_accessible_index(documents_menu, untitled_document_1_item)
   318	        self.assertTrue(untitled_document_1_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   319	
   320	        # Activate File > New
   321	        self.keyboard.press_and_release('Ctrl+n')
   322	
   323	        # Open and close the Documents menu
   324	        panel = self.unity.panels.get_active_panel()
   325	        menu = panel.menus.get_menu_by_label('_Documents')
   326	        menu.mouse_click()
   327	        menu.mouse_click()
   328	
   329	        # Assert that two documents are open
   330	        tabs = self.app.select_many('GeditTab')
   331	        self.assertTrue(len(tabs) == 2)
   332	        self.assertTrue(tabs[0].name == 'Untitled Document 1')
   333	        self.assertTrue(tabs[1].name == 'Untitled Document 2')
   334	
   335	        # Assert that Untitled Document 2 is checked
   336	        untitled_document_1_item = documents_menu[untitled_document_1_index]
   337	        untitled_document_2_item = documents_menu[untitled_document_1_index + 1]
   338	        self.assertTrue(untitled_document_1_item.name == 'Untitled Document 1')
   339	        self.assertTrue(untitled_document_2_item.name == 'Untitled Document 2')
   340	        self.assertFalse(untitled_document_1_item.get_state_set().contains(pyatspi.STATE_CHECKED))
   341	        self.assertTrue(untitled_document_2_item.get_state_set().contains(pyatspi.STATE_CHECKED))
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/altgrabber.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright © 2011 Canonical Limited
     3	 *
     4	 * All rights reserved.
     5	 *
     6	 * Author: Ryan Lortie <desrt@desrt.ca>
     7	 */
     8	
     9	#include "altgrabber.h"
    10	
    11	#include <X11/XKBlib.h>
    12	#include <gdk/gdkx.h>
    13	
    14	/**
    15	 * SECTION:altgrabber
    16	 * @title: AltGrabber
    17	 * @short_description: a utility class to make grabs for keys
    18	 *
    19	 * #AltGrabber is a small utility class for establishing global grabs on
    20	 * particular Alt+letter key sequences.  Letters to grab are added with
    21	 * alt_grabber_add_unichar() and the list of grabs is cleared with
    22	 * alt_grabber_clear().
    23	 *
    24	 * When one of the grabbed key sequences is used, the "activated" signal
    25	 * is emitted.
    26	 **/
    27	
    28	/**
    29	 * AltGrabber:
    30	 *
    31	 * AltGrabber is an opaque structure type with no public fields.
    32	 **/
    33	
    34	typedef GObjectClass AltGrabberClass;
    35	struct _AltGrabber
    36	{
    37		GObject parent_instance;
    38	
    39		GHashTable *grabs;
    40		guint finish_clear_id;
    41	
    42		GdkScreen *screen;
    43		GdkKeymap *keymap;
    44		GdkWindow *root;
    45	};
    46	
    47	typedef struct
    48	{
    49		gunichar c;
    50		gint ref_count;
    51	
    52		AltGrabberCallback callback;
    53		gpointer user_data;
    54		GDestroyNotify notify;
    55	} KeyGrab;
    56	
    57	static GSList *alt_grabbers;
    58	
    59	G_DEFINE_TYPE(AltGrabber, alt_grabber, G_TYPE_OBJECT);
    60	
    61	static GdkFilterReturn alt_grabber_event_filter(GdkXEvent *xevent, GdkEvent *event,
    62	                                                gpointer user_data)
    63	{
    64		XAnyEvent *any_event = (XAnyEvent *)xevent;
    65		AltGrabber *grabber  = user_data;
    66	
    67		if (any_event->type == KeyPress)
    68		{
    69			XKeyEvent *key_event = (XKeyEvent *)any_event;
    70			guint keycode        = key_event->keycode;
    71			GSList *grabs;
    72	
    73			grabs = g_hash_table_lookup(grabber->grabs, GINT_TO_POINTER(keycode));
    74	
    75			while (grabs)
    76			{
    77				KeyGrab *grab = grabs->data;
    78	
    79				(*grab->callback)(grabber, grab->c, grab->user_data);
    80	
    81				grabs = grabs->next;
    82			}
    83		}
    84	
    85		return GDK_FILTER_CONTINUE;
    86	}
    87	
    88	static gboolean alt_grabber_finish_clear(gpointer data)
    89	{
    90		AltGrabber *grabber = data;
    91		GHashTableIter iter;
    92		gpointer key, value;
    93		Display *dpy;
    94		Window root;
    95	
    96		dpy  = GDK_DISPLAY_XDISPLAY(gdk_screen_get_display(grabber->screen));
    97		root = GDK_WINDOW_XID(grabber->root);
    98	
    99		gdk_error_trap_push();
   100	
   101		g_hash_table_iter_init(&iter, grabber->grabs);
   102		while (g_hash_table_iter_next(&iter, &key, &value))
   103			if (value == NULL)
   104			{
   105				guint keycode = GPOINTER_TO_INT(key);
   106				guint mask;
   107	
   108				for (mask = 0; mask < 0x100; mask++)
   109					if ((mask & (ShiftMask | ControlMask | Mod1Mask)) == Mod1Mask)
   110						XUngrabKey(dpy, keycode, mask, root);
   111	
   112				g_hash_table_iter_remove(&iter);
   113			}
   114	
   115		gdk_error_trap_pop_ignored();
   116	
   117		grabber->finish_clear_id = 0;
   118		return FALSE;
   119	}
   120	
   121	static void alt_grabber_finalize(GObject *object)
   122	{
   123		AltGrabber *grabber = ALT_GRABBER(object);
   124	
   125		alt_grabber_clear(grabber);
   126	
   127		if (grabber->finish_clear_id != 0)
   128		{
   129			g_source_remove(grabber->finish_clear_id);
   130			alt_grabber_finish_clear(grabber);
   131		}
   132	
   133		alt_grabbers = g_slist_remove(alt_grabbers, grabber);
   134	
   135		g_assert(g_hash_table_size(grabber->grabs) == 0);
   136		g_hash_table_unref(grabber->grabs);
   137	
   138		g_object_unref(grabber->screen);
   139		g_object_unref(grabber->keymap);
   140	
   141		gdk_window_remove_filter(grabber->root, alt_grabber_event_filter, grabber);
   142		g_object_unref(grabber->root);
   143	
   144		G_OBJECT_CLASS(alt_grabber_parent_class)->finalize(object);
   145	}
   146	
   147	static void alt_grabber_init(AltGrabber *grabber)
   148	{
   149		grabber->grabs = g_hash_table_new(NULL, NULL);
   150	}
   151	
   152	static void alt_grabber_class_init(AltGrabberClass *class)
   153	{
   154		class->finalize = alt_grabber_finalize;
   155	}
   156	
   157	static AltGrabber *alt_grabber_new(GdkScreen *screen)
   158	{
   159		AltGrabber *grabber;
   160		GdkDisplay *display;
   161	
   162		display = gdk_screen_get_display(screen);
   163	
   164		grabber         = g_object_new(ALT_GRABBER_TYPE, NULL);
   165		grabber->keymap = g_object_ref(gdk_keymap_get_for_display(display));
   166		grabber->root   = g_object_ref(gdk_screen_get_root_window(screen));
   167		grabber->screen = g_object_ref(screen);
   168		gdk_window_add_filter(grabber->root, alt_grabber_event_filter, grabber);
   169	
   170		/* We can not safely reverse this... */
   171		XSelectInput(GDK_DISPLAY_XDISPLAY(display), GDK_WINDOW_XID(grabber->root), KeyPressMask);
   172	
   173		return grabber;
   174	}
   175	
   176	/**
   177	 * alt_grabber_get_for_screen:
   178	 * @screen: a #GdkScreen
   179	 *
   180	 * Gets the #AltGrabber for @screen.
   181	 *
   182	 * If an #AltGrabber already exists for @screen, it is returned.
   183	 * Otherwise, one is created.
   184	 *
   185	 * In any case, you get a reference.  Use g_object_unref() when you're
   186	 * done.
   187	 *
   188	 * Returns: (transfer full): the #AltGrabber for @screen
   189	 **/
   190	AltGrabber *alt_grabber_get_for_screen(GdkScreen *screen)
   191	{
   192		AltGrabber *grabber;
   193		GSList *node;
   194	
   195		for (node = alt_grabbers; node; node = node->next)
   196		{
   197			grabber = node->data;
   198	
   199			if (grabber->screen == screen)
   200				return g_object_ref(grabber);
   201		}
   202	
   203		grabber      = alt_grabber_new(screen);
   204		alt_grabbers = g_slist_prepend(alt_grabbers, grabber);
   205	
   206		return grabber;
   207	}
   208	
   209	/**
   210	 * alt_grabber_clear:
   211	 * @grabber: an #AltGrabber
   212	 *
   213	 * Clears all grab requests on @grabber.
   214	 **/
   215	void alt_grabber_clear(AltGrabber *grabber)
   216	{
   217		gboolean clear_needed = FALSE;
   218		GHashTableIter iter;
   219		gpointer value;
   220	
   221		g_hash_table_iter_init(&iter, grabber->grabs);
   222		while (g_hash_table_iter_next(&iter, NULL, &value))
   223		{
   224			GSList *list = value;
   225	
   226			while (list)
   227			{
   228				KeyGrab *grab = list->data;
   229	
   230				if (0 == --grab->ref_count)
   231				{
   232					if (grab->notify)
   233						(*grab->notify)(grab->user_data);
   234					g_slice_free(KeyGrab, grab);
   235				}
   236	
   237				list = g_slist_remove_link(list, list);
   238			}
   239	
   240			g_hash_table_iter_replace(&iter, NULL);
   241			clear_needed = TRUE;
   242		}
   243	
   244		if (clear_needed && grabber->finish_clear_id == 0)
   245			grabber->finish_clear_id = g_idle_add(alt_grabber_finish_clear, grabber);
   246	}
   247	
   248	/**
   249	 * alt_grabber_add_unichar:
   250	 * @grabber: an #AltGrabber
   251	 * @c: the #gunichar to grab
   252	 * @callback: the callback to call when the character is pressed
   253	 * @user_data: the user_data parameter for @callback
   254	 * @notify: the #GDestroyNotift for @user_data, or %NULL
   255	 *
   256	 * Adds a new grab to @grabber.
   257	 *
   258	 * When Alt+@c is pressed, @callback will be called with @user_data.
   259	 *
   260	 * The effect of this call can be reversed with alt_grabber_clear().
   261	 **/
   262	void alt_grabber_add_unichar(AltGrabber *grabber, gunichar c, AltGrabberCallback callback,
   263	                             gpointer user_data, GDestroyNotify notify)
   264	{
   265		GdkKeymapKey *codes;
   266		gint n_codes;
   267		guint keyval;
   268	
   269		keyval = gdk_unicode_to_keyval(c);
   270		keyval = gdk_keyval_to_lower(keyval);
   271	
   272		if (keyval != 0 &&
   273		    gdk_keymap_get_entries_for_keyval(grabber->keymap, keyval, &codes, &n_codes))
   274		{
   275			KeyGrab *grab;
   276			Display *dpy;
   277			Window root;
   278			gint i;
   279	
   280			g_assert(n_codes > 0);
   281	
   282			grab            = g_slice_new(KeyGrab);
   283			grab->c         = c;
   284			grab->ref_count = n_codes;
   285			grab->callback  = callback;
   286			grab->user_data = user_data;
   287			grab->notify    = notify;
   288	
   289			dpy  = GDK_DISPLAY_XDISPLAY(gdk_screen_get_display(grabber->screen));
   290			root = GDK_WINDOW_XID(grabber->root);
   291	
   292			gdk_error_trap_push();
   293			for (i = 0; i < n_codes; i++)
   294			{
   295				gpointer list = NULL;
   296	
   297				if (!g_hash_table_lookup_extended(grabber->grabs,
   298				                                  GINT_TO_POINTER(codes[i].keycode),
   299				                                  NULL,
   300				                                  &list))
   301				{
   302					guint mask;
   303	
   304					for (mask = 0; mask < 0x100; mask++)
   305						if ((mask & (ShiftMask | ControlMask | Mod1Mask)) ==
   306						    Mod1Mask)
   307							XGrabKey(dpy,
   308							         codes[i].keycode,
   309							         mask,
   310							         root,
   311							         False,
   312							         GrabModeAsync,
   313							         GrabModeAsync);
   314				}
   315	
   316				list = g_slist_prepend(list, grab);
   317				g_hash_table_insert(grabber->grabs,
   318				                    GINT_TO_POINTER(codes[i].keycode),
   319				                    list);
   320			}
   321	
   322			if (gdk_error_trap_pop())
   323			{
   324				gchar outbuf[8];
   325				gint s;
   326	
   327				s         = g_unichar_to_utf8(c, outbuf);
   328				outbuf[s] = '\0';
   329	
   330				g_warning("failed to acquire (some) keyboard grabs for '%s'", outbuf);
   331			}
   332		}
   333		else
   334		{
   335			if (notify)
   336				(*notify)(user_data);
   337		}
   338	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/altgrabber.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright © 2011 Canonical Limited
     3	 *
     4	 * All rights reserved.
     5	 *
     6	 * Author: Ryan Lortie <desrt@desrt.ca>
     7	 */
     8	
     9	#ifndef __ALT_GRABBER_H__
    10	#define __ALT_GRABBER_H__
    11	
    12	#include <gdk/gdk.h>
    13	
    14	#define ALT_GRABBER_TYPE (alt_grabber_get_type())
    15	#define ALT_GRABBER(inst) (G_TYPE_CHECK_INSTANCE_CAST((inst), ALT_GRABBER_TYPE, AltGrabber))
    16	#define IS_ALT_GRABBER(inst) (G_TYPE_CHECK_INSTANCE_TYPE((inst), ALT_GRABBER_TYPE))
    17	
    18	typedef struct _AltGrabber AltGrabber;
    19	
    20	typedef void (*AltGrabberCallback)(AltGrabber *grabber, gunichar c, gpointer user_data);
    21	
    22	GType alt_grabber_get_type(void) G_GNUC_CONST;
    23	AltGrabber *alt_grabber_get_for_screen(GdkScreen *screen);
    24	void alt_grabber_clear(AltGrabber *grabber);
    25	void alt_grabber_add_unichar(AltGrabber *grabber, gunichar c, AltGrabberCallback callback,
    26	                             gpointer user_data, GDestroyNotify notify);
    27	
    28	#endif /* __ALT_GRABBER_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/altmonitor.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright © 2011 Canonical Limited
     3	 *
     4	 * All rights reserved.
     5	 *
     6	 * Author: Ryan Lortie <desrt@desrt.ca>
     7	 */
     8	
     9	#include "altmonitor.h"
    10	
    11	#include <X11/XKBlib.h>
    12	#include <gdk/gdkx.h>
    13	
    14	/**
    15	 * SECTION:altmonitor
    16	 * @title: AltMonitor
    17	 * @short_description: a utility class to monitor the Alt key
    18	 *
    19	 * #AltMonitor is a small utility class for monitoring the state of the
    20	 * 'Alt' key on a particular #GdkDisplay.  It depends on a functioning
    21	 * Xkb extension on the display.
    22	 *
    23	 * #AltMonitor has one property: "alt-pressed".
    24	 *
    25	 * To watch for changes, connect to the GObject::notify signal for the
    26	 * "alt-pressed" property.  Query the current state with
    27	 * alt_monitor_get_alt_pressed().
    28	 **/
    29	
    30	/**
    31	 * AltMonitor:
    32	 *
    33	 * AltMonitor is an opaque structure type with no public fields.
    34	 **/
    35	
    36	typedef GObjectClass AltMonitorClass;
    37	struct _AltMonitor
    38	{
    39		GObject parent_instance;
    40	
    41		GdkDisplay *display;
    42		gint xkb_event_type;
    43		gboolean is_pressed;
    44	};
    45	
    46	static GParamSpec *alt_pressed_param;
    47	static GSList *alt_monitors;
    48	
    49	G_DEFINE_TYPE(AltMonitor, alt_monitor, G_TYPE_OBJECT);
    50	
    51	static GdkFilterReturn alt_monitor_event_filter(GdkXEvent *xevent, GdkEvent *event,
    52	                                                gpointer user_data)
    53	{
    54		XAnyEvent *any_event = (XAnyEvent *)xevent;
    55		AltMonitor *monitor  = NULL;
    56	
    57		/* This is all a little bit silly.  GDK has no per-GdkDisplay event
    58		 * filters, so we have no chance to attach the user-data per-display.
    59		 *
    60		 * Instead, we have to scan our list for the correct display.
    61		 *
    62		 * In practice, this is going to be quite fast... :)
    63		 */
    64		{
    65			GSList *node;
    66	
    67			for (node = alt_monitors; node; node = node->next)
    68			{
    69				AltMonitor *item = node->data;
    70	
    71				if (GDK_DISPLAY_XDISPLAY(item->display) == any_event->display)
    72				{
    73					monitor = item;
    74					break;
    75				}
    76			}
    77		}
    78	
    79		if (monitor != NULL && monitor->xkb_event_type != 0 &&
    80		    monitor->xkb_event_type == any_event->type)
    81		{
    82			XkbAnyEvent *xkb_event = (XkbAnyEvent *)any_event;
    83	
    84			if (xkb_event->xkb_type == XkbStateNotify)
    85			{
    86				XkbStateNotifyEvent *sn_event = (XkbStateNotifyEvent *)xkb_event;
    87				gboolean is_pressed;
    88	
    89				is_pressed = (sn_event->mods & Mod1Mask) != 0;
    90	
    91				if (is_pressed != monitor->is_pressed)
    92				{
    93					monitor->is_pressed = is_pressed;
    94					g_object_notify_by_pspec(G_OBJECT(monitor), alt_pressed_param);
    95				}
    96			}
    97		}
    98	
    99		return GDK_FILTER_CONTINUE;
   100	}
   101	
   102	static void alt_monitor_get_property(GObject *object, guint prop_id, GValue *value,
   103	                                     GParamSpec *pspec)
   104	{
   105		AltMonitor *monitor = ALT_MONITOR(object);
   106		g_assert(pspec == alt_pressed_param);
   107	
   108		g_value_set_boolean(value, monitor->is_pressed);
   109	}
   110	
   111	static void alt_monitor_finalize(GObject *object)
   112	{
   113		AltMonitor *monitor = ALT_MONITOR(object);
   114	
   115		alt_monitors = g_slist_remove(alt_monitors, monitor);
   116		g_object_unref(monitor->display);
   117	
   118		/* If this is the last one, remove the filter */
   119		if (alt_monitors == NULL)
   120			gdk_window_remove_filter(NULL, alt_monitor_event_filter, NULL);
   121	
   122		G_OBJECT_CLASS(alt_monitor_parent_class)->finalize(object);
   123	}
   124	
   125	static void alt_monitor_init(AltMonitor *monitor)
   126	{
   127	}
   128	
   129	static void alt_monitor_class_init(AltMonitorClass *class)
   130	{
   131		class->finalize     = alt_monitor_finalize;
   132		class->get_property = alt_monitor_get_property;
   133	
   134		alt_pressed_param = g_param_spec_boolean("alt-pressed",
   135		                                         "alt key pressed",
   136		                                         "TRUE if 'Alt' is currently pressed",
   137		                                         TRUE,
   138		                                         G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
   139		g_object_class_install_property(class, 1, alt_pressed_param);
   140	}
   141	
   142	static gint alt_monitor_get_xkb_event_type(Display *dpy)
   143	{
   144		gint major = XkbMajorVersion;
   145		gint minor = XkbMinorVersion;
   146		gint event_type;
   147	
   148		if (!XkbLibraryVersion(&major, &minor))
   149			return 0;
   150	
   151		if (!XkbQueryExtension(dpy, NULL, &event_type, NULL, &major, &minor))
   152			return 0;
   153	
   154		return event_type;
   155	}
   156	
   157	static AltMonitor *alt_monitor_new(GdkDisplay *display)
   158	{
   159		AltMonitor *monitor;
   160		Display *dpy;
   161	
   162		dpy = GDK_DISPLAY_XDISPLAY(display);
   163	
   164		monitor                 = g_object_new(ALT_MONITOR_TYPE, NULL);
   165		monitor->display        = g_object_ref(display);
   166		monitor->xkb_event_type = alt_monitor_get_xkb_event_type(dpy);
   167	
   168		if (monitor->xkb_event_type)
   169		{
   170			XkbStateRec state;
   171	
   172			/* Since we have no way of knowing if someone else comes along
   173			 * after us and requests XkbModifierStateMask, we can never undo
   174			 * this...
   175			 */
   176			XkbSelectEventDetails(dpy,
   177			                      XkbUseCoreKbd,
   178			                      XkbStateNotify,
   179			                      XkbModifierStateMask,
   180			                      XkbModifierStateMask);
   181	
   182			/* Get the initial state in case 'Alt' was pressed to start. */
   183			XkbGetState(dpy, XkbUseCoreKbd, &state);
   184	
   185			monitor->is_pressed = (state.mods & Mod1Mask) != 0;
   186		}
   187	
   188		return monitor;
   189	}
   190	
   191	/**
   192	 * alt_monitor_get_for_display:
   193	 * @display: a #GdkDisplay
   194	 *
   195	 * Gets the #AltMonitor for @display.
   196	 *
   197	 * If an #AltMonitor already exists for @display, it is returned.
   198	 * Otherwise, one is created.
   199	 *
   200	 * In any case, you get a reference.  Use g_object_unref() when you're
   201	 * done.
   202	 *
   203	 * Returns: (transfer full): the #AltMonitor for @display
   204	 **/
   205	AltMonitor *alt_monitor_get_for_display(GdkDisplay *display)
   206	{
   207		AltMonitor *monitor;
   208		GSList *node;
   209	
   210		for (node = alt_monitors; node; node = node->next)
   211		{
   212			monitor = node->data;
   213	
   214			if (monitor->display == display)
   215				return g_object_ref(monitor);
   216		}
   217	
   218		monitor = alt_monitor_new(display);
   219	
   220		/* if this is the first one, add the filter */
   221		if (alt_monitors == NULL)
   222			gdk_window_add_filter(NULL, alt_monitor_event_filter, NULL);
   223	
   224		alt_monitors = g_slist_prepend(alt_monitors, monitor);
   225	
   226		return monitor;
   227	}
   228	
   229	/**
   230	 * alt_monitor_get_alt_pressed:
   231	 * @monitor: an #AltMonitor
   232	 *
   233	 * Checks if the 'Alt' key is pressed.
   234	 *
   235	 * Returns: %TRUE if 'Alt' is currently being held down
   236	 **/
   237	gboolean alt_monitor_get_alt_pressed(AltMonitor *monitor)
   238	{
   239		g_return_val_if_fail(IS_ALT_MONITOR(monitor), FALSE);
   240	
   241		return monitor->is_pressed;
   242	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/altmonitor.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright © 2011 Canonical Limited
     3	 *
     4	 * All rights reserved.
     5	 *
     6	 * Author: Ryan Lortie <desrt@desrt.ca>
     7	 */
     8	
     9	#ifndef __ALT_MONITOR_H__
    10	#define __ALT_MONITOR_H__
    11	
    12	#include <gdk/gdk.h>
    13	
    14	#define ALT_MONITOR_TYPE (alt_monitor_get_type())
    15	#define ALT_MONITOR(inst) (G_TYPE_CHECK_INSTANCE_CAST((inst), ALT_MONITOR_TYPE, AltMonitor))
    16	#define IS_ALT_MONITOR(inst) (G_TYPE_CHECK_INSTANCE_TYPE((inst), ALT_MONITOR_TYPE))
    17	
    18	typedef struct _AltMonitor AltMonitor;
    19	
    20	GType alt_monitor_get_type(void) G_GNUC_CONST;
    21	AltMonitor *alt_monitor_get_for_display(GdkDisplay *display);
    22	gboolean alt_monitor_get_alt_pressed(AltMonitor *monitor);
    23	
    24	#endif /* __ALT_MONITOR_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/black.vala
--------------------------------------------------------------------------------
     1	class BlackBox : Gtk.Box {
     2		protected override bool draw (Cairo.Context cr) {
     3			cr.set_source_rgb (0.0, 0.0, 0.0);
     4			cr.paint ();
     5			return false;
     6		}
     7	}
     8	
     9	void main (string[] args) {
    10		Gtk.init (ref args);
    11	
    12		Bus.own_name (BusType.SESSION, "demo.black", 0, null, null, null);
    13	
    14		var window = new Gtk.Window (Gtk.WindowType.TOPLEVEL);
    15		window.set_default_size (400, 300);
    16	    var box = new Gtk.Box (Gtk.Orientation.VERTICAL, 0);
    17		window.add (box);
    18	
    19		var menubar = new Gtk.MenuBar ();
    20	
    21		var file_item = new Gtk.MenuItem.with_label ("File");
    22		var file = new Gtk.Menu ();
    23		file_item.set_submenu (file);
    24		menubar.add (file_item);
    25		file.add (new Gtk.MenuItem.with_label ("New"));
    26		file.add (new Gtk.MenuItem.with_label ("Open"));
    27		file.add (new Gtk.MenuItem.with_label ("Save"));
    28		file.add (new Gtk.MenuItem.with_label ("Quit"));
    29	
    30		var edit_item = new Gtk.MenuItem.with_label ("Edit");
    31		var edit = new Gtk.Menu ();
    32		edit_item.set_submenu (edit);
    33		menubar.add (edit_item);
    34		edit.add (new Gtk.MenuItem.with_label ("Cut"));
    35		edit.add (new Gtk.MenuItem.with_label ("Copy"));
    36		edit.add (new Gtk.MenuItem.with_label ("Paste"));
    37	
    38		var view_item = new Gtk.MenuItem.with_label ("View");
    39		var view = new Gtk.Menu ();
    40		view_item.set_submenu (view);
    41		menubar.add (view_item);
    42		view.add (new Gtk.CheckMenuItem.with_label ("Fullscreen"));
    43	
    44		var help_item = new Gtk.MenuItem.with_label ("Help");
    45		var help = new Gtk.Menu ();
    46		help_item.set_submenu (help);
    47		menubar.add (help_item);
    48		help.add (new Gtk.MenuItem.with_label ("Contents"));
    49		help.add (new Gtk.MenuItem.with_label ("About"));
    50	
    51		box.pack_start (menubar, false, false, 0);
    52		box.pack_start (new BlackBox (), true, true, 0);
    53	
    54		window.show_all ();
    55	
    56		Gtk.main ();
    57	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/client.c
--------------------------------------------------------------------------------
     1	#include <gtk/gtk.h>
     2	
     3	#include "altgrabber.h"
     4	#include "altmonitor.h"
     5	#include "menusource.h"
     6	
     7	#if 0
     8	static void
     9	items_changed (GMenuModel *menu,
    10	               gint        position,
    11	               gint        removed,
    12	               gint        added,
    13	               gpointer    user_data)
    14	{
    15	  g_print ("\n change");
    16	  g_menu_markup_print_stderr (menu);
    17	  g_print ("\n");
    18	}
    19	#endif
    20	
    21	static void menu_changed(GObject *object, GParamSpec *pspec, gpointer user_data)
    22	{
    23		static GActionGroup *actions;
    24		GtkMenuBar *bar = user_data;
    25		GMenuModel *menu;
    26	
    27		if (!actions)
    28			actions = G_ACTION_GROUP(g_simple_action_group_new());
    29	
    30		menu = menu_source_get_menu(MENU_SOURCE(object));
    31	
    32		g_print("\n");
    33		if (menu)
    34		{
    35			// g_signal_connect (menu, "items-changed", G_CALLBACK (items_changed), NULL);
    36			gtk_menu_shell_bind_model(GTK_MENU_SHELL(bar), G_MENU_MODEL(menu), 0, 0);
    37		}
    38		else
    39		{
    40			GMenu *empty;
    41			empty = g_menu_new();
    42			gtk_menu_shell_bind_model(GTK_MENU_SHELL(bar), G_MENU_MODEL(empty), 0, 0);
    43			g_print("[no menu]\n");
    44		}
    45		g_print("\n");
    46	}
    47	
    48	int main(int argc, char **argv)
    49	{
    50		MenuSource *source;
    51		GMenuModel *m;
    52		GtkWidget *bar;
    53		GtkWidget *win;
    54	
    55		gtk_init(&argc, &argv);
    56	
    57		win = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    58		bar = gtk_menu_bar_new();
    59		gtk_window_set_accept_focus(GTK_WINDOW(win), FALSE);
    60		gtk_container_add(GTK_CONTAINER(win), bar);
    61		gtk_window_set_default_size(GTK_WINDOW(win), 800, 200);
    62		gtk_widget_show_all(win);
    63	
    64		source = menu_source_get_for_screen(gdk_screen_get_default());
    65		g_signal_connect(source, "notify::menu", G_CALLBACK(menu_changed), bar);
    66		menu_changed(G_OBJECT(source), NULL, bar);
    67	
    68		gtk_main();
    69	
    70		return 0;
    71	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/hello.c
--------------------------------------------------------------------------------
     1	#include <gtk/gtk.h>
     2	
     3	static GtkWidget *menubar;
     4	static GtkWidget *submenuitem;
     5	
     6	static void destroy_window(GtkWindow *window, gpointer user_data)
     7	{
     8		gtk_main_quit();
     9	}
    10	
    11	static void realize_menubar(GtkButton *button, gpointer user_data)
    12	{
    13		if (gtk_widget_get_parent(menubar) == NULL)
    14		{
    15			GtkWidget *window;
    16			GtkWidget *grid;
    17	
    18			window = gtk_widget_get_toplevel(GTK_WIDGET(button));
    19			grid   = gtk_bin_get_child(GTK_BIN(window));
    20	
    21			gtk_grid_insert_row(GTK_GRID(grid), 0);
    22			gtk_grid_attach(GTK_GRID(grid), menubar, 0, 0, 1, 1);
    23		}
    24	}
    25	
    26	static void unrealize_menubar(GtkButton *button, gpointer user_data)
    27	{
    28		if (gtk_widget_get_parent(menubar) != NULL)
    29		{
    30			GtkWidget *window;
    31			GtkWidget *grid;
    32	
    33			window = gtk_widget_get_toplevel(GTK_WIDGET(button));
    34			grid   = gtk_bin_get_child(GTK_BIN(window));
    35	
    36			gtk_container_remove(GTK_CONTAINER(grid), menubar);
    37		}
    38	}
    39	
    40	static void add_submenu(GtkButton *button, gpointer user_data)
    41	{
    42		if (gtk_widget_get_parent(submenuitem) == NULL)
    43		{
    44			if (submenuitem == NULL)
    45			{
    46				GtkWidget *submenu;
    47				GtkWidget *item;
    48	
    49				submenuitem = gtk_menu_item_new_with_label("Extras");
    50	
    51				submenu = gtk_menu_new();
    52	
    53				item = gtk_menu_item_new_with_label("Extra 1");
    54				gtk_container_add(GTK_CONTAINER(submenu), item);
    55	
    56				item = gtk_menu_item_new_with_label("Extra 2");
    57				gtk_container_add(GTK_CONTAINER(submenu), item);
    58	
    59				gtk_menu_item_set_submenu(GTK_MENU_ITEM(submenuitem), submenu);
    60			}
    61	
    62			gtk_container_add(GTK_CONTAINER(menubar), submenuitem);
    63		}
    64	}
    65	
    66	static void remove_submenu(GtkButton *button, gpointer user_data)
    67	{
    68		if (submenuitem != NULL && gtk_widget_get_parent(submenuitem) != NULL)
    69			gtk_container_remove(GTK_CONTAINER(menubar), submenuitem);
    70	}
    71	
    72	int main(int argc, char **argv)
    73	{
    74		GtkWidget *window;
    75		GtkWidget *grid;
    76		GtkWidget *submenu;
    77		GtkWidget *item;
    78		GtkWidget *button;
    79	
    80		gtk_init(&argc, &argv);
    81	
    82		window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    83		g_signal_connect(window, "destroy", G_CALLBACK(destroy_window), NULL);
    84	
    85		grid = gtk_grid_new();
    86		gtk_container_add(GTK_CONTAINER(window), grid);
    87	
    88		menubar = gtk_menu_bar_new();
    89		gtk_grid_attach(GTK_GRID(grid), menubar, 0, 0, 1, 1);
    90		g_object_ref(menubar);
    91	
    92		item    = gtk_menu_item_new_with_label("File");
    93		submenu = gtk_menu_new();
    94		gtk_menu_item_set_submenu(GTK_MENU_ITEM(item), submenu);
    95		gtk_container_add(GTK_CONTAINER(menubar), item);
    96	
    97		item = gtk_menu_item_new_with_label("New");
    98		gtk_container_add(GTK_CONTAINER(submenu), item);
    99		item = gtk_menu_item_new_with_label("Open");
   100		gtk_container_add(GTK_CONTAINER(submenu), item);
   101		item = gtk_menu_item_new_with_label("Save");
   102		gtk_container_add(GTK_CONTAINER(submenu), item);
   103		item = gtk_separator_menu_item_new();
   104		gtk_container_add(GTK_CONTAINER(submenu), item);
   105		item = gtk_radio_menu_item_new_with_label(NULL, "Item 1");
   106		gtk_container_add(GTK_CONTAINER(submenu), item);
   107		item = gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item), "Item 2");
   108		gtk_container_add(GTK_CONTAINER(submenu), item);
   109		item = gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item), "Item 3");
   110		gtk_container_add(GTK_CONTAINER(submenu), item);
   111		item = gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(item), "Item 4");
   112		gtk_container_add(GTK_CONTAINER(submenu), item);
   113		item = gtk_separator_menu_item_new();
   114		gtk_container_add(GTK_CONTAINER(submenu), item);
   115		item = gtk_menu_item_new_with_label("Quit");
   116		gtk_container_add(GTK_CONTAINER(submenu), item);
   117	
   118		item    = gtk_menu_item_new_with_label("Edit");
   119		submenu = gtk_menu_new();
   120		gtk_menu_item_set_submenu(GTK_MENU_ITEM(item), submenu);
   121		gtk_container_add(GTK_CONTAINER(menubar), item);
   122	
   123		item = gtk_menu_item_new_with_label("Copy");
   124		gtk_container_add(GTK_CONTAINER(submenu), item);
   125		item = gtk_menu_item_new_with_label("Paste");
   126		gtk_container_add(GTK_CONTAINER(submenu), item);
   127	
   128		button = gtk_button_new_with_label("Realize menubar");
   129		g_signal_connect(button, "clicked", G_CALLBACK(realize_menubar), NULL);
   130		gtk_grid_attach(GTK_GRID(grid), button, 0, 1, 1, 1);
   131	
   132		button = gtk_button_new_with_label("Unrealize menubar");
   133		g_signal_connect(button, "clicked", G_CALLBACK(unrealize_menubar), NULL);
   134		gtk_grid_attach(GTK_GRID(grid), button, 0, 2, 1, 1);
   135	
   136		button = gtk_button_new_with_label("Add submenu");
   137		g_signal_connect(button, "clicked", G_CALLBACK(add_submenu), NULL);
   138		gtk_grid_attach(GTK_GRID(grid), button, 0, 3, 1, 1);
   139	
   140		button = gtk_button_new_with_label("Remove submenu");
   141		g_signal_connect(button, "clicked", G_CALLBACK(remove_submenu), NULL);
   142		gtk_grid_attach(GTK_GRID(grid), button, 0, 4, 1, 1);
   143	
   144		gtk_widget_show_all(window);
   145	
   146		gtk_main();
   147	
   148		g_object_unref(menubar);
   149	
   150		return 0;
   151	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/menusource.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright © 2011 Canonical Limited
     3	 *
     4	 * All rights reserved.
     5	 *
     6	 * Author: Ryan Lortie <desrt@desrt.ca>
     7	 */
     8	
     9	#include "menusource.h"
    10	
    11	#define WNCK_I_KNOW_THIS_IS_UNSTABLE
    12	#include <X11/Xatom.h>
    13	#include <gdk/gdkx.h>
    14	#include <libwnck/libwnck.h>
    15	
    16	typedef enum
    17	{
    18		MENU_BAR_MODE_GLOBAL,
    19		MENU_BAR_MODE_WHEN_MAXIMIZED
    20	} MenuBarMode;
    21	
    22	enum
    23	{
    24		XPROP_BUS_NAME,
    25		XPROP_OBJECT_PATH,
    26		N_XPROP
    27	};
    28	
    29	typedef GObjectClass MenuSourceClass;
    30	struct _MenuSource
    31	{
    32		GObject parent_instance;
    33	
    34		GDBusConnection *session;
    35	
    36		GdkScreen *gdk_screen;
    37		WnckScreen *screen;
    38		gulong active_window_changed_id;
    39		WnckWindow *active_window;
    40		gulong state_changed_id;
    41		GdkWindow *gdk_window;
    42		gboolean maximised;
    43		gchar *properties[N_XPROP];
    44	
    45		GActionGroup *actions;
    46		GMenuModel *menu;
    47	};
    48	
    49	G_DEFINE_TYPE(MenuSource, menu_source, G_TYPE_OBJECT)
    50	
    51	static GParamSpec *menu_source_menu_param;
    52	static GSettings *menubar_mode_settings;
    53	static MenuBarMode menubar_mode;
    54	static GSList *menu_sources;
    55	static Atom atoms[N_XPROP];
    56	
    57	static void menu_source_update(MenuSource *menu_source)
    58	{
    59		g_print("msu\n");
    60		if (menu_source->menu)
    61			g_object_unref(menu_source->menu);
    62	
    63		if (menu_source->properties[0] && menu_source->properties[1])
    64		{
    65			GDBusMenuModel *proxy;
    66	
    67			proxy             = g_dbus_menu_model_get(menu_source->session,
    68	                                              menu_source->properties[0],
    69	                                              menu_source->properties[1]);
    70			menu_source->menu = G_MENU_MODEL(proxy);
    71		}
    72		else
    73			menu_source->menu = NULL;
    74	
    75		g_object_notify_by_pspec(G_OBJECT(menu_source), menu_source_menu_param);
    76	}
    77	
    78	static void menubar_mode_changed(GSettings *settings, const gchar *key, gpointer user_data)
    79	{
    80		MenuBarMode new_mode;
    81	
    82		new_mode = g_settings_get_enum(settings, "menubar-mode");
    83	
    84		if (new_mode != menubar_mode)
    85		{
    86			GSList *node;
    87	
    88			menubar_mode = new_mode;
    89	
    90			for (node = menu_sources; node; node = node->next)
    91				menu_source_update(node->data);
    92		}
    93	}
    94	
    95	gboolean menu_source_is_maximised(WnckWindowState state)
    96	{
    97		WnckWindowState maximised_mask;
    98	
    99		maximised_mask =
   100		    WNCK_WINDOW_STATE_MAXIMIZED_HORIZONTALLY | WNCK_WINDOW_STATE_MAXIMIZED_VERTICALLY;
   101	
   102		return (state & maximised_mask) == maximised_mask;
   103	}
   104	
   105	static void menu_source_state_changed(WnckWindow *window, WnckWindowState changed_mask,
   106	                                      WnckWindowState new_state, gpointer user_data)
   107	{
   108		MenuSource *menu_source = user_data;
   109		gboolean maximised;
   110	
   111		maximised = menu_source_is_maximised(new_state);
   112	
   113		if (maximised != menu_source->maximised)
   114		{
   115			menu_source->maximised = maximised;
   116	
   117			if (menubar_mode == MENU_BAR_MODE_WHEN_MAXIMIZED)
   118				menu_source_update(menu_source);
   119		}
   120	}
   121	
   122	static gboolean menu_source_update_window_property(MenuSource *menu_source, gint atom_index,
   123	                                                   gboolean deleted)
   124	{
   125		gchar *value = NULL;
   126		gboolean changed;
   127	
   128		g_print("uwp %d\n", deleted);
   129	
   130		if (!deleted)
   131		{
   132			gchar *name = "UTF8_STRING";
   133			unsigned long bytes_after_return;
   134			unsigned long nitems_return;
   135			unsigned char *prop_return;
   136			gint actual_format_return;
   137			Atom actual_type_return;
   138			Atom utf8_atom;
   139	
   140			XInternAtoms(GDK_DISPLAY_XDISPLAY(gdk_display_get_default()),
   141			             &name,
   142			             1,
   143			             False,
   144			             &utf8_atom);
   145	
   146			if (XGetWindowProperty(GDK_SCREEN_XDISPLAY(menu_source->gdk_screen),
   147			                       gdk_x11_window_get_xid(menu_source->gdk_window),
   148			                       atoms[atom_index],
   149			                       0,
   150			                       1024,
   151			                       False,
   152			                       utf8_atom,
   153			                       &actual_type_return,
   154			                       &actual_format_return,
   155			                       &nitems_return,
   156			                       &bytes_after_return,
   157			                       &prop_return) == Success)
   158			{
   159				if (actual_format_return == 8 && bytes_after_return == 0)
   160				{
   161					g_print("I see %s\n", value);
   162					value = g_strndup((gchar *)prop_return, nitems_return);
   163				}
   164	
   165				XFree(prop_return);
   166			}
   167		}
   168	
   169		changed = g_strcmp0(menu_source->properties[atom_index], value) != 0;
   170		g_free(menu_source->properties[atom_index]);
   171		menu_source->properties[atom_index] = value;
   172	
   173		return changed;
   174	}
   175	
   176	static GdkFilterReturn window_filter_func(GdkXEvent *xevent, GdkEvent *event, gpointer user_data)
   177	{
   178		MenuSource *menu_source = user_data;
   179		XAnyEvent *any          = (XAnyEvent *)xevent;
   180	
   181		if (any->type == PropertyNotify)
   182		{
   183			XPropertyEvent *property = (XPropertyEvent *)xevent;
   184			gint i;
   185	
   186			for (i = 0; i < N_XPROP; i++)
   187			{
   188				if (property->atom != atoms[i])
   189					continue;
   190	
   191				if (menu_source_update_window_property(menu_source,
   192				                                       i,
   193				                                       property->state == PropertyDelete))
   194					menu_source_update(menu_source);
   195	
   196				break;
   197			}
   198		}
   199	
   200		return GDK_FILTER_CONTINUE;
   201	}
   202	
   203	static void menu_source_active_window_changed(WnckScreen *screen,
   204	                                              WnckWindow *previously_active_window,
   205	                                              gpointer user_data)
   206	{
   207		MenuSource *menu_source = user_data;
   208		WnckWindow *active_window;
   209	
   210		active_window = wnck_screen_get_active_window(screen);
   211	
   212		if (active_window != menu_source->active_window)
   213		{
   214			gboolean changed = FALSE;
   215			gint i;
   216	
   217			if (menu_source->active_window != NULL)
   218			{
   219				gdk_window_remove_filter(menu_source->gdk_window,
   220				                         window_filter_func,
   221				                         menu_source);
   222				g_object_unref(menu_source->gdk_window);
   223				menu_source->gdk_window = NULL;
   224	
   225				g_signal_handler_disconnect(menu_source->active_window,
   226				                            menu_source->state_changed_id);
   227				g_object_unref(menu_source->active_window);
   228				menu_source->active_window = NULL;
   229			}
   230	
   231			if (active_window != NULL)
   232			{
   233				Window xid;
   234	
   235				menu_source->active_window = g_object_ref(active_window);
   236				menu_source->state_changed_id =
   237				    g_signal_connect(active_window,
   238				                     "state-changed",
   239				                     G_CALLBACK(menu_source_state_changed),
   240				                     menu_source);
   241				menu_source->maximised =
   242				    menu_source_is_maximised(wnck_window_get_state(active_window));
   243	
   244				xid = wnck_window_get_xid(active_window);
   245				menu_source->gdk_window =
   246				    gdk_x11_window_foreign_new_for_display(gdk_display_get_default(), xid);
   247				gdk_window_add_filter(menu_source->gdk_window,
   248				                      window_filter_func,
   249				                      menu_source);
   250			}
   251	
   252			for (i = 0; i < N_XPROP; i++)
   253				changed |= menu_source_update_window_property(menu_source,
   254				                                              i,
   255				                                              active_window == NULL);
   256	
   257			if (changed)
   258				menu_source_update(menu_source);
   259		}
   260	}
   261	
   262	static void menu_source_get_property(GObject *object, guint prop_id, GValue *value,
   263	                                     GParamSpec *pspec)
   264	{
   265		MenuSource *menu_source = MENU_SOURCE(object);
   266	
   267		g_assert(prop_id == 1);
   268	
   269		g_value_set_object(value, menu_source->menu);
   270	}
   271	
   272	static void menu_source_finalize(GObject *object)
   273	{
   274		MenuSource *menu_source = MENU_SOURCE(object);
   275	
   276		menu_sources = g_slist_remove(menu_sources, menu_source);
   277	
   278		/* If this is the last one, stop watching GSettings */
   279		if (menu_sources == NULL)
   280		{
   281			/* no need to remove the signal handler -- this is the only ref */
   282			g_object_unref(menubar_mode_settings);
   283			menubar_mode_settings = NULL;
   284		}
   285	
   286		if (menu_source->screen != NULL)
   287		{
   288			g_signal_handler_disconnect(menu_source->screen,
   289			                            menu_source->active_window_changed_id);
   290			g_object_unref(menu_source->screen);
   291		}
   292	
   293		if (menu_source->active_window != NULL)
   294		{
   295			g_signal_handler_disconnect(menu_source->active_window,
   296			                            menu_source->state_changed_id);
   297			g_object_unref(menu_source->active_window);
   298		}
   299	
   300		g_object_unref(menu_source->gdk_screen);
   301		g_object_unref(menu_source->screen);
   302	
   303		G_OBJECT_CLASS(menu_source_parent_class)->finalize(object);
   304	}
   305	
   306	static void menu_source_init(MenuSource *menu_source)
   307	{
   308	}
   309	
   310	static void menu_source_class_init(MenuSourceClass *class)
   311	{
   312		class->get_property = menu_source_get_property;
   313		class->finalize     = menu_source_finalize;
   314	
   315		menu_source_menu_param = g_param_spec_object("menu",
   316		                                             "active menu",
   317		                                             "the GMenuModel for the active window",
   318		                                             G_TYPE_MENU_MODEL,
   319		                                             G_PARAM_READABLE | G_PARAM_STATIC_STRINGS);
   320		g_object_class_install_property(class, 1, menu_source_menu_param);
   321	}
   322	
   323	static MenuSource *menu_source_new(GdkScreen *screen)
   324	{
   325		MenuSource *menu_source;
   326	
   327		menu_source             = g_object_new(MENU_SOURCE_TYPE, NULL);
   328		menu_source->session    = g_bus_get_sync(G_BUS_TYPE_SESSION, NULL, NULL);
   329		menu_source->gdk_screen = g_object_ref(screen);
   330		menu_source->screen     = g_object_ref(wnck_screen_get(gdk_screen_get_number(screen)));
   331		g_signal_connect(menu_source->screen,
   332		                 "active-window-changed",
   333		                 G_CALLBACK(menu_source_active_window_changed),
   334		                 menu_source);
   335		menu_source_active_window_changed(menu_source->screen, NULL, menu_source);
   336	
   337		return menu_source;
   338	}
   339	
   340	GMenuModel *menu_source_get_menu(MenuSource *menu_source)
   341	{
   342		g_return_val_if_fail(IS_MENU_SOURCE(menu_source), NULL);
   343	
   344		return menu_source->menu;
   345	}
   346	
   347	MenuSource *menu_source_get_for_screen(GdkScreen *screen)
   348	{
   349		MenuSource *menu_source;
   350		GSList *node;
   351	
   352		for (node = menu_sources; node; node = node->next)
   353		{
   354			menu_source = node->data;
   355	
   356			if (menu_source->gdk_screen == screen)
   357				return g_object_ref(menu_source);
   358		}
   359	
   360		g_return_val_if_fail(GDK_IS_SCREEN(screen), NULL);
   361		g_return_val_if_fail(gdk_screen_get_display(screen) == gdk_display_get_default(), NULL);
   362	
   363		menu_source = menu_source_new(screen);
   364	
   365		/* if this is the first one, create the GSettings */
   366		if (menu_sources == NULL)
   367		{
   368			// menubar_mode_settings = g_settings_new ("com.canonical.Unity.GtkModule");
   369			// g_signal_connect (menubar_mode_settings, "changed::menubar-mode", G_CALLBACK
   370			// (menubar_mode_changed), NULL);
   371			// menubar_mode = g_settings_get_enum (menubar_mode_settings, "menubar-mode");
   372		}
   373		menubar_mode = MENU_BAR_MODE_GLOBAL;
   374	
   375		menu_sources = g_slist_prepend(menu_sources, menu_source);
   376	
   377		if (atoms[0] == 0)
   378		{
   379			const gchar *const names[] = { "_GTK_UNIQUE_BUS_NAME", "_GTK_MENUBAR_OBJECT_PATH" };
   380			G_STATIC_ASSERT(G_N_ELEMENTS(names) == G_N_ELEMENTS(atoms));
   381			XInternAtoms(GDK_DISPLAY_XDISPLAY(gdk_display_get_default()),
   382			             (char **)names,
   383			             2,
   384			             False,
   385			             atoms);
   386		}
   387	
   388		return menu_source;
   389	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/menusource.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright © 2011 Canonical Limited
     3	 *
     4	 * All rights reserved.
     5	 *
     6	 * Author: Ryan Lortie <desrt@desrt.ca>
     7	 */
     8	
     9	#ifndef __MENU_SOURCE_H__
    10	#define __MENU_SOURCE_H__
    11	
    12	#include <gdk/gdk.h>
    13	
    14	#define MENU_SOURCE_TYPE (menu_source_get_type())
    15	#define MENU_SOURCE(inst) (G_TYPE_CHECK_INSTANCE_CAST((inst), MENU_SOURCE_TYPE, MenuSource))
    16	#define IS_MENU_SOURCE(inst) (G_TYPE_CHECK_INSTANCE_TYPE((inst), MENU_SOURCE_TYPE))
    17	
    18	typedef struct _MenuSource MenuSource;
    19	
    20	GType menu_source_get_type(void) G_GNUC_CONST;
    21	MenuSource *menu_source_get_for_screen(GdkScreen *screen);
    22	GMenuModel *menu_source_get_menu(MenuSource *menu_source);
    23	
    24	#endif /* __MENU_SOURCE_H__ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/test-radio.c
--------------------------------------------------------------------------------
     1	#include <gtk/gtk.h>
     2	
     3	static void handle_window_destroy(GtkWindow *window, gpointer user_data)
     4	{
     5		gtk_main_quit();
     6	}
     7	
     8	static void handle_menu_item_activate(GtkMenuItem *menu_item, gpointer user_data)
     9	{
    10		g_message("%s: %s", __func__, (const gchar *)user_data);
    11	}
    12	
    13	static void handle_check_menu_item_toggled(GtkCheckMenuItem *check_menu_item, gpointer user_data)
    14	{
    15		g_message("%s: %s", __func__, (const gchar *)user_data);
    16	}
    17	
    18	int main(int argc, char *argv[])
    19	{
    20		GtkWidget *window;
    21		GtkWidget *grid;
    22		GtkWidget *menu_bar;
    23		GtkWidget *menu;
    24		GtkWidget *menu_item;
    25		GtkWidget *button;
    26	
    27		gtk_init(&argc, &argv);
    28	
    29		window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    30		g_signal_connect(window, "destroy", G_CALLBACK(handle_window_destroy), NULL);
    31	
    32		grid = gtk_grid_new();
    33		gtk_container_add(GTK_CONTAINER(window), grid);
    34	
    35		menu_bar = gtk_menu_bar_new();
    36		gtk_grid_attach(GTK_GRID(grid), menu_bar, 0, 0, 1, 1);
    37	
    38		menu_item = gtk_menu_item_new_with_label("File");
    39		gtk_container_add(GTK_CONTAINER(menu_bar), menu_item);
    40	
    41		menu = gtk_menu_new();
    42		gtk_menu_item_set_submenu(GTK_MENU_ITEM(menu_item), menu);
    43	
    44		menu_item = gtk_radio_menu_item_new_with_label(NULL, "Radio A");
    45		g_signal_connect(menu_item, "activate", G_CALLBACK(handle_menu_item_activate), "Radio A");
    46		g_signal_connect(menu_item,
    47		                 "toggled",
    48		                 G_CALLBACK(handle_check_menu_item_toggled),
    49		                 "Radio A");
    50		gtk_container_add(GTK_CONTAINER(menu), menu_item);
    51		menu_item = gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(menu_item),
    52		                                                           "Radio B");
    53		g_signal_connect(menu_item, "activate", G_CALLBACK(handle_menu_item_activate), "Radio B");
    54		g_signal_connect(menu_item,
    55		                 "toggled",
    56		                 G_CALLBACK(handle_check_menu_item_toggled),
    57		                 "Radio B");
    58		gtk_container_add(GTK_CONTAINER(menu), menu_item);
    59		menu_item = gtk_radio_menu_item_new_with_label_from_widget(GTK_RADIO_MENU_ITEM(menu_item),
    60		                                                           "Radio C");
    61		g_signal_connect(menu_item, "activate", G_CALLBACK(handle_menu_item_activate), "Radio C");
    62		g_signal_connect(menu_item,
    63		                 "toggled",
    64		                 G_CALLBACK(handle_check_menu_item_toggled),
    65		                 "Radio C");
    66		gtk_container_add(GTK_CONTAINER(menu), menu_item);
    67	
    68		gtk_widget_show_all(window);
    69	
    70		gtk_main();
    71	
    72		return 0;
    73	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/demos/unity-gtk-menu-tester.c
--------------------------------------------------------------------------------
     1	#include <gtk/gtk.h>
     2	
     3	enum
     4	{
     5		ITEM_COLUMN,
     6		SHELL_COLUMN,
     7		LABEL_COLUMN,
     8		TYPE_COLUMN,
     9		ACCEL_COLUMN,
    10		N_COLUMNS
    11	};
    12	
    13	static GtkWidget *menu_bar;
    14	static GtkWidget *tree_view;
    15	static GtkTreeStore *tree_store;
    16	static GtkWidget *entry;
    17	static GSList *radio_group;
    18	
    19	static void destroy_window(GtkWindow *window, gpointer user_data)
    20	{
    21		gtk_main_quit();
    22	}
    23	
    24	static void update_model(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkMenuShell *menu_shell)
    25	{
    26		GtkTreeIter parent_iter;
    27		GtkTreeIter child_iter;
    28		GList *menu_items;
    29	
    30		if (iter == NULL)
    31		{
    32			if (!gtk_tree_model_get_iter_first(GTK_TREE_MODEL(tree_store), &parent_iter))
    33			{
    34				gtk_tree_store_append(tree_store, &parent_iter, NULL);
    35				gtk_tree_store_set(tree_store,
    36				                   &parent_iter,
    37				                   SHELL_COLUMN,
    38				                   menu_shell,
    39				                   LABEL_COLUMN,
    40				                   "Menu bar",
    41				                   -1);
    42			}
    43		}
    44		else
    45			parent_iter = *iter;
    46	
    47		menu_items = g_list_first(gtk_container_get_children(GTK_CONTAINER(menu_shell)));
    48	
    49		while (menu_items != NULL)
    50		{
    51			GtkMenuItem *menu_item;
    52			GtkWidget *submenu;
    53	
    54			menu_item = menu_items->data;
    55			submenu   = gtk_menu_item_get_submenu(menu_item);
    56	
    57			gtk_tree_store_append(tree_store, &child_iter, &parent_iter);
    58			gtk_tree_store_set(tree_store,
    59			                   &child_iter,
    60			                   ITEM_COLUMN,
    61			                   menu_item,
    62			                   SHELL_COLUMN,
    63			                   submenu,
    64			                   LABEL_COLUMN,
    65			                   gtk_menu_item_get_label(menu_item),
    66			                   -1);
    67	
    68			if (submenu != NULL)
    69				update_model(tree_store, &child_iter, GTK_MENU_SHELL(submenu));
    70	
    71			menu_items = g_list_next(menu_items);
    72		}
    73	}
    74	
    75	static void add_menu_bar(GtkToolButton *button, gpointer user_data)
    76	{
    77		if (gtk_widget_get_parent(menu_bar) == NULL)
    78		{
    79			GtkWidget *window;
    80	
    81			window = gtk_widget_get_toplevel(GTK_WIDGET(button));
    82	
    83			if (gtk_widget_is_toplevel(window))
    84			{
    85				GtkWidget *grid;
    86				GtkTreeIter iter;
    87	
    88				grid = gtk_bin_get_child(GTK_BIN(window));
    89				gtk_grid_attach(GTK_GRID(grid), menu_bar, 0, 0, 1, 1);
    90				gtk_widget_show_all(menu_bar);
    91	
    92				gtk_tree_store_clear(tree_store);
    93				update_model(tree_store, NULL, GTK_MENU_SHELL(menu_bar));
    94				gtk_tree_view_expand_all(GTK_TREE_VIEW(tree_view));
    95			}
    96		}
    97	}
    98	
    99	static void remove_menu_bar(GtkToolButton *button, gpointer user_data)
   100	{
   101		GtkWidget *parent = gtk_widget_get_parent(menu_bar);
   102	
   103		if (parent != NULL)
   104			gtk_container_remove(GTK_CONTAINER(parent), menu_bar);
   105	
   106		gtk_tree_store_clear(tree_store);
   107	}
   108	
   109	static GtkMenuItem *get_menu_item(GtkMenuShell *menu_shell, GtkTreeModel *tree_model,
   110	                                  GtkTreeIter *child_iter);
   111	
   112	static GtkMenuShell *get_menu_shell(GtkMenuShell *menu_shell, GtkTreeModel *tree_model,
   113	                                    GtkTreeIter *child_iter)
   114	{
   115		if (child_iter != NULL)
   116		{
   117			GtkTreeIter parent_iter;
   118	
   119			if (gtk_tree_model_iter_parent(tree_model, &parent_iter, child_iter))
   120				return GTK_MENU_SHELL(gtk_menu_item_get_submenu(
   121				    get_menu_item(menu_shell, tree_model, child_iter)));
   122			else
   123				return menu_shell;
   124		}
   125	
   126		return NULL;
   127	}
   128	
   129	static GtkMenuItem *get_menu_item(GtkMenuShell *menu_shell, GtkTreeModel *tree_model,
   130	                                  GtkTreeIter *child_iter)
   131	{
   132		GtkTreeIter parent_iter;
   133	
   134		if (child_iter != NULL && gtk_tree_model_iter_parent(tree_model, &parent_iter, child_iter))
   135		{
   136			GtkTreeIter item_iter;
   137			GList *children;
   138	
   139			menu_shell = get_menu_shell(menu_shell, tree_model, &parent_iter);
   140			item_iter  = *child_iter;
   141	
   142			children = gtk_container_get_children(GTK_CONTAINER(menu_shell));
   143			while (gtk_tree_model_iter_previous(tree_model, &item_iter))
   144				children = g_list_next(children);
   145	
   146			return children->data;
   147		}
   148	
   149		return NULL;
   150	}
   151	
   152	static GtkWidget *create_menu_item(void)
   153	{
   154		GSList *toggle_buttons;
   155		GtkToggleButton *toggle_button;
   156		guint toggle_index;
   157		const gchar *mnemonic;
   158		GtkWidget *menu_item;
   159	
   160		toggle_buttons = radio_group;
   161	
   162		for (toggle_index = 0; toggle_buttons != NULL; toggle_index++)
   163		{
   164			toggle_button = toggle_buttons->data;
   165	
   166			if (gtk_toggle_button_get_active(toggle_button))
   167				break;
   168	
   169			toggle_buttons = g_slist_next(toggle_buttons);
   170		}
   171	
   172		if (toggle_buttons == NULL)
   173			return NULL;
   174	
   175		mnemonic = gtk_entry_get_text(GTK_ENTRY(entry));
   176	
   177		switch (toggle_index)
   178		{
   179		case 3:
   180			menu_item = gtk_check_menu_item_new_with_mnemonic(mnemonic);
   181			break;
   182	
   183		case 2:
   184			/* XXX */
   185			menu_item = gtk_radio_menu_item_new_with_mnemonic(NULL, mnemonic);
   186			break;
   187	
   188		case 1:
   189			menu_item = gtk_image_menu_item_new_from_stock(GTK_STOCK_ABOUT, NULL);
   190			gtk_image_menu_item_set_always_show_image(GTK_IMAGE_MENU_ITEM(menu_item), TRUE);
   191			break;
   192	
   193		case 0:
   194			menu_item = gtk_separator_menu_item_new();
   195			break;
   196	
   197		default:
   198			menu_item = gtk_menu_item_new_with_mnemonic(mnemonic);
   199			break;
   200		}
   201	
   202		return menu_item;
   203	}
   204	
   205	static void add_menu_item(GtkToolButton *button, gpointer user_data)
   206	{
   207		GtkTreeSelection *selection;
   208		GtkTreeIter tree_iter;
   209	
   210		selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(tree_view));
   211	
   212		if (selection != NULL && gtk_tree_selection_get_selected(selection, NULL, &tree_iter))
   213		{
   214			GtkWidget *submenu;
   215	
   216			submenu = GTK_WIDGET(get_menu_shell(GTK_MENU_SHELL(menu_bar),
   217			                                    GTK_TREE_MODEL(tree_store),
   218			                                    &tree_iter));
   219	
   220			if (submenu == NULL)
   221			{
   222				GtkMenuItem *menu_item;
   223	
   224				menu_item = get_menu_item(GTK_MENU_SHELL(menu_bar),
   225				                          GTK_TREE_MODEL(tree_store),
   226				                          &tree_iter);
   227	
   228				if (menu_item != NULL)
   229				{
   230					submenu = gtk_menu_new();
   231					gtk_menu_item_set_submenu(menu_item, submenu);
   232				}
   233			}
   234	
   235			if (submenu != NULL)
   236			{
   237				GtkWidget *menu_item;
   238	
   239				menu_item = create_menu_item();
   240				gtk_container_add(GTK_CONTAINER(submenu), menu_item);
   241				gtk_widget_show(menu_item);
   242	
   243				gtk_tree_store_clear(tree_store);
   244				update_model(tree_store, NULL, GTK_MENU_SHELL(menu_bar));
   245				gtk_tree_view_expand_all(GTK_TREE_VIEW(tree_view));
   246			}
   247		}
   248	}
   249	
   250	static void insert_menu_item(GtkToolButton *button, gpointer user_data)
   251	{
   252		GtkTreeSelection *selection;
   253		GtkTreeModel *tree_model;
   254		GtkTreeIter parent_iter;
   255		GtkTreeIter child_iter;
   256	
   257		selection  = gtk_tree_view_get_selection(GTK_TREE_VIEW(tree_view));
   258		tree_model = GTK_TREE_MODEL(tree_store);
   259	
   260		if (selection != NULL && gtk_tree_selection_get_selected(selection, NULL, &child_iter) &&
   261		    gtk_tree_model_iter_parent(tree_model, &parent_iter, &child_iter))
   262		{
   263			GtkMenuShell *shell;
   264			GtkWidget *menu_item;
   265			guint shell_index;
   266	
   267			shell = get_menu_shell(GTK_MENU_SHELL(menu_bar), tree_model, &parent_iter);
   268	
   269			for (shell_index = 0; gtk_tree_model_iter_previous(tree_model, &child_iter);
   270			     shell_index++)
   271				;
   272	
   273			menu_item = create_menu_item();
   274			gtk_menu_shell_insert(shell, menu_item, shell_index);
   275			gtk_widget_show(menu_item);
   276	
   277			gtk_tree_store_clear(tree_store);
   278			update_model(tree_store, NULL, GTK_MENU_SHELL(menu_bar));
   279			gtk_tree_view_expand_all(GTK_TREE_VIEW(tree_view));
   280		}
   281	}
   282	
   283	static void remove_menu_item(GtkToolButton *button, gpointer user_data)
   284	{
   285		GtkTreeSelection *selection;
   286		GtkTreeIter tree_iter;
   287	
   288		selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(tree_view));
   289	
   290		if (selection != NULL && gtk_tree_selection_get_selected(selection, NULL, &tree_iter))
   291		{
   292			GtkWidget *menu_item;
   293	
   294			menu_item = GTK_WIDGET(get_menu_item(GTK_MENU_SHELL(menu_bar),
   295			                                     GTK_TREE_MODEL(tree_store),
   296			                                     &tree_iter));
   297	
   298			if (menu_item != NULL)
   299			{
   300				GtkWidget *parent;
   301	
   302				parent = gtk_widget_get_parent(menu_item);
   303	
   304				if (parent != NULL)
   305				{
   306					gtk_container_remove(GTK_CONTAINER(parent), menu_item);
   307	
   308					gtk_tree_store_clear(tree_store);
   309					update_model(tree_store, NULL, GTK_MENU_SHELL(menu_bar));
   310					gtk_tree_view_expand_all(GTK_TREE_VIEW(tree_view));
   311				}
   312			}
   313		}
   314	}
   315	
   316	int main(int argc, char *argv[])
   317	{
   318		GtkWidget *window;
   319		GtkWidget *outer_grid;
   320		GtkWidget *menu;
   321		GtkWidget *menu_item;
   322		GtkWidget *paned;
   323		GtkWidget *inner_grid;
   324		GtkCellRenderer *cell_renderer;
   325		GtkTreeViewColumn *tree_view_column;
   326		GtkWidget *toolbar;
   327		GtkToolItem *tool_item;
   328		GtkWidget *label;
   329		GtkWidget *radio_button;
   330	
   331		gtk_init(&argc, &argv);
   332	
   333		window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
   334		gtk_window_set_default_size(GTK_WINDOW(window), 600, 400);
   335		g_signal_connect(window, "destroy", G_CALLBACK(destroy_window), NULL);
   336	
   337		outer_grid = gtk_grid_new();
   338	
   339		menu_bar = g_object_ref(gtk_menu_bar_new());
   340	
   341		menu_item = gtk_menu_item_new_with_label("File");
   342		menu      = gtk_menu_new();
   343		gtk_menu_item_set_submenu(GTK_MENU_ITEM(menu_item), menu);
   344		gtk_container_add(GTK_CONTAINER(menu_bar), menu_item);
   345	
   346		menu_item = gtk_menu_item_new_with_label("New");
   347		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   348		menu_item = gtk_menu_item_new_with_label("Open");
   349		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   350		menu_item = gtk_menu_item_new_with_label("Save");
   351		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   352		menu_item = gtk_separator_menu_item_new();
   353		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   354		menu_item = gtk_menu_item_new_with_label("Recent File 1");
   355		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   356		menu_item = gtk_menu_item_new_with_label("Recent File 2");
   357		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   358		menu_item = gtk_menu_item_new_with_label("Recent File 3");
   359		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   360		menu_item = gtk_menu_item_new_with_label("Recent File 4");
   361		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   362		menu_item = gtk_separator_menu_item_new();
   363		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   364		menu_item = gtk_menu_item_new_with_label("Quit");
   365		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   366	
   367		menu_item = gtk_menu_item_new_with_label("Edit");
   368		menu      = gtk_menu_new();
   369		gtk_menu_item_set_submenu(GTK_MENU_ITEM(menu_item), menu);
   370		gtk_container_add(GTK_CONTAINER(menu_bar), menu_item);
   371	
   372		menu_item = gtk_menu_item_new_with_label("Select All");
   373		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   374		menu_item = gtk_separator_menu_item_new();
   375		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   376		menu_item = gtk_menu_item_new_with_label("Cut");
   377		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   378		menu_item = gtk_menu_item_new_with_label("Copy");
   379		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   380		menu_item = gtk_menu_item_new_with_label("Paste");
   381		gtk_container_add(GTK_CONTAINER(menu), menu_item);
   382	
   383		paned = gtk_paned_new(GTK_ORIENTATION_HORIZONTAL);
   384	
   385		inner_grid = gtk_grid_new();
   386	
   387		tree_store = gtk_tree_store_new(N_COLUMNS,
   388		                                GTK_TYPE_MENU_ITEM,
   389		                                GTK_TYPE_MENU_SHELL,
   390		                                G_TYPE_STRING,
   391		                                G_TYPE_STRING,
   392		                                G_TYPE_STRING);
   393	
   394		tree_view = g_object_ref(gtk_tree_view_new_with_model(GTK_TREE_MODEL(tree_store)));
   395	
   396		cell_renderer    = gtk_cell_renderer_text_new();
   397		tree_view_column = gtk_tree_view_column_new_with_attributes("Label",
   398		                                                            cell_renderer,
   399		                                                            "text",
   400		                                                            LABEL_COLUMN,
   401		                                                            NULL);
   402		gtk_tree_view_column_set_min_width(tree_view_column, 160);
   403		gtk_tree_view_append_column(GTK_TREE_VIEW(tree_view), tree_view_column);
   404	
   405		cell_renderer    = gtk_cell_renderer_text_new();
   406		tree_view_column = gtk_tree_view_column_new_with_attributes("Type",
   407		                                                            cell_renderer,
   408		                                                            "text",
   409		                                                            TYPE_COLUMN,
   410		                                                            NULL);
   411		gtk_tree_view_column_set_min_width(tree_view_column, 80);
   412		gtk_tree_view_append_column(GTK_TREE_VIEW(tree_view), tree_view_column);
   413	
   414		cell_renderer    = gtk_cell_renderer_text_new();
   415		tree_view_column = gtk_tree_view_column_new_with_attributes("Accel",
   416		                                                            cell_renderer,
   417		                                                            "text",
   418		                                                            ACCEL_COLUMN,
   419		                                                            NULL);
   420		gtk_tree_view_column_set_min_width(tree_view_column, 80);
   421		gtk_tree_view_append_column(GTK_TREE_VIEW(tree_view), tree_view_column);
   422	
   423		gtk_widget_set_vexpand(tree_view, TRUE);
   424	
   425		gtk_grid_attach(GTK_GRID(inner_grid), tree_view, 0, 0, 1, 1);
   426	
   427		toolbar = gtk_toolbar_new();
   428		gtk_widget_set_hexpand(toolbar, TRUE);
   429		gtk_toolbar_set_style(GTK_TOOLBAR(toolbar), GTK_TOOLBAR_ICONS);
   430	
   431		tool_item = gtk_tool_button_new_from_stock(GTK_STOCK_YES);
   432		g_signal_connect(tool_item, "clicked", G_CALLBACK(add_menu_bar), NULL);
   433		gtk_toolbar_insert(GTK_TOOLBAR(toolbar), tool_item, 0);
   434	
   435		tool_item = gtk_tool_button_new_from_stock(GTK_STOCK_NO);
   436		g_signal_connect(tool_item, "clicked", G_CALLBACK(remove_menu_bar), NULL);
   437		gtk_toolbar_insert(GTK_TOOLBAR(toolbar), tool_item, 1);
   438	
   439		tool_item = gtk_tool_button_new_from_stock(GTK_STOCK_NEW);
   440		g_signal_connect(tool_item, "clicked", G_CALLBACK(add_menu_item), NULL);
   441		gtk_toolbar_insert(GTK_TOOLBAR(toolbar), tool_item, 2);
   442	
   443		tool_item = gtk_tool_button_new_from_stock(GTK_STOCK_ADD);
   444		g_signal_connect(tool_item, "clicked", G_CALLBACK(insert_menu_item), NULL);
   445		gtk_toolbar_insert(GTK_TOOLBAR(toolbar), tool_item, 3);
   446	
   447		tool_item = gtk_tool_button_new_from_stock(GTK_STOCK_REMOVE);
   448		g_signal_connect(tool_item, "clicked", G_CALLBACK(remove_menu_item), NULL);
   449		gtk_toolbar_insert(GTK_TOOLBAR(toolbar), tool_item, 4);
   450	
   451		gtk_grid_attach(GTK_GRID(inner_grid), toolbar, 0, 1, 1, 1);
   452	
   453		gtk_paned_add1(GTK_PANED(paned), inner_grid);
   454	
   455		inner_grid = gtk_grid_new();
   456	
   457		label = gtk_label_new_with_mnemonic("_Label:");
   458		entry = g_object_ref(gtk_entry_new());
   459		gtk_label_set_mnemonic_widget(GTK_LABEL(label), entry);
   460		gtk_grid_attach(GTK_GRID(inner_grid), label, 0, 0, 1, 1);
   461		gtk_grid_attach(GTK_GRID(inner_grid), entry, 1, 0, 1, 1);
   462	
   463		label = gtk_label_new("Type:");
   464		gtk_grid_attach(GTK_GRID(inner_grid), label, 0, 1, 1, 1);
   465	
   466		radio_button = gtk_radio_button_new_with_mnemonic(NULL, "_Normal");
   467		gtk_grid_attach(GTK_GRID(inner_grid), radio_button, 1, 1, 1, 1);
   468	
   469		radio_button =
   470		    gtk_radio_button_new_with_mnemonic_from_widget(GTK_RADIO_BUTTON(radio_button),
   471		                                                   "_Check");
   472		gtk_grid_attach(GTK_GRID(inner_grid), radio_button, 1, 2, 1, 1);
   473	
   474		radio_button =
   475		    gtk_radio_button_new_with_mnemonic_from_widget(GTK_RADIO_BUTTON(radio_button),
   476		                                                   "_Radio");
   477		gtk_grid_attach(GTK_GRID(inner_grid), radio_button, 1, 3, 1, 1);
   478	
   479		radio_button =
   480		    gtk_radio_button_new_with_mnemonic_from_widget(GTK_RADIO_BUTTON(radio_button),
   481		                                                   "_Image");
   482		gtk_grid_attach(GTK_GRID(inner_grid), radio_button, 1, 4, 1, 1);
   483	
   484		radio_button =
   485		    gtk_radio_button_new_with_mnemonic_from_widget(GTK_RADIO_BUTTON(radio_button),
   486		                                                   "_Separator");
   487		radio_group = gtk_radio_button_get_group(GTK_RADIO_BUTTON(radio_button));
   488		gtk_grid_attach(GTK_GRID(inner_grid), radio_button, 1, 5, 1, 1);
   489	
   490		gtk_paned_add2(GTK_PANED(paned), inner_grid);
   491	
   492		gtk_grid_attach(GTK_GRID(outer_grid), paned, 0, 1, 1, 1);
   493	
   494		gtk_container_add(GTK_CONTAINER(window), outer_grid);
   495	
   496		gtk_widget_show_all(window);
   497	
   498		gtk_main();
   499	
   500		g_object_unref(entry);
   501		g_object_unref(tree_view);
   502		g_object_unref(menu_bar);
   503	
   504		return 0;
   505	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/tests/meson.build
--------------------------------------------------------------------------------
     1	if build_gtk3 and get_option('tests')
     2	    client_sources = files (
     3		    join_paths('demos','altgrabber.h'),
     4		    join_paths('demos','altgrabber.c'),
     5		    join_paths('demos','altmonitor.h'),
     6		    join_paths('demos','altmonitor.c'),
     7		    join_paths('demos','menusource.h'),
     8		    join_paths('demos','menusource.c'),
     9		    join_paths('demos','client.c'))
    10	
    11	    wnck_ver = '>=3.4.8'
    12	    wnck = dependency('libwnck-3.0',version: wnck_ver, required: false)
    13	    x11 = dependency('x11', required: false)
    14	    if(wnck.found() and x11.found())
    15	        client = executable('menumodel-client',client_sources,
    16	            dependencies: [gtk3_parser_dep, wnck, x11]
    17	        )
    18	#        test('client', client)
    19	    endif
    20	    tester = executable('tester',join_paths('demos','unity-gtk-menu-tester.c'), dependencies: gtk3)
    21	#    test('tester',tester)
    22	    radio = executable('radio',join_paths('demos','test-radio.c'), dependencies: gtk3)
    23	#    test('radio',radio)
    24	    hello = executable('hello',join_paths('demos','hello.c'), dependencies: gtk3)
    25	#    test('hello',hello)
    26	    vala_found = add_languages('vala', required: false)
    27	    if vala_found
    28	        black = executable('black',join_paths('demos','black.vala'), dependencies: gtk3)
    29	#        test('black',black)
    30	    endif
    31	endif
    32	
    33	#TODO: fix autopilot
    34	run_target('autopilot',
    35	        command: ['autopilot/test.sh'],
    36	    )
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/appmenu-gtk-module/TODO
--------------------------------------------------------------------------------
     1	Activating active radio menu item de-activates it.
     2	Wayland support without GTK compositor.
     3	DBusMenu backend.
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/AUTHORS
--------------------------------------------------------------------------------
     1	Jared Gonzalez
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/Agent.java.in
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana;
    27	
    28	import java.io.FileInputStream;
    29	import java.lang.instrument.Instrumentation;
    30	import java.util.logging.Level;
    31	import java.util.logging.Logger;
    32	
    33	/**
    34	 * This java agent allows to evaluate if the architecture of the native libraries
    35	 * of integration are of the same architecture of the virtual machine. In case
    36	 * of which they coincide initiate the native processes of integration otherwise
    37	 * only ignored
    38	 * 
    39	 * @author Jared Gonzalez
    40	 */
    41	public class Agent {
    42		/**
    43	         * Evaluates if the architecture of Jayatana native libraries coincides with
    44	         * the architecture of Java's virutal machine.
    45	         *
    46	         * @param agentArgs agent arguments
    47	         * @param inst Control of the Java intrumentation
    48		 */
    49		public static void premain(String agentArgs, Instrumentation inst) {
    50			try {
    51	                        // exclude versions 1.5 and 1.4 as they are not supported
    52				if (System.getProperty("java.version").startsWith("1.5") ||
    53						System.getProperty("java.version").startsWith("1.4"))
    54					return;
    55				
    56	                        // get the file from the native library of integration
    57				String libjayatanaag;
    58				try {
    59					if ((libjayatanaag = System.getenv("JAYATANA_LIBAGPATH")) == null) {
    60						libjayatanaag = "@CMAKE_INSTALL_FULL_LIBDIR@/jayatana/libjayatanaag.so";
    61					} else {
    62						System.err.println("JAYATANA_LIBAGPATH="+libjayatanaag);
    63					}
    64				} catch (Exception e) {
    65					libjayatanaag = "@CMAKE_INSTALL_FULL_LIBDIR@/jayatana/libjayatanaag.so";
    66				}
    67				
    68				try {
    69	                 // get architecture from the library
    70					String libjayatanaagarch = "--";
    71					FileInputStream fis = new FileInputStream(libjayatanaag);
    72					try {
    73						for (int i=0;i<4;i++)
    74							fis.read();
    75						if (fis.read() == 2)
    76							libjayatanaagarch = "64";
    77						else
    78							libjayatanaagarch = "32";
    79					} finally {
    80						fis.close();
    81					}
    82					
    83	                                // verify if the architecture matches the virtual machine
    84					if (libjayatanaagarch.equals(System.getProperty("sun.arch.data.model")))
    85						System.load(libjayatanaag);
    86				} catch (Exception e) {}
    87			} catch (Exception e) {
    88				Logger.getLogger(Agent.class.getName())
    89					.log(Level.WARNING, "can't load jayatana agent", e);
    90			}
    91		}
    92	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/basic/GlobalMenuAdapter.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana.basic;
    27	
    28	import java.awt.Window;
    29	import java.util.logging.Level;
    30	import java.util.logging.Logger;
    31	
    32	import com.jarego.jayatana.swing.SwingGlobalMenuWindow;
    33	
    34	/**
    35	 * Global Menu adapter class that allows to encapsulate the window driver
    36	 * along with the native menu controls.
    37	 * 
    38	 * @author Jared Gonzalez
    39	 */
    40	public abstract class GlobalMenuAdapter {
    41		private static final int SPINCOUNT = 200;
    42		private final GlobalMenuImp globalMenuImp;
    43		/**
    44	        * Menu bar lock feature variable
    45	        */
    46		private boolean lockedMenuBar = false;
    47		
    48		/**
    49	         * Variable of specification of delay for construction wait
    50	         * of menus.
    51		 */
    52		protected long approveRefreshWatcher = -1;
    53		/**
    54	         * Window associated with the global menu
    55	         */
    56	        private Object window;
    57		/**
    58	         * Window ID
    59		 */
    60		private long windowXID;
    61		
    62		/**
    63	         * Start global menu controller based on a window object.
    64	         *
    65	         * @param window window
    66		 */
    67		public GlobalMenuAdapter(Window window) {
    68			this(window, GlobalMenu.getWindowXID((Window)window));
    69		}
    70		
    71		public GlobalMenuAdapter(Object window, long windowXID) {
    72			this.window = window;
    73			this.windowXID = windowXID;
    74			this.globalMenuImp = new GlobalMenuImp(this);
    75		}
    76		
    77		/**
    78	         * Registers global menu bus viewer. In case the bus
    79	         * exists the <code> register </code> method will be invoked.
    80		 */
    81		public void registerWatcher() {
    82			globalMenuImp.registerWatcher(windowXID);
    83		}
    84		/**
    85	         * Removes the global menu bus viewer. In case the bus
    86	         * existing, the <code> unregister </ code> method will be invoked.
    87		 */
    88		protected void unregisterWatcher() {
    89			globalMenuImp.unregisterWatcher(windowXID);
    90		}
    91		/**
    92	         * This method regenerates the Bus viewer, and should be used if some
    93	         * menu (level 0) added directly to the menu bar changes,
    94	         * since Ubuntu has problems with the methods of adding or deleting these.
    95		 */
    96		protected void refreshWatcher() {
    97			globalMenuImp.refreshWatcher(windowXID);
    98		}
    99		
   100		/**
   101	         * Add a new native submenu on the menu bar.
   102	         *
   103	         * @param menuId menu identifier.
   104	         * @param label menu label.
   105	         * @param enabled menu enable status.
   106	         * @param visible visibulity status of the menu.
   107		 */
   108		protected void addMenu(int menuId, String label, char mnemonic, boolean enabled, boolean visible) {
   109			if (approveRefreshWatcher != -1)
   110				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   111			globalMenuImp.addMenu(windowXID, -1, menuId, formatLabelString(label, mnemonic), lockedMenuBar ? false : enabled, visible);
   112		}
   113		/**
   114	         * Add a new native submenu.
   115	         *
   116	         * @param menuParentId identifier of the parent menu, to specify a menu directly in the bar
   117	         * from menu the parent identifier must be <code> -1 </code>.
   118	         * @param menuId menu identifier.
   119	         * @param label menu label.
   120	         * @param enabled menu enable status.
   121	         * @param visible visibulity status of the menu.
   122		 */
   123		protected void addMenu(int menuParentId, int menuId, String label, char mnemonic, boolean enabled,
   124				boolean visible) {
   125			if (approveRefreshWatcher != -1)
   126				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   127			globalMenuImp.addMenu(windowXID, menuParentId, menuId, formatLabelString(label, mnemonic), enabled, visible);
   128		}
   129		/**
   130	         * Add a native menu item.
   131	         *
   132	         * @param menuParentId identifier of the parent menu.
   133	         * @param menuId menu identifier.
   134	         * @param label menu label.
   135	         * @param enabled menu enable status.
   136	         * @param modifiers throttle modifier menu (CTRL, ALT or SHIFT).
   137	         * @param keycode accelerator menu.
   138		 */
   139		protected void addMenuItem(int menuParentId, int menuId, String label, char mnemonic, boolean enabled,
   140				int modifiers, int keycode) {
   141			if (approveRefreshWatcher != -1)
   142				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   143			globalMenuImp.addMenuItem(windowXID, menuParentId, menuId, formatLabelString(label, mnemonic), enabled, modifiers, keycode);
   144		}
   145	        /**
   146	         * Add a native check menu item.
   147	         *
   148	         * @param menuParentId identifier of the parent menu.
   149	         * @param menuId menu identifier.
   150	         * @param label menu label.
   151	         * @param enabled menu enable status.
   152	         * @param modifiers throttle modifier menu (CTRL, ALT or SHIFT).
   153	         * @param keycode accelerator menu.
   154	         * @param selected menu selection status.
   155		 */
   156		protected void addMenuItemCheck(int menuParentId, int menuId, String label, char mnemonic, boolean enabled,
   157				int modifiers, int keycode, boolean selected) {
   158			if (approveRefreshWatcher != -1)
   159				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   160			globalMenuImp.addMenuItemCheck(windowXID, menuParentId, menuId, formatLabelString(label, mnemonic), enabled,modifiers, keycode, selected);
   161		}
   162		/**
   163	         * Add a native radio menu item.
   164	         *
   165	         * @param menuParentId identifier of the parent menu.
   166	         * @param menuId menu identifier.
   167	         * @param label menu label.
   168	         * @param enabled menu enable status.
   169	         * @param modifiers throttle modifier menu (CTRL, ALT or SHIFT).
   170	         * @param keycode accelerator menu.
   171	         * @param selected menu selection status.
   172		 */
   173		protected void addMenuItemRadio(int menuParentId, int menuId, String label, char mnemonic, boolean enabled,
   174				int modifiers, int keycode, boolean selected) {
   175			if (approveRefreshWatcher != -1)
   176				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   177			globalMenuImp.addMenuItemRadio(windowXID, menuParentId, menuId, formatLabelString(label, mnemonic), enabled, modifiers, keycode, selected);
   178		}
   179		/**
   180	         * Add a menu item of native separator.
   181	         *
   182	         * @param menuParentId identifier of the parent menu.
   183		 */
   184		protected void addSeparator(int menuParentId) {
   185			if (approveRefreshWatcher != -1)
   186				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   187			globalMenuImp.addSeparator(windowXID, menuParentId);
   188		}
   189		/**
   190	         * Status update of the native menu.
   191	         *
   192	         * @param menuId menu identifier
   193	         * @param label new tag value
   194	         * @param enabled new status value of menu enable.
   195	         * @param visible new visibility status value of the menu.
   196		 */
   197		protected void updateMenu(int menuId, String label, char mnemonics, boolean enabled, boolean visible) {
   198			if (approveRefreshWatcher != -1)
   199				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   200			globalMenuImp.updateMenu(windowXID, menuId, formatLabelString(label, mnemonics), enabled, visible);
   201		}
   202		
   203		/**
   204	         * Get the window.
   205		 * 
   206	         * @return window object.
   207		 */
   208		protected Object getWindow() {
   209			return window;
   210		}
   211		/**
   212	         * Get the window identifier.
   213	         *
   214	         * @return window ID.
   215		 */
   216		protected long getWindowXID() {
   217			return windowXID;
   218		}
   219		
   220		/**
   221	         * Format the text string to prevent errors by null and include mnemonics of
   222	         * acceleration.
   223	         *
   224	         * @param text label text
   225	         * @return text
   226		 */
   227		private static String formatLabelString(String text, char mnemonic) {
   228			if (text == null)
   229				return "";
   230			else {
   231				if (mnemonic > 0) {
   232					String output = "";
   233					boolean founded = false;
   234					for (char chr : text.toCharArray()) {
   235						if (!founded &&
   236								Character.toUpperCase(mnemonic) == Character.toUpperCase(chr)) {
   237							output += '_';
   238							founded = true;
   239						}
   240						output += chr;
   241					}
   242					return output;
   243				} else {
   244					return text;
   245				}
   246			}
   247		}
   248		
   249		/**
   250	         * Regenerates menus directly in the menu bar.
   251		 */
   252		protected void refreshWatcherSafe() {
   253			if (approveRefreshWatcher == -1) {
   254				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   255				new Thread() {
   256					@Override
   257					public void run() {
   258						try {
   259							while (System.currentTimeMillis() < approveRefreshWatcher)
   260								Thread.sleep(100);
   261						} catch (InterruptedException e) {
   262							Logger.getLogger(SwingGlobalMenuWindow.class.getName()).log(
   263									Level.WARNING, "Can't wait approve rebuild", e);
   264						} finally {
   265							approveRefreshWatcher = -1;
   266							refreshWatcher();
   267						}
   268					}
   269				}.start();
   270			} else {
   271				approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   272			}
   273		}
   274		
   275		/**
   276	         * Lock the menu bar.
   277		 */
   278		public void lockMenuBar() {
   279			if (!lockedMenuBar) {
   280				lockedMenuBar = true;
   281				refreshWatcherSafe();
   282			}
   283		}
   284		
   285		/**
   286	         * Unlock the menu bar.
   287		 */
   288		public void unlockMenuBar() {
   289			if (lockedMenuBar) {
   290				lockedMenuBar = false;
   291				refreshWatcherSafe();
   292			}
   293		}
   294		
   295		/**
   296	         * Event log when it joins the Ubuntu Menus controller.
   297		 * 
   298		 * @param state <code>GlobalMenu.REGISTER_STATE_INITIAL</code> y
   299		 * <code>GlobalMenu.REGISTER_STATE_REFRESH</code>
   300		 */
   301		abstract protected void register(int state);
   302		/**
   303	         * Event log when the connection to the Ubuntu Menus controller is terminated.
   304		 */
   305		abstract protected void unregister();
   306		/**
   307	         * Event record when a menu is selected.
   308		 * 
   309	         * @param parentMenuId Parent of the menu.
   310	         * @param menuId Menu identifier.
   311		 */
   312		abstract protected void menuActivated(int parentMenuId, int menuId);
   313		/**
   314	         * Event record when a menu is being selected before
   315	         * show
   316		 * 
   317	         * @param parentMenuId Parent of the menu.
   318	         * @param menuId Menu identifier.
   319		 */
   320		abstract protected void menuAboutToShow(int parentMenuId, int menuId);
   321		/**
   322	         * Event record when a menu is closed.
   323		 * 
   324	         * @param parentMenuId Parent of the menu.
   325	         * @param menuId Menu identifier.
   326		 */
   327		abstract protected void menuAfterClose(int parentMenuId, int menuId);
   328		
   329		/**
   330	         * Menu adapter container to prevent access to internal methods
   331		 * 
   332		 * @author Jared Gonzalez
   333		 */
   334		private static class GlobalMenuImp extends GlobalMenu {
   335			private final GlobalMenuAdapter globalMenuAdapter;
   336			
   337			public GlobalMenuImp(GlobalMenuAdapter globalMenuAdapter) {
   338				this.globalMenuAdapter = globalMenuAdapter;
   339			}
   340			@Override
   341			protected void register(int state) {
   342				globalMenuAdapter.register(state);
   343			}
   344			@Override
   345			protected void unregister() {
   346				globalMenuAdapter.unregister();
   347			}
   348			@Override
   349			protected void menuActivated(int parentMenuId, int menuId) {
   350				globalMenuAdapter.menuActivated(parentMenuId, menuId);
   351			}
   352			@Override
   353			protected void menuAboutToShow(int parentMenuId, int menuId) {
   354				if (globalMenuAdapter.approveRefreshWatcher != -1)
   355					globalMenuAdapter.approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   356				globalMenuAdapter.menuAboutToShow(parentMenuId, menuId);
   357			}
   358			@Override
   359			protected void menuAfterClose(int parentMenuId, int menuId) {
   360				if (globalMenuAdapter.approveRefreshWatcher != -1)
   361					globalMenuAdapter.approveRefreshWatcher = System.currentTimeMillis() + SPINCOUNT;
   362				globalMenuAdapter.menuAfterClose(parentMenuId, menuId);
   363			}
   364		}
   365	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/basic/GlobalMenu.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana.basic;
    27	
    28	import java.awt.Window;
    29	
    30	/**
    31	 * Integration class of Global global menu based on DBUS, allows to interact with the
    32	 * Ubuntu global menu with native invocations.
    33	 *
    34	 * @author Jared Gonzalez
    35	 */
    36	public abstract class GlobalMenu {
    37		/**
    38	          * The menu was registered for the first time.
    39		 */
    40		public static final int REGISTER_STATE_INITIAL = 0;
    41		/**
    42	          * The menu was updated by a change in the structure of the menu bar.
    43		 */
    44		public static final int REGISTER_STATE_REFRESH = 1;
    45		
    46		/**
    47	          * Initialize the native structures for integration with the global menu.
    48		 */
    49		native private static void initialize();
    50		/**
    51	          * Destroy the native structures for integration with the global menu.
    52		 */
    53		native private static void uninitialize();
    54		/**
    55	          * Thread of the closing control of the application.
    56		 */
    57		public static Thread shutdownThread = null;
    58		
    59		/**
    60	          * Initializes the native structures in addition to registering the application closing thread
    61	          * to destroy the native structures.
    62		 */
    63		public static void nativeInitialize() {
    64			Runtime.getRuntime().addShutdownHook(shutdownThread = new Thread() {
    65				{
    66					setName("JAyatana GlobalMenu Shutdown");
    67				}
    68				@Override
    69				public void run() {
    70					GlobalMenu.uninitialize();
    71				}
    72			});
    73			GlobalMenu.initialize();
    74		}
    75		
    76	        /**
    77	          * Gets the window handle of a Java Window class.
    78	          *
    79	          * @param window object window
    80	          * @return Returns the window handle
    81	          */
    82		native public static long getWindowXID(Window window);
    83		
    84	        /**
    85	          * Registers global menu bus viewer. In case the bus
    86	          * exists the <code>register</code> method will be invoked.
    87	          *
    88	          * @param windowXID window identifier
    89	          */
    90		native synchronized public void registerWatcher(long windowXID);
    91	        /**
    92	          * Removes the global menu bus viewer. In case the bus
    93	          * existing, the <code> unregister </code> method will be invoked.
    94	          *
    95	          * @param windowXID window identifier
    96	          */
    97		native synchronized public void unregisterWatcher(long windowXID);
    98	        /**
    99	          * This method regenerates the Bus viewer, and should be used if some
   100	          * menu (level 0) added directly to the menu bar changes,
   101	          * since Ubuntu has problems with the methods of adding or deleting these.
   102	          *
   103	          * @param windowXID window identifier
   104	          */
   105		native synchronized public void refreshWatcher(long windowXID);
   106		
   107	        /**
   108	          * This method is invoked when the global menu bus is registered, if the global menu
   109	          * is not or is excluded by some other method such as the environment variable UBUNTU_MENUPROXY
   110	          * this method will never be invoked.
   111	          *
   112	          * @param state registration status, when it is the first time returns the value of
   113	          * <code> REGISTER_STATE_INITIAL </code> if you are registering for a refresh returns the
   114	          * value of <code> REGISTER_STATE_REFRESH </code>.
   115	          */
   116		abstract protected void register(int state);
   117	        /**
   118	          * This method is invoked when the bus viewer is deleted or if the bus is closed
   119	          * externally
   120	          */
   121		abstract protected void unregister();
   122		
   123	        /**
   124	         * Add a new native menu.
   125	         *
   126	         * @param windowXID window identifier.
   127	         * @param menuParentId identifier of the parent menu, to specify a menu directly in the bar
   128	         * from menu the parent identifier must be <code> -1 </code>.
   129	         * @param menuId menu identifier.
   130	         * @param label menu label.
   131	         * @param enabled menu enable status.
   132	         * @param visible visibulity status of the menu.
   133	         */
   134	        native public void addMenu (long windowXID, int menuParentId, int menuId,
   135	                                    String label, boolean enabled, boolean visible);
   136	        /**
   137	         * Add a native menu item.
   138	         *
   139	         * @param windowXID window identifier.
   140	         * @param menuParentId identifier of the parent menu.
   141	         * @param menuId menu identifier.
   142	         * @param label menu label.
   143	         * @param enabled menu enable status.
   144	         * @param modifiers throttle modifier menu (CTRL, ALT or SHIFT).
   145	         * @param keycode accelerator menu.
   146	         */
   147	        native public void addMenuItem (long windowXID, int menuParentId, int menuId,
   148	                                        String label, boolean enabled, int modifiers, int keycode);
   149	        /**
   150	         * Add a native radio menu item.
   151	         *
   152	         * @param windowXID window identifier.
   153	         * @param menuParentId identifier of the parent menu.
   154	         * @param menuId menu identifier.
   155	         * @param label menu label.
   156	         * @param enabled menu enable status.
   157	         * @param modifiers throttle modifier menu (CTRL, ALT or SHIFT).
   158	         * @param keycode accelerator menu.
   159	         * @param selected menu selection status.
   160	         */
   161	        native public void addMenuItemRadio (long windowXID, int menuParentId, int menuId,
   162	                                             String label, boolean enabled, int modifiers, int keycode, boolean selected);
   163	        /**
   164	         * Add a native check menu item.
   165	         *
   166	         * @param windowXID window identifier.
   167	         * @param menuParentId identifier of the parent menu.
   168	         * @param menuId menu identifier.
   169	         * @param label menu label.
   170	         * @param enabled menu enable status.
   171	         * @param modifiers throttle modifier menu (CTRL, ALT or SHIFT).
   172	         * @param keycode accelerator menu.
   173	         * @param selected menu selection status.
   174	         */
   175	        native public void addMenuItemCheck (long windowXID, int menuParentId, int menuId,
   176	                                             String label, boolean enabled, int modifiers, int keycode, boolean selected);
   177	        /**
   178	         * Add a menu item of native separator.
   179	         *
   180	         * @param windowXID window identifier.
   181	         * @param menuParentId identifier of the parent menu.
   182	         */
   183	        native public void addSeparator (long windowXID, int menuParentId);
   184	        /**
   185	         * Status update of the native menu.
   186	         *
   187	         * @param windowXID window identifier
   188	         * @param menuId menu identifier
   189	         * @param label new tag value
   190	         * @param enabled new status value of menu enable.
   191	         * @param visible new visibility status value of the menu.
   192	         */
   193	        native public void updateMenu (long windowXID, int menuId, String label,
   194	                                       boolean enabled, boolean visible);
   195	
   196	        /**
   197	         * This method is invoked when a native menu is selected.
   198	         *
   199	         * @param parentMenuId identifier of the menu parent.
   200	         * @param menuId identifier of the selected menu.
   201	         */
   202	        abstract protected void menuActivated (int parentMenuId, int menuId);
   203	        /**
   204	         * This method is invoked when a menu is opened.
   205	         *
   206	         * @param parentMenuId identifier of the parent of the menu, if the menu is
   207	         * directly to the menu bar the value of the parent is <code> -1 </code>
   208	         * @param menuId menu identifier.
   209	         */
   210	        abstract protected void menuAboutToShow (int parentMenuId, int menuId);
   211	        /**
   212	         * This method is invoked when a menu is closed.
   213	         *
   214	         * @param parentMenuId identifier of the parent of the menu, if the menu is
   215	         * directly to the menu bar the value of the parent is <code> -1 </code>
   216	         * @param menuId menu identifier.
   217	         */
   218	        abstract protected void menuAfterClose (int parentMenuId, int menuId);
   219	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/basic/GMainLoop.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana.basic;
    27	
    28	import java.util.logging.Level;
    29	import java.util.logging.Logger;
    30	
    31	import com.jarego.jayatana.Feature;
    32	
    33	/**
    34	 * This class starts a GMainLoop for integration with the linux bus.
    35	 *
    36	 * @author Jared Gonzalez
    37	 */
    38	public class GMainLoop implements Feature {
    39		/**
    40	         * Start the GMainLoop process.
    41		 */
    42		native private static void installGMainLoop();
    43		/**
    44	         * Stops the GMain Loop process.
    45		 */
    46		native private static void uninstallGMainLoop();
    47		
    48		@Override
    49		public void deploy() {
    50	                // register the output thread of the application for
    51	                // stop the GMainLoop
    52			Runtime.getRuntime().addShutdownHook(new Thread() {
    53				{
    54					setDaemon(true);
    55					setName("JAyatana GMainLoop Shutdown");
    56				}
    57				@Override
    58				public void run() {
    59	                                // in case the global menu thread is
    60	                                // active wait for the closure of this.
    61					if (GlobalMenu.shutdownThread != null)
    62						try {
    63							GlobalMenu.shutdownThread.join();
    64						} catch (InterruptedException e) {
    65							Logger.getLogger(GMainLoop.class.getName())
    66								.log(Level.WARNING, "can't wait Global Menu end", e);
    67						}
    68	                                // finish the GMainLoop
    69	                                uninstallGMainLoop();
    70				}
    71			});
    72	                // start the GMainLoop
    73	                installGMainLoop();
    74		}
    75	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/basic/meson.build
--------------------------------------------------------------------------------
     1	native_libraries = configure_file(
     2	                input:  'NativeLibraries.java.in',
     3	                output: 'NativeLibraries.java',
     4	                configuration: data)--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/basic/NativeLibraries.java.in
--------------------------------------------------------------------------------
     1	package com.jarego.jayatana.basic;
     2	
     3	import java.io.File;
     4	
     5	import com.jarego.jayatana.Feature;
     6	
     7	public class NativeLibraries implements Feature {
     8		@Override
     9		public void deploy() {
    10	                // load libraries for swing support
    11			System.loadLibrary("jawt");
    12	                // load library of JAyatana
    13			if (System.getenv("JAYATANA_NATIVEPATH") != null) {//opcion para desarrollo
    14				System.load(System.getenv("JAYATANA_NATIVEPATH"));
    15				System.err.println("JAYATANA_NATIVEPATH="+System.getenv("JAYATANA_NATIVEPATH"));
    16			} else {
    17	                        // if the library does not exist cancel integration
    18				if (!new File("@CMAKE_INSTALL_FULL_LIBDIR@/jayatana/libjayatana.so").canRead())
    19					return;
    20				System.load("@CMAKE_INSTALL_FULL_LIBDIR@/jayatana/libjayatana.so");
    21			}
    22		}
    23	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/Feature.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana;
    27	
    28	/**
    29	 * This interface allows you to control the deployment of different
    30	 * characteristics
    31	 *
    32	 * @author Jared Gonzalez
    33	 */
    34	public interface Feature {
    35		/**
    36	         * Deploy characteristic
    37		 */
    38		public void deploy();
    39	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/FeatureManager.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana;
    27	
    28	import java.util.HashMap;
    29	import java.util.Map;
    30	
    31	/**
    32	 * This class declares each of the characteristics and allows to manage them for
    33	 * control the deployments of these. It allows to manage the features are
    34	 * instantiate the classes until they are required.
    35	 *
    36	 * @author Jared Gonzalez
    37	 */
    38	public class FeatureManager {
    39		/**
    40	         * GMainLoop feature.
    41		 */
    42		public static final String FEATURE_GMAINLOOP = "gMainLoop";
    43		/**
    44	         * Menu edge correction feature for the Look and Feel of
    45		 * GTK.
    46		 */
    47		public static final String FEATURE_SWINGGTKFIX = "swingGtkFix";
    48		/**
    49	         * Integration feature of global menu with Ubuntu.
    50		 */
    51		public static final String FEATURE_SWINGGMENU = "swingGMenu";
    52		/**
    53	         * Startup Window Manager Class change feature using
    54	         * the ambient varaible JAYATAN_WMCLASS
    55		 */
    56		public static final String FEATURE_SWINGWMCLASS = "swingWMClass";
    57		
    58		/**
    59	         * Map of features
    60		 */
    61		private static Map<String, FeatureWrapper> features = new HashMap<String, FeatureWrapper>();
    62		
    63		static {
    64	                // register integration features
    65	                FeatureWrapper basicNativeLibraries = new FeatureWrapper(
    66					"com.jarego.jayatana.basic.NativeLibraries");
    67			
    68			features.put(FEATURE_GMAINLOOP,
    69					new FeatureWrapper("com.jarego.jayatana.basic.GMainLoop",
    70							basicNativeLibraries));
    71			features.put(FEATURE_SWINGGTKFIX,
    72					new FeatureWrapper("com.jarego.jayatana.swing.SwingGTKFixed"));
    73			features.put(FEATURE_SWINGGMENU,
    74					new FeatureWrapper("com.jarego.jayatana.swing.SwingGlobalMenu",
    75							basicNativeLibraries));
    76			features.put(FEATURE_SWINGWMCLASS,
    77					new FeatureWrapper("com.jarego.jayatana.swing.SwingWMClass"));
    78			features.put(FEATURE_SWINGWMCLASS,
    79					new FeatureWrapper("com.jarego.jayatana.swing.SwingWMClass"));
    80		}
    81		
    82		/**
    83	         * Display all compatible features for Swing.
    84	         */
    85		public static void deployForSwing() {
    86			// desplegar carcateristicas de integracion
    87			deployOnce(FEATURE_SWINGWMCLASS);
    88			deployOnce(FEATURE_SWINGGTKFIX);
    89			deployOnce(FEATURE_SWINGGMENU);
    90		}
    91		
    92	        /**
    93	         * Deploy a feature only once.
    94	         *
    95	         * @param featureId identifier of the feature.
    96	         * @return Retrona <code> True </code> if the feature is
    97	         * deployed or <code> False </code> if it was already deployed.
    98	         */
    99		public static boolean deployOnce(String featureId) {
   100			return features.get(featureId).deployOnce();
   101		}
   102	        /**
   103	         * Check if a feature has already been deployed.
   104	         *
   105	         * @param featureId identifier of the feature.
   106	         * @return Retrona <code> True </code> if the feature is
   107	         * deployed or <code> False </code> if it was already deployed.
   108	         */
   109		public static boolean isDeployed(String featureId) {
   110			return features.get(featureId).isDeployed();
   111		}
   112	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/FeatureWrapper.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana;
    27	
    28	import java.util.ArrayList;
    29	import java.util.Arrays;
    30	import java.util.List;
    31	import java.util.logging.Level;
    32	import java.util.logging.Logger;
    33	
    34	/**
    35	 * Feature wrapper class to manage the number of deployments and
    36	 * error handling during this deployment.
    37	 * 
    38	 * @author Jared Gonzalez
    39	 */
    40	public class FeatureWrapper {
    41		private static List<FeatureWrapper> toFeatureWrapperArray(List<String> classNameList) {
    42			List<FeatureWrapper> fwList = new ArrayList<FeatureWrapper>();
    43			for (String cn : classNameList)
    44				fwList.add(new FeatureWrapper(cn));
    45			return fwList;
    46		}
    47		
    48		private final List<FeatureWrapper> dependencies;
    49		private final String className;
    50	    private Feature feature = null;
    51		private boolean deployed = false;
    52		
    53		/**
    54	         * Creates a feature wrap based on the name of the implemented class of the
    55	         * interface <code> com.jarego.jayatana.Feature </code>.
    56	         *
    57	         * @param className implemented class of the interface <code> com.jarego.jayatana.Feature </code>
    58		 */
    59		public FeatureWrapper(String className) {
    60			this(className, (List<FeatureWrapper>)null);
    61		}
    62		public FeatureWrapper(String className, String ...dependencies) {
    63			this(className, toFeatureWrapperArray(Arrays.asList(dependencies)));
    64		}
    65		public FeatureWrapper(String className, FeatureWrapper ...dependencies) {
    66			this(className, Arrays.asList(dependencies));
    67		}
    68		public FeatureWrapper(String className, List<FeatureWrapper> dependencies) {
    69			this.className = className;
    70			this.dependencies = dependencies;
    71		}
    72		
    73		/**
    74	         * Gets the feature instance, is instantiated for the first time when invoking the method.
    75	         *
    76	         * @return returns the feature interface
    77		 * @throws ClassNotFoundException 
    78		 * @throws IllegalAccessException 
    79		 * @throws InstantiationException 
    80		 */
    81		private Feature getInstance() throws InstantiationException,
    82				IllegalAccessException, ClassNotFoundException {
    83	                if (feature == null)
    84	                        feature = (Feature)Class.forName(className).newInstance();
    85	                return feature;
    86		}
    87		
    88	        /**
    89	         * Check if the feature has already been deployed.
    90	         *
    91	         * @return Return <code> True </code> if it has been deployed from
    92	         * opposite returns <code> False </code>.
    93		 */
    94		public synchronized boolean isDeployed() {
    95			return deployed;
    96		}
    97		
    98		/**
    99	         * Perform the one time feature deployment
   100	         *
   101	         * @return Return <code> True </code> if it is deployed for the first time
   102	         * otherwise return <code> False </code>.
   103		 */
   104		public synchronized boolean deployOnce() {
   105			if (!deployed) {
   106				try {
   107					boolean ok = true;
   108					if (dependencies != null) {
   109						for (FeatureWrapper fm : dependencies) {
   110							if (!fm.isDeployed())
   111								fm.deployOnce();
   112							ok = ok && fm.isDeployed();
   113							if (!ok)
   114								throw new Exception("failed dependency: "+fm.className);
   115						}
   116					}
   117					Feature feature;
   118					if ((feature = getInstance()) != null) {
   119							feature.deploy();
   120						deployed = true;
   121						return true;
   122					}
   123				} catch (Exception e) {
   124					Logger.getLogger(FeatureWrapper.class.getName())
   125						.log(Level.WARNING, "can't deploy feature: "+className, e);
   126				}
   127			}
   128			return false;
   129		}
   130	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/meson.build
--------------------------------------------------------------------------------
     1	subdir('basic')
     2	
     3	agent = configure_file(
     4	                input: 'Agent.java.in',
     5	                output: 'Agent.java',
     6	                configuration: data)--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/swing/SwingGlobalMenu.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana.swing;
    27	
    28	import java.awt.AWTEvent;
    29	import java.awt.Dialog.ModalityType;
    30	import java.awt.Toolkit;
    31	import java.awt.Window;
    32	import java.awt.event.AWTEventListener;
    33	import java.awt.event.ComponentEvent;
    34	import java.awt.event.ComponentListener;
    35	import java.awt.event.WindowEvent;
    36	import java.awt.event.WindowListener;
    37	import java.util.ArrayList;
    38	import java.util.List;
    39	
    40	import javax.swing.JDialog;
    41	import javax.swing.JFrame;
    42	import javax.swing.JMenuBar;
    43	import javax.swing.JOptionPane;
    44	
    45	import com.jarego.jayatana.Feature;
    46	import com.jarego.jayatana.FeatureManager;
    47	import com.jarego.jayatana.basic.GlobalMenu;
    48	
    49	/**
    50	 * Feature class to deploy the integration with the global menu
    51	 * from Ubuntu for Java Swing applications.
    52	 *
    53	 * @author Jared Gonzalez
    54	 */
    55	public class SwingGlobalMenu implements Feature, AWTEventListener {
    56		/**
    57	         * Start feature deployment for global menu integration
    58	         * from Ubuntu.
    59		 */
    60		@Override
    61		public void deploy() {
    62			GlobalMenu.nativeInitialize();
    63			Toolkit.getDefaultToolkit().addAWTEventListener(
    64					SwingGlobalMenu.this, AWTEvent.WINDOW_EVENT_MASK);
    65		}
    66		
    67		/**
    68	         * Listen to window opening event to link integration
    69	         * for each new window launched.
    70		 */
    71		@Override
    72		public void eventDispatched(AWTEvent event) {
    73			if (event.getID() == WindowEvent.WINDOW_OPENED) {
    74				if (event.getSource() instanceof JFrame)
    75					installOnWindow((JFrame)event.getSource());
    76				else if (event.getSource() instanceof JDialog)
    77					installOnWindow((JDialog)event.getSource());
    78			}
    79		}
    80		
    81		/**
    82	         * Install over <code> JFrame </code> window.
    83	         *
    84	         * @param jframe window
    85		 */
    86		protected void installOnWindow(JFrame jframe) {
    87			JMenuBar menubar;
    88			if ((menubar = retriveMenuBar(jframe)) != null)
    89				tryInstallGlobalMenu(jframe, menubar);
    90		}
    91	        /**
    92	         * Install over <code> JDialog </code> window.
    93	         *
    94	         * @param jframe window
    95	         */
    96		protected void installOnWindow(JDialog jdialog) {
    97			JMenuBar menubar;
    98			if ((menubar = retriveMenuBar(jdialog)) != null) {
    99				tryInstallGlobalMenu(jdialog, menubar);
   100			} else {
   101				if (jdialog.getModalityType() == ModalityType.APPLICATION_MODAL) {
   102					installLockParentGlobalMenu(jdialog.getOwner(), jdialog);
   103				}
   104			}
   105		}
   106		
   107		/**
   108	         * Retrieve menu bar from the window.
   109	         *
   110	         * @param jframe window.
   111	         * @return Menu bar.
   112		 */
   113		protected JMenuBar retriveMenuBar(JFrame jframe) {
   114			JMenuBar menuBar = null;
   115			if (jframe.getRootPane().getClientProperty("jayatana.menubar") instanceof JMenuBar)
   116				menuBar = (JMenuBar)jframe.getRootPane().getClientProperty("jayatana.menubar");
   117			else
   118				menuBar = jframe.getJMenuBar();
   119			return menuBar;
   120		}
   121		/**
   122	         * Retrieve menu bar from the window.
   123	         *
   124	         * @param jdialog window.
   125	         * @return Menu bar.
   126		 */
   127		protected JMenuBar retriveMenuBar(JDialog jdialog) {
   128			JMenuBar menuBar = null;
   129			if (jdialog.getRootPane().getClientProperty("jayatana.menubar") instanceof JMenuBar)
   130				menuBar = (JMenuBar)jdialog.getRootPane().getClientProperty("jayatana.menubar");
   131			else
   132				menuBar = jdialog.getJMenuBar();
   133			return menuBar;
   134		}
   135		
   136		/**
   137	         * Try to install as long as the bus is running on the global menu.
   138	         *
   139	         * @param window window.
   140	         * @param menubar menu bar.
   141		 */
   142		private void tryInstallGlobalMenu(Window window, JMenuBar menubar) {
   143			FeatureManager.deployOnce(FeatureManager.FEATURE_GMAINLOOP);
   144			SwingGlobalMenuWindow swingGlobalMenuWindow = new SwingGlobalMenuWindow(window, menubar);
   145			setSwingGlobalMenuWindowController(window, swingGlobalMenuWindow);
   146			swingGlobalMenuWindow.registerWatcher();
   147		}
   148		
   149		/**
   150	         * Install the menu lock on the parent window.
   151	         *
   152	         * @param parent Parent window
   153	         * @param child child window
   154		 */
   155		private void installLockParentGlobalMenu(Window parent, final Window child) {
   156			if (parent != null) {
   157				List<SwingGlobalMenuWindow> swingGlobalMenuWindowList = new ArrayList<SwingGlobalMenuWindow>();
   158				if (parent == JOptionPane.getRootFrame()) {
   159					for (Window w : Window.getOwnerlessWindows()) {
   160						SwingGlobalMenuWindow swingGlobalMenuWindow = getSwingGlobalMenuWindowController(w);
   161						if (swingGlobalMenuWindow != null) {
   162							swingGlobalMenuWindow.lockMenuBar();
   163							swingGlobalMenuWindowList.add(swingGlobalMenuWindow);
   164						}
   165					}
   166				} else {
   167					SwingGlobalMenuWindow swingGlobalMenuWindow = getSwingGlobalMenuWindowController(parent);
   168					if (swingGlobalMenuWindow != null) {
   169						swingGlobalMenuWindow.lockMenuBar();
   170						swingGlobalMenuWindowList.add(swingGlobalMenuWindow);
   171					}
   172				}
   173				ApplicationModalWindowListener listener =
   174						new ApplicationModalWindowListener(swingGlobalMenuWindowList);
   175				child.addWindowListener(listener);
   176				child.addComponentListener(listener);
   177			}
   178		}
   179		
   180		/**
   181	         * Set the menu controller on the window.
   182	         *
   183	         * @param window window
   184	         * @param sgm menu controller
   185		 */
   186		private void setSwingGlobalMenuWindowController(Window window, SwingGlobalMenuWindow sgm) {
   187			if (window instanceof JFrame)
   188				((JFrame)window)
   189					.getRootPane().putClientProperty("jayatana.globalmenu.controller", sgm);
   190			else if (window instanceof JDialog)
   191				((JDialog)window)
   192					.getRootPane().putClientProperty("jayatana.globalmenu.controller", sgm);
   193		}
   194		
   195	        /**
   196	         * Get the menu controller on the window.
   197	         *
   198	         * @param window window
   199	         * @return menu controller
   200	         */
   201		private SwingGlobalMenuWindow getSwingGlobalMenuWindowController(Window window) {
   202			SwingGlobalMenuWindow swingGlobalMenuWindow = null;
   203			if (window instanceof JFrame)
   204				swingGlobalMenuWindow = (SwingGlobalMenuWindow)((JFrame)window)
   205					.getRootPane().getClientProperty("jayatana.globalmenu.controller");
   206			else if (window instanceof JDialog)
   207				swingGlobalMenuWindow = (SwingGlobalMenuWindow)((JDialog)window)
   208					.getRootPane().getClientProperty("jayatana.globalmenu.controller");
   209			return swingGlobalMenuWindow;
   210		}
   211		
   212		/**
   213	         * Class to release the menu block once the MODAL window is closed.
   214	         *
   215		 * @author Jared Gonzalez
   216		 */
   217		private class ApplicationModalWindowListener implements WindowListener, ComponentListener {
   218			boolean locked;
   219			private List<SwingGlobalMenuWindow> swingGlobalMenuWindowList;
   220			
   221			public ApplicationModalWindowListener(List<SwingGlobalMenuWindow> swingGlobalMenuWindowList) {
   222				this.swingGlobalMenuWindowList = swingGlobalMenuWindowList;
   223				locked = true;
   224			}
   225			@Override
   226			public void componentHidden(ComponentEvent e) {
   227				if (locked) {
   228					for (SwingGlobalMenuWindow sgw : swingGlobalMenuWindowList)
   229						sgw.unlockMenuBar();
   230					locked = false;
   231				}
   232			}
   233			@Override
   234			public void componentShown(ComponentEvent e) {
   235				if (!locked) {
   236					for (SwingGlobalMenuWindow sgw : swingGlobalMenuWindowList)
   237						sgw.lockMenuBar();
   238					locked = true;
   239				}
   240			}
   241			@Override
   242			public void componentMoved(ComponentEvent e) {}
   243			@Override
   244			public void componentResized(ComponentEvent e) {}
   245			
   246			@Override
   247			public void windowActivated(WindowEvent e) {}
   248			@Override
   249			public void windowClosing(WindowEvent e) {}
   250			@Override
   251			public void windowDeactivated(WindowEvent e) {}
   252			@Override
   253			public void windowDeiconified(WindowEvent e) {}
   254			@Override
   255			public void windowIconified(WindowEvent e) {}
   256			@Override
   257			public void windowOpened(WindowEvent e) {}
   258			@Override
   259			public void windowClosed(WindowEvent e) {
   260				if (locked) {
   261					for (SwingGlobalMenuWindow sgw : swingGlobalMenuWindowList)
   262						sgw.unlockMenuBar();
   263					locked = false;
   264				}
   265				e.getWindow().removeWindowListener(this);
   266				e.getWindow().removeComponentListener(this);
   267			}
   268		}
   269	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/swing/SwingGlobalMenuWindow.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana.swing;
    27	
    28	import java.lang.String;
    29	import java.util.Set;
    30	import java.util.HashSet;
    31	
    32	import java.awt.AWTEvent;
    33	import java.awt.Component;
    34	import java.awt.Dimension;
    35	import java.awt.EventQueue;
    36	import java.awt.Point;
    37	import java.awt.Toolkit;
    38	import java.awt.Window;
    39	import java.awt.event.AWTEventListener;
    40	import java.awt.event.ComponentEvent;
    41	import java.awt.event.ComponentListener;
    42	import java.awt.event.ContainerEvent;
    43	import java.awt.event.ContainerListener;
    44	import java.awt.event.KeyEvent;
    45	import java.awt.event.WindowEvent;
    46	import java.awt.event.WindowListener;
    47	import java.beans.PropertyChangeEvent;
    48	import java.beans.PropertyChangeListener;
    49	import java.lang.reflect.Field;
    50	import java.lang.reflect.Method;
    51	import java.util.logging.Level;
    52	import java.util.logging.Logger;
    53	
    54	import javax.swing.FocusManager;
    55	import javax.swing.JCheckBoxMenuItem;
    56	import javax.swing.JComponent;
    57	import javax.swing.JDialog;
    58	import javax.swing.JFrame;
    59	import javax.swing.JMenu;
    60	import javax.swing.JMenuBar;
    61	import javax.swing.JMenuItem;
    62	import javax.swing.JPopupMenu;
    63	import javax.swing.JRadioButtonMenuItem;
    64	import javax.swing.JSeparator;
    65	import javax.swing.KeyStroke;
    66	import javax.swing.event.PopupMenuEvent;
    67	import javax.swing.event.PopupMenuListener;
    68	
    69	import com.jarego.jayatana.basic.GlobalMenu;
    70	import com.jarego.jayatana.basic.GlobalMenuAdapter;
    71	
    72	/**
    73	 * This class allows you to control the menus associated with a Java Swing window.
    74	 *
    75	 * @author Jared Gonzalez
    76	 */
    77	public class SwingGlobalMenuWindow extends GlobalMenuAdapter implements WindowListener,
    78			AWTEventListener, ContainerListener, PropertyChangeListener, ComponentListener {
    79		private JMenuBar menubar;
    80	        private Window window;
    81		private boolean netbeansPlatform;
    82	        private boolean ideaWindow;
    83	        private Set<JMenuItem> approved_checkboxes;
    84		private boolean fullscreen = false;
    85	        private final String NETBEANS_PLATFORM = "org.openide.awt.MenuBar";
    86	        private final String IDEA_SUBSTRING = "com.intellij";
    87		
    88		/**
    89	         * Instance class of menu driver for java Swing windows.
    90	         *
    91	         * @param window window.
    92	         * @param menubar menu bar.
    93		 */
    94		public SwingGlobalMenuWindow(Window window, JMenuBar menubar) {
    95			super(window);
    96	                this.window = window;
    97			this.menubar = menubar;
    98	                this.approved_checkboxes = new HashSet<JMenuItem>();
    99		}
   100	
   101	
   102	        /**
   103	         * Check for MenuBar is Netbeans one.
   104	         *
   105	         * @return is Netbeans menubar
   106	         */
   107	        public boolean checkIsNetbeans() {
   108	            return NETBEANS_PLATFORM.equals(menubar.getClass().getName());
   109	        }
   110	
   111	        /**
   112	         * Check for Environment is JetBrains one.
   113	         *
   114	         * @return is JetBrains environment
   115	         */
   116	        public boolean checkIsJetBrains() {
   117	            boolean by_menubar = menubar.getClass().getName().contains(IDEA_SUBSTRING);
   118	            boolean by_window = window.getClass().getName().contains(IDEA_SUBSTRING);
   119	            return by_menubar || by_window;
   120	        }
   121	
   122		/**
   123	         * Register Java Swing menu.
   124		 */
   125		@Override
   126		protected void register(final int state) {
   127			try {
   128				EventQueue.invokeAndWait(new Runnable() {
   129					@Override
   130					public void run() {
   131						if (state == GlobalMenu.REGISTER_STATE_INITIAL) {
   132	                                                //set menubar visibility
   133							menubar.setVisible(false);
   134							
   135	                                                // Correction for Netbeans
   136	                                                netbeansPlatform = checkIsNetbeans();
   137	                                                ideaWindow = checkIsJetBrains();
   138							// -----------------------
   139							
   140	                                                // register listeners of component changes
   141							for (Component comp : menubar.getComponents()) {
   142								if (comp instanceof JMenu) {
   143									((JMenu)comp).addPropertyChangeListener(SwingGlobalMenuWindow.this);
   144									((JMenu)comp).addComponentListener(SwingGlobalMenuWindow.this);
   145								}
   146							}
   147							menubar.addContainerListener(SwingGlobalMenuWindow.this);
   148	                                                // register keyboard accelerator listeners
   149							Toolkit.getDefaultToolkit().addAWTEventListener(
   150									SwingGlobalMenuWindow.this, KeyEvent.KEY_EVENT_MASK);
   151							((Window)getWindow()).addWindowListener(SwingGlobalMenuWindow.this);
   152							((Window)getWindow()).addComponentListener(SwingGlobalMenuWindow.this);
   153						}
   154						createMenuBarMenus();
   155					}
   156				});
   157			} catch (Exception e) {
   158				Logger.getLogger(SwingGlobalMenuWindow.class.getName())
   159						.log(Level.WARNING, e.getMessage(), e);
   160			}
   161		}
   162		/**
   163	         * Deregister listeners, when the global menu bus closes.
   164	         */
   165		@Override
   166		protected void unregister() {
   167	                // remove listeners from events
   168			((Window)getWindow()).removeWindowListener(SwingGlobalMenuWindow.this);
   169			((Window)getWindow()).addComponentListener(SwingGlobalMenuWindow.this);
   170			Toolkit.getDefaultToolkit().removeAWTEventListener(SwingGlobalMenuWindow.this);
   171			for (Component comp : menubar.getComponents()) {
   172				if (comp instanceof JMenu) {
   173					((JMenu)comp).removePropertyChangeListener(SwingGlobalMenuWindow.this);
   174					((JMenu)comp).removeComponentListener(SwingGlobalMenuWindow.this);
   175				}
   176			}
   177			menubar.removeContainerListener(SwingGlobalMenuWindow.this);
   178	                // make menubar visible again
   179			menubar.setVisible(true);
   180		}
   181		
   182		/**
   183	         * Create level 1 menus, directly to the menu bar.
   184	         */
   185		private void createMenuBarMenus() {
   186			for (Component comp : menubar.getComponents()) {
   187				if (comp instanceof JMenu) {
   188					addMenu(null, (JMenu)comp);
   189				}
   190			}
   191		}
   192		
   193		/**
   194	         * Add submenu.
   195	         *
   196	         * @param parent parent menu
   197	         * @param menu
   198		 */
   199		private void addMenu(JMenu parent, JMenu menu) {
   200			if (parent == null)
   201				addMenu(menu.hashCode(), menu.getText(), (char)menu.getMnemonic(), menu.isEnabled(), menu.isVisible());
   202			else
   203				addMenu(parent.hashCode(), menu.hashCode(), menu.getText(), (char)menu.getMnemonic(), menu.isEnabled(), menu.isVisible());
   204		}
   205		
   206		/**
   207	         * Add menu item
   208	         * @param parent parent menu
   209	         * @param menuitem menu item
   210		 */
   211		private void addMenuItem(JMenu parent, JMenuItem menuitem) {
   212			Dimension size = menuitem.getPreferredSize();
   213			if (size.height < 2)
   214				return;
   215			
   216			int modifiers = -1;
   217			int keycode = -1;
   218			
   219			if (menuitem.getAccelerator() != null) {
   220				modifiers = menuitem.getAccelerator().getModifiers();
   221				keycode = menuitem.getAccelerator().getKeyCode();
   222			}
   223	
   224	
   225	                if (menuitem instanceof JRadioButtonMenuItem) {
   226				addMenuItemRadio(parent.hashCode(), menuitem.hashCode(),
   227						menuitem.getText(), (char)menuitem.getMnemonic(), menuitem.isEnabled(), modifiers,
   228						keycode, menuitem.isSelected());
   229			} else if (menuitem instanceof JCheckBoxMenuItem) {
   230	                        if(ideaWindow && !(menuitem.isSelected()) && !approved_checkboxes.contains(menuitem))
   231	                                addMenuItem(parent.hashCode(), menuitem.hashCode(), menuitem.getText(),
   232	                                                (char)menuitem.getMnemonic(), menuitem.isEnabled(), modifiers, keycode);
   233	                        else {
   234	                                addMenuItemCheck(parent.hashCode(), menuitem.hashCode(),
   235	                                                menuitem.getText(), (char)menuitem.getMnemonic(), menuitem.isEnabled(), modifiers,
   236	                                                keycode, menuitem.isSelected());
   237	                                if(ideaWindow && !approved_checkboxes.contains(menuitem))
   238	                                        approved_checkboxes.add(menuitem);
   239	                        }
   240			} else {
   241				addMenuItem(parent.hashCode(), menuitem.hashCode(), menuitem.getText(),
   242						(char)menuitem.getMnemonic(), menuitem.isEnabled(), modifiers, keycode);
   243			}
   244		}
   245		
   246		/**
   247	         * Get the menu based on this hashcode.
   248	         *
   249	         * @param hashcode menu identifier.
   250	         * @return Returns the found menu in case it is not found
   251	         * returns <code> NULL </code>.
   252		 */
   253		private JMenuItem getJMenuItem(int hashcode) {
   254			for (Component comp : menubar.getComponents())
   255				if (comp instanceof JMenuItem) {
   256					JMenuItem item;
   257					if ((item = getJMenuItem((JMenuItem) comp, hashcode)) != null)
   258						return item;
   259				}
   260			return null;
   261		}
   262		/**
   263	         * Get the menu item based on this hashcode.
   264	         *
   265	         * @param menu parent menu
   266	         * @param hashcode menu identifier.
   267	         * @return Returns the found menuitem in case it is not found
   268	         * returns <code> NULL </code>.
   269		 */
   270		private JMenuItem getJMenuItem(JMenuItem menu, int hashcode) {
   271			if (menu.hashCode() == hashcode) {
   272				return menu;
   273			} else if (menu instanceof JMenu) {
   274				for (Component comp : ((JMenu) menu).getMenuComponents())
   275					if (comp instanceof JMenuItem) {
   276						JMenuItem item;
   277						if ((item = getJMenuItem((JMenuItem) comp, hashcode)) != null)
   278							return item;
   279					}
   280			}
   281			return null;
   282		}
   283		
   284		/**
   285	         * Activate menu.
   286		 */
   287		@Override
   288		protected void menuActivated(int parentMenuId, int menuId) {
   289			final JMenuItem menuitem = getJMenuItem(menuId);
   290			if (menuitem != null && menuitem.isEnabled() && menuitem.isVisible()) {
   291				EventQueue.invokeLater(new Runnable() {
   292					@Override
   293					public void run() {
   294						menuitem.getModel().setArmed(true);
   295						menuitem.getModel().setPressed(true);
   296						menuitem.getModel().setPressed(false);
   297						menuitem.getModel().setArmed(false);
   298					}
   299				});
   300			}
   301		}
   302		
   303		/**
   304	         * Verify if one class is an instance of another based on
   305	         * Java Refelection
   306	         *
   307	         * @param cls Class to compare.
   308	         * @param scls Class or comparison interface.
   309	         * @return If it is an inherited or implemented instance, it returns
   310	         * <code> True </code> otherwise <code> False </code>.
   311		 */
   312		private boolean isInstanceReflection(Class<?> cls, String scls) {
   313			if ("java.lang.Object".equals(cls.getName())) {
   314				return false;
   315			} else if (scls.equals(cls.getName())) {
   316				return true;
   317			} else {
   318				for (Class<?> clsInterface : cls.getInterfaces()) {
   319					if (scls.equals(clsInterface.getName()))
   320						return true;
   321				}
   322				return isInstanceReflection(cls.getSuperclass(), scls);
   323			}
   324		}
   325		
   326		/**
   327	         * Invocation of Netbeans platform menus, allows to invoke own constructors of the
   328	         * platform to get the menus.
   329	         *
   330	         * @param menu Netbeans platform menu.
   331		 */
   332		private void menuAboutToShowForNetbeansPlatform(JMenu menu) {
   333			if (isInstanceReflection(menu.getClass(), "org.openide.awt.MenuBar$LazyMenu")) {
   334				try {
   335					Method methodDoInitialize = menu.getClass().getDeclaredMethod(
   336							"doInitialize", new Class<?>[] {});
   337					if (!methodDoInitialize.isAccessible())
   338						methodDoInitialize.setAccessible(true);
   339					
   340					Field fieldDynaModel = menu.getClass().getDeclaredField("dynaModel");
   341					if (!fieldDynaModel.isAccessible())
   342							fieldDynaModel.setAccessible(true);
   343	
   344					Class<?> classDynaModel = fieldDynaModel.getType();
   345					Method methodDynaModel = classDynaModel.getMethod("checkSubmenu",
   346							new Class<?>[] {JMenu.class});
   347					if (!methodDynaModel.isAccessible())
   348							methodDynaModel.setAccessible(true);
   349	
   350					methodDoInitialize.invoke(menu, new Object[] {});
   351					Object objectDynaModel = fieldDynaModel.get(menu);
   352					methodDynaModel.invoke(objectDynaModel, menu);
   353				} catch (Exception e) {
   354					Logger.getLogger(SwingGlobalMenuWindow.class.getName())
   355							.log(Level.SEVERE, e.getMessage(), e);
   356				}
   357			}
   358			
   359			if (isInstanceReflection(menu.getClass(), "org.openide.awt.DynamicMenuContent")) {
   360				try {
   361					Method methodSynchMenu = menu.getClass().getDeclaredMethod(
   362							"synchMenuPresenters", new Class<?>[] {JComponent[].class});
   363					if (!methodSynchMenu.isAccessible())
   364						methodSynchMenu.setAccessible(true);
   365					methodSynchMenu.invoke(menu, new Object[] {null});
   366				} catch (Exception e) {
   367					Logger.getLogger(SwingGlobalMenuWindow.class.getName())
   368							.log(Level.WARNING, e.getMessage(), e);
   369				}
   370			}
   371		}
   372		// ----------------------
   373		
   374		/**
   375	         * About to show a submenu.
   376		 */
   377		@Override
   378		protected void menuAboutToShow(int parentMenuId, final int menuId) {
   379			try {
   380				EventQueue.invokeAndWait(new Runnable() {
   381					@Override
   382					public void run() {
   383						final JMenu menu = (JMenu)getJMenuItem(menuId);
   384						int items = 0;
   385						if (menu != null && menu.isEnabled() && menu.isVisible()) {
   386							menu.getModel().setSelected(true);
   387							
   388							JPopupMenu popupMenu = menu.getPopupMenu();
   389							PopupMenuEvent pevent = new PopupMenuEvent(popupMenu);
   390							for (PopupMenuListener pl : popupMenu.getPopupMenuListeners())
   391								if (pl != null) pl.popupMenuWillBecomeVisible(pevent);
   392							
   393	                                                // Correction for netbeans
   394							if (netbeansPlatform)
   395								menuAboutToShowForNetbeansPlatform(menu);
   396							// -----------------------
   397							
   398							for (Component comp : popupMenu.getComponents()) {
   399								if (comp instanceof JMenu) {
   400									addMenu(menu, (JMenu)comp);
   401									items++;
   402								} else if (comp instanceof JMenuItem && comp.isVisible()) {
   403									addMenuItem(menu, (JMenuItem)comp);
   404									items++;
   405								} else if (comp instanceof JSeparator && comp.isVisible()) {
   406									addSeparator(menu.hashCode());
   407									items++;
   408								}
   409							}
   410						}
   411						if (items == 0 && menu != null)
   412							addMenuItem(menu.hashCode(), -1, "(...)", (char)0, false, -1, -1);
   413					}
   414				});
   415			} catch (Exception e) {
   416				Logger.getLogger(SwingGlobalMenuWindow.class.getName())
   417					.log(Level.SEVERE, e.getMessage(), e);
   418			}
   419		}
   420		/**
   421	         * After closing submenu.
   422		 */
   423		@Override
   424		protected void menuAfterClose(int parentMenuId, final int menuId) {
   425			try {
   426				EventQueue.invokeAndWait(new Runnable() {
   427					@Override
   428					public void run() {
   429						final JMenu menu = (JMenu)getJMenuItem(menuId);
   430						if (menu != null && menu.isEnabled() && menu.isVisible()) {
   431							JPopupMenu popupMenu = menu.getPopupMenu();
   432							if (popupMenu != null) {
   433								PopupMenuEvent pevent = new PopupMenuEvent(popupMenu);
   434								for (PopupMenuListener pl : popupMenu.getPopupMenuListeners())
   435									if (pl != null) pl.popupMenuWillBecomeInvisible(pevent);
   436							}
   437							menu.getModel().setSelected(false);
   438						}
   439					}
   440				});
   441			} catch (Exception e) {
   442				Logger.getLogger(SwingGlobalMenuWindow.class.getName())
   443					.log(Level.WARNING, e.getMessage(), e);
   444			}
   445		}
   446	
   447		@Override
   448		public void windowOpened(WindowEvent e) {}
   449		@Override
   450		public void windowClosing(WindowEvent e) {}
   451		/**
   452	         * The window is closed.
   453		 */
   454		@Override
   455		public void windowClosed(WindowEvent e) {
   456			unregisterWatcher();
   457		}
   458		@Override
   459		public void windowIconified(WindowEvent e) {}
   460		@Override
   461		public void windowDeiconified(WindowEvent e) {}
   462		@Override
   463		public void windowActivated(WindowEvent e) {}
   464		@Override
   465		public void windowDeactivated(WindowEvent e) {}
   466		
   467		/**
   468	         * Get the window to which a component belongs.
   469	         *
   470	         * @param comp component
   471	         * @return If the component has an associated window, it returns
   472	         * the window otherwise returns <code> NULL </ code>.
   473		 */
   474		private Window getWindow(Component comp) {
   475			if (comp == null)
   476				return null;
   477			else if (comp instanceof JFrame)
   478				return (Window)comp;
   479			else if (comp instanceof JDialog)
   480				return (Window)comp;
   481			else
   482				return getWindow(comp.getParent());
   483		}
   484		
   485		/**
   486	         * Processing keyboard accelerator events.
   487		 */
   488		@Override
   489		public void eventDispatched(AWTEvent event) {
   490			KeyEvent e = (KeyEvent) event;
   491			if (e.getID() == KeyEvent.KEY_PRESSED && !e.isConsumed()) {
   492				if (e.getKeyCode() != KeyEvent.VK_ALT
   493						&& e.getKeyCode() != KeyEvent.VK_SHIFT
   494						&& e.getKeyCode() != KeyEvent.VK_CONTROL
   495						&& e.getKeyCode() != KeyEvent.VK_META
   496						&& e.getKeyCode() != KeyEvent.VK_ALT_GRAPH) {
   497					if (getWindow((Component)e.getSource()) == getWindow()) {
   498						try {
   499							KeyStroke acelerator = KeyStroke.getKeyStroke(e.getKeyCode(), e.getModifiers());
   500							if (FocusManager.getCurrentManager().getFocusOwner() instanceof JComponent) {
   501								JComponent jcomp = (JComponent)FocusManager.getCurrentManager().getFocusOwner();
   502								if (jcomp.getActionForKeyStroke(acelerator) == null) {
   503									Method methodProcessKeyBinding = JMenuBar.class.getDeclaredMethod(
   504										"processKeyBinding", new Class<?>[] {
   505											KeyStroke.class, KeyEvent.class, int.class, boolean.class
   506									});
   507									if (!methodProcessKeyBinding.isAccessible())
   508										methodProcessKeyBinding.setAccessible(true);
   509									Object result = methodProcessKeyBinding.invoke(menubar, new Object[] {
   510										KeyStroke.getKeyStroke(e.getKeyCode(), e.getModifiers()), e, 	
   511										JComponent.WHEN_IN_FOCUSED_WINDOW, true
   512									});
   513									if (Boolean.TRUE.equals(result))
   514										e.consume();
   515								}
   516							}
   517						} catch (Exception err) {
   518							Logger.getLogger(SwingGlobalMenuWindow.class.getName())
   519									.log(Level.WARNING, err.getMessage(), err);
   520						}
   521					}
   522				}
   523			}
   524		}
   525	
   526		/**
   527	         *A new menu is added to the menu bar.
   528		 */
   529		@Override
   530		public void componentAdded(ContainerEvent e) {
   531			if (e.getChild() instanceof JMenu) {
   532				((JMenu)e.getChild()).addPropertyChangeListener(this);
   533				((JMenu)e.getChild()).addComponentListener(this);
   534				refreshWatcherSafe();
   535			}
   536		}
   537		/**
   538	         * A menu is removed from the menu bar.
   539		 */
   540		@Override
   541		public void componentRemoved(ContainerEvent e) {
   542			if (e.getChild() instanceof JMenu) {
   543				((JMenu)e.getChild()).removePropertyChangeListener(this);
   544				((JMenu)e.getChild()).removeComponentListener(this);
   545				refreshWatcherSafe();
   546			}
   547		}
   548		/**
   549	         * Change the attribute of a menu in the menu bar.
   550		 */
   551		@Override
   552		public void propertyChange(PropertyChangeEvent evt) {
   553			if ("enabled".equals(evt.getPropertyName())) {
   554				JMenu menu = (JMenu)evt.getSource();
   555				updateMenu(menu.hashCode(), menu.getText(), (char)menu.getMnemonic(), menu.isEnabled(), menu.isVisible());
   556			}
   557		}
   558		/**
   559	         * A menu bar menu is hidden.
   560		 */
   561		@Override
   562		public void componentHidden(ComponentEvent e) {
   563			if (e.getSource() instanceof JMenu) {
   564				JMenu menu = (JMenu)e.getSource();
   565				updateMenu(menu.hashCode(), menu.getText(), (char)menu.getMnemonic(), menu.isEnabled(), menu.isVisible());
   566			}
   567		}
   568		/**
   569	         * A menu bar menu becomes visible.
   570		 */
   571		@Override
   572		public void componentShown(ComponentEvent e) {
   573			if (e.getSource() instanceof JMenu) {
   574				JMenu menu = (JMenu)e.getSource();
   575				updateMenu(menu.hashCode(), menu.getText(), (char)menu.getMnemonic(), menu.isEnabled(), menu.isVisible());
   576			} else if (e.getSource() instanceof Window) {
   577				refreshWatcherSafe();
   578			}
   579		}
   580		@Override
   581		public void componentMoved(ComponentEvent e) {}
   582		@Override
   583		public void componentResized(ComponentEvent e) {
   584			if (e.getSource() instanceof Window) {
   585				Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
   586				Point rootPaneLoc = null;
   587				Dimension rootPaneSize = null;
   588				if (getWindow() instanceof JFrame) {
   589					rootPaneLoc = ((JFrame)getWindow()).getRootPane().getLocationOnScreen();
   590					rootPaneSize = ((JFrame)getWindow()).getRootPane().getSize();
   591				} else if (getWindow() instanceof JDialog) {
   592					rootPaneLoc = ((JDialog)getWindow()).getRootPane().getLocationOnScreen();
   593					rootPaneSize = ((JDialog)getWindow()).getRootPane().getSize();
   594				}
   595				if (rootPaneLoc != null && rootPaneSize != null) {
   596					if (rootPaneSize.height >= screenSize.height &&
   597							rootPaneSize.width >= screenSize.width &&
   598							rootPaneLoc.x == 0 && rootPaneLoc.y == 0 &&
   599							!fullscreen) {
   600						fullscreen = true;
   601						unregisterWatcher();
   602						for (Component comp : menubar.getComponents())
   603							if (comp instanceof JMenu)
   604								((JMenu)comp).getModel().setSelected(false);
   605					} else if ((rootPaneSize.height < screenSize.height ||
   606							rootPaneSize.width < screenSize.width) &&
   607							rootPaneLoc.x >= 0 && rootPaneLoc.y >= 0 &&
   608							fullscreen) {
   609						fullscreen = false;
   610						registerWatcher();
   611					}
   612				}
   613			}
   614		}
   615	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/swing/SwingGTKFixed.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana.swing;
    27	
    28	import com.jarego.jayatana.Feature;
    29	import com.sun.java.swing.plaf.gtk.GTKLookAndFeel;
    30	
    31	import java.beans.PropertyChangeEvent;
    32	import java.beans.PropertyChangeListener;
    33	import java.lang.reflect.Field;
    34	import java.util.logging.Level;
    35	import java.util.logging.Logger;
    36	
    37	import javax.swing.JComponent;
    38	import javax.swing.UIManager;
    39	import javax.swing.plaf.synth.Region;
    40	
    41	/**
    42	 * This class is a feature to correct the border the GTK menus which do not
    43	 * shows. This class allows you to incorporate the drawing of the edges of these menus.
    44	 *
    45	 * @author Jared Gonzalez
    46	 */
    47	@SuppressWarnings("restriction")
    48	public class SwingGTKFixed implements Feature, PropertyChangeListener {
    49		/**
    50	         * The edge correction of the menus in GTK is displayed.
    51		 */
    52		@Override
    53		public void deploy() {
    54			UIManager.addPropertyChangeListener(new SwingGTKFixed());
    55		}
    56		
    57		/**
    58	         * Identify if the LookAndFeel changes on GTK.
    59		 */
    60		@Override
    61		public void propertyChange(PropertyChangeEvent evt) {
    62			if ("lookAndFeel".equals(evt.getPropertyName())) {
    63				if (evt.getNewValue() != null ?
    64						evt.getNewValue().getClass().getName().contains("GTKLookAndFeel") : false)
    65					try {
    66						installGtkThikcness();
    67					} catch (Exception e) {
    68						Logger.getLogger(SwingGTKFixed.class.getName())
    69							.log(Level.WARNING, "can't install gtk border fixed", e);
    70					}
    71			}
    72		}
    73		
    74		/**
    75	         * Set an edge to 1.
    76		 * 
    77		 * @throws Exception
    78		 */
    79		private static void installGtkThikcness() throws Exception {
    80			JComponent comp = new JComponent() {};
    81			changeGtkYThikcness(GTKLookAndFeel.getStyle(comp , Region.POPUP_MENU), 1);
    82	        changeGtkXThikcness(GTKLookAndFeel.getStyle(comp, Region.POPUP_MENU), 1);
    83	        changeGtkYThikcness(GTKLookAndFeel.getStyle(comp, Region.POPUP_MENU_SEPARATOR), 1);
    84		}
    85	        /**
    86	         * Change the vertical border of the menus by at least 1 if the initial value is 0.
    87	         *
    88	         * @param style style driver.
    89	         * @param border edge size.
    90	         * @throws Exception In case you fail to access the attribute.
    91	         */
    92		private static void changeGtkYThikcness(Object style, int border)
    93				throws Exception {
    94			Field field = style.getClass().getDeclaredField("yThickness");
    95			field.setAccessible(true);
    96			field.setInt(style, Math.max(border, field.getInt(style)));
    97			field.setAccessible(false);
    98		}
    99	        /**
   100	         * Change the horizontal border of the menus by at least 1 if the initial value is 0.
   101	         *
   102	         * @param style style driver.
   103	         * @param border edge size.
   104	         * @throws Exception In case you fail to access the attribute.
   105	         */
   106		private static void changeGtkXThikcness(Object style, int border)
   107				throws Exception {
   108			Field field = style.getClass().getDeclaredField("xThickness");
   109			field.setAccessible(true);
   110			field.setInt(style, Math.max(border, field.getInt(style)));
   111			field.setAccessible(false);
   112		}
   113	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/com/jarego/jayatana/swing/SwingWMClass.java
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 */
    26	package com.jarego.jayatana.swing;
    27	
    28	import java.awt.Toolkit;
    29	import java.lang.reflect.Field;
    30	import java.util.logging.Level;
    31	import java.util.logging.Logger;
    32	
    33	import com.jarego.jayatana.Feature;
    34	
    35	/**
    36	 * This class is a feature to modify the value of the STARTUP WINDOW MANAGER CLASS
    37	 * which can be integrated into a * .desktop launcher file for integration with the
    38	 * Ubuntu menu bar.
    39	 *
    40	 * This value can be modified with the virtual machine parameter:
    41	 * jayatana.wmclass
    42	 * Or with the environment variable:
    43	 * JAYATANA_WMCLASS
    44	 *
    45	 * This value can be used in conjunction with the StartupWMClass parameter in the .desktop file
    46	 * To allow to integrate with the Unity launch bar.
    47	 *
    48	 * @author Jared Gonzalez.
    49	 */
    50	public class SwingWMClass implements Feature {
    51		/**
    52	         * Feature display to allow integration with the Unity launcher.
    53		 */
    54		@Override
    55		public void deploy() {
    56			String startupWMClass = null;
    57			
    58			if (System.getProperty("jayatana.startupWMClass") != null)
    59				startupWMClass = System.getProperty("jayatana.startupWMClass");
    60			else if (System.getProperty("jayatana.wmclass") != null)
    61				startupWMClass = System.getProperty("jayatana.wmclass");
    62			
    63			else if (System.getProperty("JAYATANA_STARTUPWMCLASS") != null)
    64				startupWMClass = System.getProperty("JAYATANA_STARTUPWMCLASS");
    65			else if (System.getProperty("JAYATANA_WMCLASS") != null)
    66				startupWMClass = System.getProperty("JAYATANA_WMCLASS");
    67			
    68			if (startupWMClass != null) {
    69				try {
    70					System.setProperty("java.awt.WM_CLASS", startupWMClass);
    71					Toolkit xToolkit = Toolkit.getDefaultToolkit();
    72					Field awtAppClassNameField = xToolkit.getClass()
    73							.getDeclaredField("awtAppClassName");
    74					awtAppClassNameField.setAccessible(true);
    75					awtAppClassNameField.set(xToolkit, startupWMClass);
    76					awtAppClassNameField.setAccessible(false);
    77				} catch (Exception e) {
    78					Logger.getLogger(SwingWMClass.class.getName())
    79							.log(Level.WARNING, e.getMessage(), e);
    80				}
    81			}
    82		}
    83	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/MANIFEST.MF.in
--------------------------------------------------------------------------------
     1	Manifest-Version: 1.0
     2	Created-By: @Java_VERSION_STRING@ (Oracle Corporation)
     3	Premain-Class: com.jarego.jayatana.Agent
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/java/meson.build
--------------------------------------------------------------------------------
     1	subdir('com/jarego/jayatana')
     2	
     3	jayatana_java_sources = files(
     4	  'com/jarego/jayatana/Feature.java',
     5	  'com/jarego/jayatana/FeatureManager.java',
     6	  'com/jarego/jayatana/FeatureWrapper.java',
     7	  'com/jarego/jayatana/basic/GMainLoop.java',
     8	  'com/jarego/jayatana/basic/GlobalMenuAdapter.java',
     9	  'com/jarego/jayatana/basic/GlobalMenu.java',
    10	  'com/jarego/jayatana/swing/SwingGlobalMenu.java',
    11	  'com/jarego/jayatana/swing/SwingGTKFixed.java',
    12	  'com/jarego/jayatana/swing/SwingWMClass.java',
    13	  'com/jarego/jayatana/swing/SwingGlobalMenuWindow.java'
    14	)
    15	jayatana_java_headers = files(
    16	  'com/jarego/jayatana/basic/GMainLoop.java',
    17	  'com/jarego/jayatana/basic/GlobalMenu.java',
    18	  'com/jarego/jayatana/Feature.java'
    19	)
    20	args = ['--add-exports', 'java.desktop/com.sun.java.swing.plaf.gtk=ALL-UNNAMED']
    21	java_install_path = join_paths(get_option('datadir'), 'java')
    22	
    23	jayatana_java = jar('jayatana', jayatana_java_sources, native_libraries,
    24	                        java_args : args,
    25	                        install: true,
    26	                        install_dir: java_install_path
    27	                       )
    28	
    29	jayatana_jni_hdr = java.native_headers(
    30	    jayatana_java_headers,
    31	    package: 'com.jarego.jayatana',
    32	    classes: ['GMainLoop', 'GlobalMenu']
    33	)
    34	
    35	jayatana_jni = declare_dependency(
    36	            sources: jayatana_jni_hdr
    37	)
    38	
    39	manifest = configure_file(
    40	                input: 'MANIFEST.MF.in',
    41	                output: 'MANIFEST.MF',
    42	                configuration: data)
    43	
    44	
    45	agent_java = jar('jayatanaag', agent,
    46	                        java_args : args,
    47	                        install: true,
    48	                        install_dir: java_install_path
    49	)
    50	
    51	# HACK: regenerate manifest after building a JAR file
    52	agent_manifest_patch = custom_target(
    53	                                  output: 'jayatanaag.timestamp',
    54	                                  command: ['jar', '-f', agent_java.full_path(), '-u', '-m', manifest, '-v'],
    55	                                  capture: true,
    56	                                  depends: agent_java,
    57	                                  build_by_default : true,
    58	                                  build_always_stale: true
    59	)--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/com_jarego_jayatana_Agent.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 *
    26	 * File:   com_jarego_jayatana_Agent.c
    27	 * Author: Jared Gonzalez
    28	 */
    29	#include <jvmti.h>
    30	#include <stdbool.h>
    31	#include <stdio.h>
    32	#include <stdlib.h>
    33	#include <string.h>
    34	#include <unistd.h>
    35	
    36	#include "com_jarego_jayatana_Agent.h"
    37	#include "config.h"
    38	
    39	#ifdef JAVA_VERSION
    40	#if JAVA_VERSION < 7
    41	extern void XInitThreads(void);
    42	#endif
    43	#endif
    44	
    45	/**
    46	 * Inicializar observadores de componentes para prevenir la integracion
    47	 * con Ubuntu/Linux.
    48	 */
    49	jvmtiError com_jarego_jayatana_Initialize(JavaVM *vm, int fromAgent);
    50	
    51	/**
    52	 * Validar el valor de una variable de ambiente para mas opciones o
    53	 * variables de configuracion.
    54	 */
    55	int com_jarego_jayatana_Agent_CheckEnv(const char *envname, const char *envval, const int def);
    56	
    57	/**
    58	 * Iniciar observador de inicio de hilos para prevenir la integracion
    59	 * con Ubuntu/Linux
    60	 */
    61	static void JNICALL com_jarego_jayatana_Agent_threadStart(jvmtiEnv *jvmti_env, JNIEnv *jni_env,
    62	                                                          jthread thread)
    63	{
    64		// recuperar informacion del hilo
    65		jvmtiError error;
    66		jvmtiThreadInfo info;
    67		error = (*jvmti_env)->GetThreadInfo(jvmti_env, thread, &info);
    68		if (error == JVMTI_ERROR_NONE)
    69		{
    70			// initialize XInitThreads to fix default on OpenJDK 6 for AWT threads
    71			// Or
    72			// Java 2D
    73			if (strcmp(info.name, "Java2D Disposer") == 0)
    74			{
    75	#ifdef JAVA_VERSION
    76	#if JAVA_VERSION < 7
    77				// Initialize X threads, only for OpenJDK 6
    78				char *version = 0;
    79				if ((*jvmti_env)
    80				        ->GetSystemProperty(jvmti_env,
    81				                            "java.vm.specification.version",
    82				                            &version) == JVMTI_ERROR_NONE)
    83				{
    84					if (strcmp(version, "1.0") == 0)
    85					{
    86						// TODO: Using openjdk6, when updating the object
    87						// splashScreen (splashScreen.update) the application dies.
    88						// There is a conflict when using XInitThread and pthread.
    89						// Error:
    90						// java: pthread_mutex_lock.c: 317:
    91						// __pthread_mutex_lock_full: The statement `(- (e)) = 3
    92						// || ! Robust 'is not met.
    93						XInitThreads();
    94					}
    95					(*jvmti_env)->Deallocate(jvmti_env, (unsigned char *)version);
    96				}
    97	#endif
    98	#endif
    99			}
   100			else if (strcmp(info.name, "AWT-XAWT") == 0)
   101			{
   102				// instala la clase para control de integracion Swing
   103				jclass clsInstallers =
   104				    (*jni_env)->FindClass(jni_env, "com/jarego/jayatana/FeatureManager");
   105				if (clsInstallers != NULL)
   106				{
   107					jmethodID midInstallForSwing =
   108					    (*jni_env)->GetStaticMethodID(jni_env,
   109					                                  clsInstallers,
   110					                                  "deployForSwing",
   111					                                  "()V");
   112					(*jni_env)->CallStaticVoidMethod(jni_env,
   113					                                 clsInstallers,
   114					                                 midInstallForSwing);
   115					(*jni_env)->DeleteLocalRef(jni_env, clsInstallers);
   116				}
   117				// una vez inicializada la prueba
   118				(*jvmti_env)
   119				    ->SetEventNotificationMode(jvmti_env,
   120				                               JVMTI_DISABLE,
   121				                               JVMTI_EVENT_THREAD_START,
   122				                               (jthread)NULL);
   123			}
   124		}
   125	}
   126	
   127	/**
   128	 * Cargar agente para integracion con Ubuntu/Linux
   129	 */
   130	JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved)
   131	{
   132		return com_jarego_jayatana_Initialize(vm, 1);
   133	}
   134	
   135	/**
   136	 * Carga libreria nativa desde agente Java para integracion
   137	 * con Ubuntu/Linux
   138	 */
   139	jint JNI_OnLoad(JavaVM *vm, void *reserved)
   140	{
   141		com_jarego_jayatana_Initialize(vm, 0);
   142		return JNI_VERSION_1_8;
   143	}
   144	
   145	/**
   146	 * Inicializar observadores de componentes para prevenir la integracion
   147	 * con Ubuntu/Linux.
   148	 */
   149	jvmtiError com_jarego_jayatana_Initialize(JavaVM *vm, int fromAgent)
   150	{
   151		// en caso de no exista una referencia a jayatana
   152		if (getenv("JAYATANA_CLASSPATH") == NULL && access(JAVADIR "/jayatana.jar", R_OK) != 0)
   153			return JVMTI_ERROR_NONE;
   154	
   155		// la libreria si existe iniciar procedo de validacion de integracion
   156		if (com_jarego_jayatana_Agent_CheckEnv("JAYATANA_FORCE", "1", true) ||
   157		    com_jarego_jayatana_Agent_CheckEnv("JAYATANA_FORCE", "true", true))
   158		{
   159			// inicializar entorno
   160			jvmtiEnv *jvmti_env;
   161			(*vm)->GetEnv(vm, (void **)&jvmti_env, JVMTI_VERSION);
   162	
   163			// recuperar version
   164			char *version = 0;
   165			if ((*jvmti_env)->GetSystemProperty(jvmti_env, "java.vm.version", &version) ==
   166			    JVMTI_ERROR_NONE)
   167			{
   168				// ignorar para versiones 1.4 y 1.5
   169				if (strncmp(version, "1.4", 3) != 0 && strncmp(version, "1.5", 3) != 0)
   170				{
   171					// activar capacidades
   172					jvmtiCapabilities capabilities;
   173					memset(&capabilities, 0, sizeof(jvmtiCapabilities));
   174					// capabilities.can_generate_method_exit_events = 1;
   175					(*jvmti_env)->AddCapabilities(jvmti_env, &capabilities);
   176	
   177					// registrar funciones de eventos
   178					jvmtiEventCallbacks callbacks;
   179					memset(&callbacks, 0, sizeof(jvmtiEventCallbacks));
   180					// callbacks.MethodExit = &com_jarego_jayatana_Agent_MethodExit;
   181					callbacks.ThreadStart = &com_jarego_jayatana_Agent_threadStart;
   182					(*jvmti_env)
   183					    ->SetEventCallbacks(jvmti_env,
   184					                        &callbacks,
   185					                        (jint)sizeof(jvmtiEventCallbacks));
   186	
   187					// habilitar gestor de eventos
   188					(*jvmti_env)
   189					    ->SetEventNotificationMode(jvmti_env,
   190					                               JVMTI_ENABLE,
   191					                               JVMTI_EVENT_THREAD_START,
   192					                               (jthread)NULL);
   193					//(*jvmti_env)->SetEventNotificationMode(jvmti_env,
   194					//		JVMTI_ENABLE, JVMTI_EVENT_METHOD_EXIT,
   195					//(jthread)NULL);
   196	
   197					// cargar ruta de clases jayatana
   198					if (getenv("JAYATANA_CLASSPATH") != NULL)
   199					{ // opcion para desarrollo
   200						(*jvmti_env)
   201						    ->AddToSystemClassLoaderSearch(
   202						        jvmti_env, getenv("JAYATANA_CLASSPATH"));
   203						fprintf(stderr,
   204						        "JAYATANA_CLASSPATH=%s\n",
   205						        getenv("JAYATANA_CLASSPATH"));
   206					}
   207					else
   208					{
   209						(*jvmti_env)
   210						    ->AddToSystemClassLoaderSearch(jvmti_env,
   211						                                   JAVADIR "/jayatana.jar");
   212					}
   213				}
   214	
   215				// liberar cadena de version
   216				(*jvmti_env)->Deallocate(jvmti_env, (unsigned char *)version);
   217			}
   218		}
   219		return JVMTI_ERROR_NONE;
   220	}
   221	
   222	/**
   223	 * Validar el valor de una variable de ambiente para mas opciones o
   224	 * variables de configuracion.
   225	 */
   226	int com_jarego_jayatana_Agent_CheckEnv(const char *envname, const char *envval, const int def)
   227	{
   228		if (getenv(envname) == NULL)
   229			return def;
   230		else if (strcmp(getenv(envname), envval) == 0)
   231			return true;
   232		else
   233			return false;
   234	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/com_jarego_jayatana_Agent.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 *
    26	 * File:   ayatana_Collections.c
    27	 * Author: Jared Gonzalez
    28	 */
    29	#ifndef COM_JAREGO_JAYATANA_AGENT_H_
    30	#define COM_JAREGO_JAYATANA_AGENT_H_
    31	
    32	#include <jni.h>
    33	
    34	/**
    35	 * Cargar agente para integracion con Ubuntu/Linux
    36	 */
    37	JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved);
    38	
    39	/**
    40	 * Carga libreria nativa desde agente Java para integracion
    41	 * con Ubuntu/Linux
    42	 */
    43	jint JNI_OnLoad(JavaVM *vm, void *reserved);
    44	
    45	#endif /* COM_JAREGO_JAYATANA_AGENT_H_ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/com_jarego_jayatana_basic_GlobalMenu.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 *
    26	 * File:   com_jarego_jayatana_basic_GlobalMenu.c
    27	 * Author: Jared Gonzalez
    28	 */
    29	#include "com_jarego_jayatana_basic_GlobalMenu.h"
    30	
    31	#include "com_jarego_jayatana_jkey2xkey.h"
    32	#include "com_jarego_jayatana_jni.h"
    33	#include "dbusmenu-definitions.h"
    34	#include "jayatana-window.h"
    35	#include <gio/gio.h>
    36	#include <glib.h>
    37	#include <jawt_md.h>
    38	#include <libdbusmenu-glib/server.h>
    39	#include <stdio.h>
    40	#include <stdlib.h>
    41	
    42	#define REGISTER_STATE_INITIAL 0
    43	#define REGISTER_STATE_REFRESH 1
    44	
    45	static int32_t id_stub = 100;
    46	
    47	/**
    48	 * Generate new instance of JAyatanaWindow
    49	 */
    50	GHashTable *JAyatanaWindows;
    51	
    52	/**
    53	 * Get the location of the window
    54	 */
    55	char *jayatana_get_windowxid_path(long xid);
    56	/**
    57	 * Destroy all the menus
    58	 */
    59	void jayatana_unparent_menuitem(gpointer data);
    60	/**
    61	 * Find a menu based on the id
    62	 */
    63	DbusmenuMenuitem *jayatana_find_menuid(DbusmenuMenuitem *parent, jint menuId);
    64	
    65	/**
    66	 * Initialize structures for GlobalMenu
    67	 */
    68	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_initialize(JNIEnv *env,
    69	                                                                            jclass thatclass)
    70	{
    71		JAyatanaWindows = g_hash_table_new_full(g_direct_hash,
    72		                                        g_direct_equal,
    73		                                        NULL,
    74		                                        (GDestroyNotify)jayatana_window_free);
    75	}
    76	/**
    77	 * Ends of the structures for GlobalMenu
    78	 */
    79	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_uninitialize(JNIEnv *env,
    80	                                                                              jclass thatclass)
    81	{
    82		// delete the instances that have been
    83		GHashTableIter iter;
    84		int *key;
    85		JAyatanaWindow *value;
    86		g_hash_table_iter_init(&iter, JAyatanaWindows);
    87		while (g_hash_table_iter_next(&iter, (void **)&key, (void **)&value))
    88		{
    89			(*env)->DeleteGlobalRef(env, value->globalThat);
    90			g_bus_unwatch_name(value->gBusWatcher);
    91			g_hash_table_iter_remove(&iter);
    92		}
    93	}
    94	
    95	/**
    96	 * Get the location of the window
    97	 */
    98	char *jayatana_get_windowxid_path(long xid)
    99	{
   100		char *xid_path;
   101		xid_path = (char *)malloc(sizeof(char *) * 50);
   102		sprintf(xid_path, "/com/canonical/menu/%lx", xid);
   103		return xid_path;
   104	}
   105	/**
   106	 * Destroy all the menus
   107	 */
   108	void jayatana_unparent_menuitem(gpointer data)
   109	{
   110		if (dbusmenu_menuitem_get_parent(DBUSMENU_MENUITEM(data)) != NULL)
   111			dbusmenu_menuitem_unparent(DBUSMENU_MENUITEM(data));
   112	}
   113	
   114	/**
   115	 * Find a menu based on the id
   116	 */
   117	DbusmenuMenuitem *jayatana_find_menuid(DbusmenuMenuitem *parent, jint menuId)
   118	{
   119		if (DBUSMENU_IS_MENUITEM(parent))
   120		{
   121			if (menuId == -1)
   122			{
   123				return parent;
   124			}
   125			if (dbusmenu_menuitem_property_exist(parent, "jayatana-menuid")
   126			        ? dbusmenu_menuitem_property_get_int(parent, "jayatana-menuid") == menuId
   127			        : 0)
   128			{
   129				return parent;
   130			}
   131			GList *itemscurr;
   132			GList *items = dbusmenu_menuitem_get_children(parent);
   133			DbusmenuMenuitem *item, *itemfound;
   134			for (itemscurr = items; itemscurr; itemscurr = itemscurr->next)
   135			{
   136				item      = (DbusmenuMenuitem *)itemscurr->data;
   137				itemfound = jayatana_find_menuid(item, menuId);
   138				if (itemfound != NULL)
   139					return itemfound;
   140			}
   141		}
   142		return NULL;
   143	}
   144	
   145	/**
   146	 * Set up accelerators on menu
   147	 */
   148	void jayatana_set_menuitem_shortcut(DbusmenuMenuitem *item, jint modifiers, jint keycode)
   149	{
   150		GVariantBuilder builder;
   151		g_variant_builder_init(&builder, G_VARIANT_TYPE_ARRAY);
   152		if ((modifiers & JK_SHIFT) == JK_SHIFT)
   153			g_variant_builder_add(&builder, "s", DBUSMENU_MENUITEM_SHORTCUT_SHIFT);
   154		if ((modifiers & JK_CTRL) == JK_CTRL)
   155			g_variant_builder_add(&builder, "s", DBUSMENU_MENUITEM_SHORTCUT_CONTROL);
   156		if ((modifiers & JK_ALT) == JK_ALT)
   157			g_variant_builder_add(&builder, "s", DBUSMENU_MENUITEM_SHORTCUT_ALT);
   158		const char *keystring = jkeycode_to_xkey(keycode);
   159		g_variant_builder_add(&builder, "s", keystring);
   160		GVariant *inside = g_variant_builder_end(&builder);
   161		g_variant_builder_init(&builder, G_VARIANT_TYPE_ARRAY);
   162		g_variant_builder_add_value(&builder, inside);
   163		GVariant *outsidevariant = g_variant_builder_end(&builder);
   164		dbusmenu_menuitem_property_set_variant(item,
   165		                                       DBUSMENU_MENUITEM_PROP_SHORTCUT,
   166		                                       outsidevariant);
   167	}
   168	
   169	/**
   170	 * Obtain identify X of a window, AWT
   171	 */
   172	JNIEXPORT jlong JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_getWindowXID(JNIEnv *env,
   173	                                                                               jclass thatclass,
   174	                                                                               jobject window)
   175	{
   176		JAWT awt;
   177		JAWT_DrawingSurface *ds;
   178		JAWT_DrawingSurfaceInfo *dsi;
   179		JAWT_X11DrawingSurfaceInfo *dsi_x11;
   180		jint dsLock;
   181		Drawable drawable = -1l;
   182		awt.version       = JAWT_VERSION_1_4;
   183		if (JAWT_GetAWT(env, &awt) != 0)
   184		{
   185			ds = awt.GetDrawingSurface(env, window);
   186			if (ds != NULL)
   187			{
   188				dsLock = ds->Lock(ds);
   189				if ((dsLock & JAWT_LOCK_ERROR) == 0)
   190				{
   191					dsi      = ds->GetDrawingSurfaceInfo(ds);
   192					dsi_x11  = (JAWT_X11DrawingSurfaceInfo *)dsi->platformInfo;
   193					drawable = dsi_x11->drawable;
   194					ds->FreeDrawingSurfaceInfo(dsi);
   195					ds->Unlock(ds);
   196				}
   197			}
   198			awt.FreeDrawingSurface(ds);
   199		}
   200		return (long)drawable;
   201	}
   202	
   203	/**
   204	 * Notification of bus available for global menu
   205	 */
   206	void jayatana_on_registrar_available(GDBusConnection *connection, const char *name,
   207	                                     const char *name_owner, gpointer user_data)
   208	{
   209		// retrieve the controller
   210		JAyatanaWindow *globalmenu_window = (JAyatanaWindow *)user_data;
   211		if (!globalmenu_window->gdBusProxyRegistered)
   212		{
   213			// generate menus
   214			globalmenu_window->windowXIDPath =
   215			    jayatana_get_windowxid_path(globalmenu_window->windowXID);
   216			globalmenu_window->dbusMenuServer =
   217			    dbusmenu_server_new(globalmenu_window->windowXIDPath);
   218			globalmenu_window->dbusMenuRoot = dbusmenu_menuitem_new_with_id(0); // Root ID is 0
   219			                                                                    // always.
   220			dbusmenu_server_set_root(globalmenu_window->dbusMenuServer,
   221			                         globalmenu_window->dbusMenuRoot);
   222			// register bus
   223			globalmenu_window->dbBusProxy =
   224			    g_dbus_proxy_new_for_bus_sync(G_BUS_TYPE_SESSION,
   225			                                  G_DBUS_PROXY_FLAGS_NONE,
   226			                                  NULL,
   227			                                  "com.canonical.AppMenu.Registrar",
   228			                                  "/com/canonical/AppMenu/Registrar",
   229			                                  "com.canonical.AppMenu.Registrar",
   230			                                  NULL,
   231			                                  NULL);
   232			globalmenu_window->dbBusProxyCallSync =
   233			    g_dbus_proxy_call_sync(globalmenu_window->dbBusProxy,
   234			                           "RegisterWindow",
   235			                           g_variant_new("(uo)",
   236			                                         (guint32)globalmenu_window->windowXID,
   237			                                         globalmenu_window->windowXIDPath),
   238			                           G_DBUS_CALL_FLAGS_NONE,
   239			                           -1,
   240			                           NULL,
   241			                           NULL);
   242			jint register_state = globalmenu_window->registerState;
   243			if (globalmenu_window->registerState == REGISTER_STATE_REFRESH)
   244				globalmenu_window->registerState = REGISTER_STATE_INITIAL;
   245			// notify java class about integration
   246			JNIEnv *env = NULL;
   247			(*jayatana_jvm)->AttachCurrentThread(jayatana_jvm, (void **)&env, NULL);
   248			jclass thatclass = (*env)->GetObjectClass(env, globalmenu_window->globalThat);
   249			jmethodID mid    = (*env)->GetMethodID(env, thatclass, "register", "(I)V");
   250			(*env)->CallVoidMethod(env, globalmenu_window->globalThat, mid, register_state);
   251			(*env)->DeleteLocalRef(env, thatclass);
   252			(*jayatana_jvm)->DetachCurrentThread(jayatana_jvm);
   253			// mark as installed
   254			globalmenu_window->gdBusProxyRegistered = true;
   255		}
   256	}
   257	
   258	/**
   259	 * Notification of bus is not available for global menu
   260	 */
   261	void jayatana_on_registrar_unavailable(GDBusConnection *connection, const char *name,
   262	                                       gpointer user_data)
   263	{
   264		// retrieve the controller
   265		JAyatanaWindow *globalmenu_window = (JAyatanaWindow *)user_data;
   266		if (globalmenu_window != NULL)
   267		{
   268			if (globalmenu_window->gdBusProxyRegistered)
   269			{
   270				// notify java about deregistration
   271				JNIEnv *env = NULL;
   272				(*jayatana_jvm)->AttachCurrentThread(jayatana_jvm, (void **)&env, NULL);
   273				jclass thatclass =
   274				    (*env)->GetObjectClass(env, globalmenu_window->globalThat);
   275				jmethodID mid = (*env)->GetMethodID(env, thatclass, "unregister", "()V");
   276				(*env)->CallVoidMethod(env, globalmenu_window->globalThat, mid);
   277				(*env)->DeleteLocalRef(env, thatclass);
   278				(*jayatana_jvm)->DetachCurrentThread(jayatana_jvm);
   279				// free menus
   280				g_object_unref(G_OBJECT(globalmenu_window->dbusMenuRoot));
   281				g_object_unref(G_OBJECT(globalmenu_window->dbusMenuServer));
   282				g_variant_unref(globalmenu_window->dbBusProxyCallSync);
   283				g_object_unref(G_OBJECT(globalmenu_window->dbBusProxy));
   284				// free window path
   285				g_free(globalmenu_window->windowXIDPath);
   286				// mark as unregistered
   287				globalmenu_window->gdBusProxyRegistered = false;
   288			}
   289		}
   290	}
   291	
   292	/**
   293	 * Register a control bus for global menu
   294	 */
   295	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_registerWatcher(JNIEnv *env,
   296	                                                                                 jobject that,
   297	                                                                                 jlong windowXID)
   298	{
   299		// generar el controlador
   300		JAyatanaWindow *globalmenu_window       = jayatana_window_new();
   301		globalmenu_window->windowXID            = windowXID;
   302		globalmenu_window->globalThat           = (*env)->NewGlobalRef(env, that);
   303		globalmenu_window->gdBusProxyRegistered = false;
   304		globalmenu_window->registerState        = REGISTER_STATE_INITIAL;
   305		g_hash_table_insert(JAyatanaWindows, GUINT_TO_POINTER(windowXID), globalmenu_window);
   306		// iniciar bus para menu global
   307		globalmenu_window->gBusWatcher = g_bus_watch_name(G_BUS_TYPE_SESSION,
   308		                                                  "com.canonical.AppMenu.Registrar",
   309		                                                  G_BUS_NAME_WATCHER_FLAGS_NONE,
   310		                                                  jayatana_on_registrar_available,
   311		                                                  jayatana_on_registrar_unavailable,
   312		                                                  globalmenu_window,
   313		                                                  NULL);
   314	}
   315	
   316	/**
   317	 * Deregistrar un control de bus para menu global
   318	 */
   319	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_unregisterWatcher(JNIEnv *env,
   320	                                                                                   jobject that,
   321	                                                                                   jlong windowXID)
   322	{
   323		if (JAyatanaWindows != NULL)
   324		{
   325			// recuperar el controlador
   326			JAyatanaWindow *globalmenu_window =
   327			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   328			                                          GUINT_TO_POINTER(windowXID));
   329			g_hash_table_steal(JAyatanaWindows, GUINT_TO_POINTER(windowXID));
   330			if (globalmenu_window != NULL)
   331			{
   332				if (globalmenu_window->gdBusProxyRegistered)
   333				{
   334					// notificar a clase java
   335					jclass thatclass = (*env)->GetObjectClass(env, that);
   336					jmethodID mid =
   337					    (*env)->GetMethodID(env, thatclass, "unregister", "()V");
   338					(*env)->CallVoidMethod(env, that, mid);
   339					(*env)->DeleteLocalRef(env, thatclass);
   340				}
   341				(*env)->DeleteGlobalRef(env, globalmenu_window->globalThat);
   342				g_bus_unwatch_name(globalmenu_window->gBusWatcher);
   343				jayatana_window_free(globalmenu_window);
   344			}
   345		}
   346	}
   347	
   348	/**
   349	 * Actualiza el bus para menus en caso de una recontruccion de menus
   350	 */
   351	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_refreshWatcher(JNIEnv *env,
   352	                                                                                jobject that,
   353	                                                                                jlong windowXID)
   354	{
   355		if (JAyatanaWindows != NULL)
   356		{
   357			// recuperar el controlador
   358			JAyatanaWindow *globalmenu_window =
   359			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   360			                                          GUINT_TO_POINTER(windowXID));
   361			if (globalmenu_window != NULL)
   362			{
   363				if (globalmenu_window->gdBusProxyRegistered)
   364				{
   365					// liberar menus
   366					// TODO: La liberacion periva de los menus genera un crash en la
   367					// aplicacion
   368					// al momento de recontruir los menus, revisar posibles fugas de
   369					// memoria.
   370					// g_list_free_full(dbusmenu_menuitem_take_children(globalmenu_window->dbusMenuRoot),
   371					//		jayatana_destroy_menuitem);
   372					g_object_unref(G_OBJECT(globalmenu_window->dbusMenuRoot));
   373					g_object_unref(G_OBJECT(globalmenu_window->dbusMenuServer));
   374					// liberar bus
   375					g_variant_unref(globalmenu_window->dbBusProxyCallSync);
   376					g_object_unref(G_OBJECT(globalmenu_window->dbBusProxy));
   377					// liberar ruta de ventana
   378					free(globalmenu_window->windowXIDPath);
   379				}
   380	
   381				// liberar unwatch
   382				g_bus_unwatch_name(globalmenu_window->gBusWatcher);
   383				// inicializa variables
   384				globalmenu_window->gdBusProxyRegistered = false;
   385				globalmenu_window->registerState        = REGISTER_STATE_REFRESH;
   386				// iniciar bus para menu global
   387				globalmenu_window->gBusWatcher =
   388				    g_bus_watch_name(G_BUS_TYPE_SESSION,
   389				                     "com.canonical.AppMenu.Registrar",
   390				                     G_BUS_NAME_WATCHER_FLAGS_NONE,
   391				                     jayatana_on_registrar_available,
   392				                     jayatana_on_registrar_unavailable,
   393				                     globalmenu_window,
   394				                     NULL);
   395			}
   396		}
   397	}
   398	
   399	/**
   400	 * Invoar generacion el momento de presionar la expancion del menu
   401	 */
   402	void jayatana_item_about_to_show(DbusmenuMenuitem *item)
   403	{
   404		if (JAyatanaWindows != NULL)
   405		{
   406			// recuperar el controlador
   407			uint lookup_code = g_variant_get_int64(
   408			    dbusmenu_menuitem_property_get_variant(item, "jayatana-windowxid"));
   409			JAyatanaWindow *globalmenu_window =
   410			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   411			                                          GUINT_TO_POINTER(lookup_code));
   412			;
   413			if (globalmenu_window != NULL)
   414			{
   415				// inicializar menu
   416				g_list_free_full(dbusmenu_menuitem_take_children(item),
   417				                 jayatana_unparent_menuitem);
   418				// invocar generacion de menus
   419				JNIEnv *env = NULL;
   420				(*jayatana_jvm)->AttachCurrentThread(jayatana_jvm, (void **)&env, NULL);
   421				jclass thatclass =
   422				    (*env)->GetObjectClass(env, globalmenu_window->globalThat);
   423				jmethodID mid =
   424				    (*env)->GetMethodID(env, thatclass, "menuAboutToShow", "(II)V");
   425				(*env)->CallVoidMethod(
   426				    env,
   427				    globalmenu_window->globalThat,
   428				    mid,
   429				    dbusmenu_menuitem_property_get_int(item, "jayatana-parent-menuid"),
   430				    dbusmenu_menuitem_property_get_int(item, "jayatana-menuid"));
   431				(*env)->DeleteLocalRef(env, thatclass);
   432				(*jayatana_jvm)->DetachCurrentThread(jayatana_jvm);
   433				// marcar como atendido
   434				dbusmenu_menuitem_property_set_bool(item, "jayatana-need-open", false);
   435				jayatana_window_remove_unparented(globalmenu_window);
   436			}
   437		}
   438	}
   439	
   440	/**
   441	 * Invocar generacion de menus desde HUD y cerrado de menus
   442	 */
   443	void jayatana_item_events(DbusmenuMenuitem *item, const char *event)
   444	{
   445		if (JAyatanaWindows != NULL)
   446		{
   447			// recuperar el controlador
   448			uint lookup_code = g_variant_get_int64(
   449			    dbusmenu_menuitem_property_get_variant(item, "jayatana-windowxid"));
   450			JAyatanaWindow *globalmenu_window =
   451			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   452			                                          GUINT_TO_POINTER(lookup_code));
   453			if (globalmenu_window != NULL)
   454			{
   455				if (strcmp(DBUSMENU_MENUITEM_EVENT_OPENED, event) == 0 &&
   456				    dbusmenu_menuitem_property_get_bool(item, "jayatana-need-open"))
   457				{
   458					// inicializar menu
   459					g_list_free_full(dbusmenu_menuitem_take_children(item),
   460					                 jayatana_unparent_menuitem);
   461					// invocar generacion de menus
   462					JNIEnv *env = NULL;
   463					(*jayatana_jvm)
   464					    ->AttachCurrentThread(jayatana_jvm, (void **)&env, NULL);
   465					jclass thatclass =
   466					    (*env)->GetObjectClass(env, globalmenu_window->globalThat);
   467					jmethodID mid =
   468					    (*env)->GetMethodID(env, thatclass, "menuAboutToShow", "(II)V");
   469					(*env)->CallVoidMethod(
   470					    env,
   471					    globalmenu_window->globalThat,
   472					    mid,
   473					    dbusmenu_menuitem_property_get_int(item,
   474					                                       "jayatana-parent-menuid"),
   475					    dbusmenu_menuitem_property_get_int(item, "jayatana-menuid"));
   476					(*env)->DeleteLocalRef(env, thatclass);
   477					(*jayatana_jvm)->DetachCurrentThread(jayatana_jvm);
   478					// marcar como atendido
   479					dbusmenu_menuitem_property_set_bool(item,
   480					                                    "jayatana-need-open",
   481					                                    false);
   482					jayatana_window_remove_unparented(globalmenu_window);
   483				}
   484				else if (strcmp(DBUSMENU_MENUITEM_EVENT_CLOSED, event) == 0)
   485				{
   486					// invocar cerrado de menu
   487					JNIEnv *env = NULL;
   488					(*jayatana_jvm)
   489					    ->AttachCurrentThread(jayatana_jvm, (void **)&env, NULL);
   490					jclass thatclass =
   491					    (*env)->GetObjectClass(env, globalmenu_window->globalThat);
   492					jmethodID mid =
   493					    (*env)->GetMethodID(env, thatclass, "menuAfterClose", "(II)V");
   494					(*env)->CallVoidMethod(
   495					    env,
   496					    globalmenu_window->globalThat,
   497					    mid,
   498					    dbusmenu_menuitem_property_get_int(item,
   499					                                       "jayatana-parent-menuid"),
   500					    dbusmenu_menuitem_property_get_int(item, "jayatana-menuid"));
   501					(*env)->DeleteLocalRef(env, thatclass);
   502					(*jayatana_jvm)->DetachCurrentThread(jayatana_jvm);
   503					// marcar como pendiente de atencion
   504					dbusmenu_menuitem_property_set_bool(item,
   505					                                    "jayatana-need-open",
   506					                                    true);
   507				}
   508			}
   509		}
   510	}
   511	
   512	/**
   513	 * Invokar activacion de menu
   514	 */
   515	void jayatana_item_activated(DbusmenuMenuitem *item, guint timestamp, gpointer user_data)
   516	{
   517		if (JAyatanaWindows != NULL)
   518		{
   519			// recuperar el controlador
   520			uint lookup_code = g_variant_get_int64(
   521			    dbusmenu_menuitem_property_get_variant(item, "jayatana-windowxid"));
   522			JAyatanaWindow *globalmenu_window =
   523			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   524			                                          GUINT_TO_POINTER(lookup_code));
   525			if (globalmenu_window != NULL)
   526			{
   527				// invocar hacia java
   528				JNIEnv *env = NULL;
   529				(*jayatana_jvm)->AttachCurrentThread(jayatana_jvm, (void **)&env, NULL);
   530				jclass thatclass =
   531				    (*env)->GetObjectClass(env, globalmenu_window->globalThat);
   532				jmethodID mid =
   533				    (*env)->GetMethodID(env, thatclass, "menuActivated", "(II)V");
   534				(*env)->CallVoidMethod(
   535				    env,
   536				    globalmenu_window->globalThat,
   537				    mid,
   538				    dbusmenu_menuitem_property_get_int(item, "jayatana-parent-menuid"),
   539				    dbusmenu_menuitem_property_get_int(item, "jayatana-menuid"));
   540				(*env)->DeleteLocalRef(env, thatclass);
   541				(*jayatana_jvm)->DetachCurrentThread(jayatana_jvm);
   542			}
   543		}
   544	}
   545	
   546	/**
   547	 * Agregar un nuevo menu
   548	 */
   549	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_addMenu(
   550	    JNIEnv *env, jobject that, jlong windowXID, jint menuParentID, jint menuID, jstring label,
   551	    jboolean enabled, jboolean visible)
   552	{
   553		// recuperar controlador
   554		if (JAyatanaWindows != NULL)
   555		{
   556			JAyatanaWindow *globalmenu_window =
   557			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   558			                                          GUINT_TO_POINTER(windowXID));
   559			if (globalmenu_window != NULL)
   560			{
   561				DbusmenuMenuitem *parent =
   562				    jayatana_find_menuid(globalmenu_window->dbusMenuRoot, menuParentID);
   563				if (parent != NULL)
   564				{
   565					// obtener etiqueta del menu
   566					const char *cclabel = (*env)->GetStringUTFChars(env, label, 0);
   567					// generar menu
   568					DbusmenuMenuitem *item =
   569					    jayatana_window_get_dbusmenu_item(globalmenu_window,
   570					                                      menuID,
   571					                                      cclabel);
   572					dbusmenu_menuitem_property_set(item,
   573					                               DBUSMENU_MENUITEM_PROP_LABEL,
   574					                               cclabel);
   575					dbusmenu_menuitem_property_set(
   576					    item,
   577					    DBUSMENU_MENUITEM_PROP_CHILD_DISPLAY,
   578					    DBUSMENU_MENUITEM_CHILD_DISPLAY_SUBMENU);
   579					dbusmenu_menuitem_property_set_int(item,
   580					                                   "jayatana-parent-menuid",
   581					                                   menuParentID);
   582					dbusmenu_menuitem_property_set_int(item, "jayatana-menuid", menuID);
   583					dbusmenu_menuitem_property_set_bool(item,
   584					                                    "jayatana-need-open",
   585					                                    true);
   586					dbusmenu_menuitem_property_set_variant(item,
   587					                                       "jayatana-windowxid",
   588					                                       g_variant_new_int64(
   589					                                           globalmenu_window
   590					                                               ->windowXID));
   591					dbusmenu_menuitem_property_set_bool(item,
   592					                                    DBUSMENU_MENUITEM_PROP_ENABLED,
   593					                                    (gboolean)enabled);
   594					dbusmenu_menuitem_property_set_bool(item,
   595					                                    DBUSMENU_MENUITEM_PROP_VISIBLE,
   596					                                    (gboolean)visible);
   597	
   598					g_signal_connect(G_OBJECT(item),
   599					                 DBUSMENU_MENUITEM_SIGNAL_EVENT,
   600					                 G_CALLBACK(jayatana_item_events),
   601					                 NULL);
   602					g_signal_connect(G_OBJECT(item),
   603					                 DBUSMENU_MENUITEM_SIGNAL_ABOUT_TO_SHOW,
   604					                 G_CALLBACK(jayatana_item_about_to_show),
   605					                 NULL);
   606					gint id = id_stub++; // We really need to
   607					                     // find a better way to
   608					                     // generate ID;
   609					char *label = g_strdup_printf("-jayatana-private: %d", id);
   610					DbusmenuMenuitem *foo =
   611					    jayatana_window_get_dbusmenu_item(globalmenu_window, -1, label);
   612					g_free(label);
   613					dbusmenu_menuitem_property_set(foo,
   614					                               DBUSMENU_MENUITEM_PROP_LABEL,
   615					                               "");
   616					dbusmenu_menuitem_child_append(item, foo);
   617	
   618					dbusmenu_menuitem_child_append(parent, item);
   619					// liberar etiqueta
   620					(*env)->ReleaseStringUTFChars(env, NULL, cclabel);
   621				}
   622			}
   623		}
   624	}
   625	
   626	/**
   627	 * Agregar un nuevo elemento de menu
   628	 */
   629	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_addMenuItem(
   630	    JNIEnv *env, jobject that, jlong windowXID, jint menuParentID, jint menuID, jstring label,
   631	    jboolean enabled, jint modifiers, jint keycode)
   632	{
   633		if (JAyatanaWindows != NULL)
   634		{
   635			// recuperar controlador
   636			JAyatanaWindow *globalmenu_window =
   637			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   638			                                          GUINT_TO_POINTER(windowXID));
   639			if (globalmenu_window != NULL)
   640			{
   641				// obtener etiqueta del menu
   642				const char *cclabel = (*env)->GetStringUTFChars(env, label, 0);
   643				// generar menu
   644				DbusmenuMenuitem *item =
   645				    menuID > 0 ? jayatana_window_get_dbusmenu_item(globalmenu_window,
   646				                                                   menuID,
   647				                                                   cclabel)
   648				               : dbusmenu_menuitem_new();
   649				dbusmenu_menuitem_property_set(item, DBUSMENU_MENUITEM_PROP_LABEL, cclabel);
   650				dbusmenu_menuitem_property_set_bool(item,
   651				                                    DBUSMENU_MENUITEM_PROP_ENABLED,
   652				                                    (gboolean)enabled);
   653				dbusmenu_menuitem_property_set_int(item,
   654				                                   "jayatana-parent-menuid",
   655				                                   menuParentID);
   656				dbusmenu_menuitem_property_set_int(item, "jayatana-menuid", menuID);
   657				dbusmenu_menuitem_property_set_variant(item,
   658				                                       "jayatana-windowxid",
   659				                                       g_variant_new_int64(
   660				                                           globalmenu_window->windowXID));
   661				if (modifiers > -1 && keycode > -1)
   662					jayatana_set_menuitem_shortcut(item, modifiers, keycode);
   663				g_signal_connect(G_OBJECT(item),
   664				                 DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED,
   665				                 G_CALLBACK(jayatana_item_activated),
   666				                 NULL);
   667				DbusmenuMenuitem *parent =
   668				    jayatana_find_menuid(globalmenu_window->dbusMenuRoot, menuParentID);
   669				if (parent != NULL)
   670					dbusmenu_menuitem_child_append(parent, item);
   671				// liberar etiqueta
   672				(*env)->ReleaseStringUTFChars(env, label, cclabel);
   673			}
   674		}
   675	}
   676	
   677	/**
   678	 * Agregar un nuevo elemento de menu tipo radio
   679	 */
   680	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_addMenuItemRadio(
   681	    JNIEnv *env, jobject that, jlong windowXID, jint menuParentID, jint menuID, jstring label,
   682	    jboolean enabled, jint modifiers, jint keycode, jboolean selected)
   683	{
   684		if (JAyatanaWindows != NULL)
   685		{
   686			// recuperar controlador
   687			JAyatanaWindow *globalmenu_window =
   688			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   689			                                          GUINT_TO_POINTER(windowXID));
   690			if (globalmenu_window != NULL)
   691			{
   692				// obtener etiqueta del menu
   693				const char *cclabel = (*env)->GetStringUTFChars(env, label, 0);
   694				// generar menu
   695				DbusmenuMenuitem *item =
   696				    jayatana_window_get_dbusmenu_item(globalmenu_window, menuID, cclabel);
   697				dbusmenu_menuitem_property_set(item, DBUSMENU_MENUITEM_PROP_LABEL, cclabel);
   698				dbusmenu_menuitem_property_set_bool(item,
   699				                                    DBUSMENU_MENUITEM_PROP_ENABLED,
   700				                                    (gboolean)enabled);
   701				dbusmenu_menuitem_property_set_int(item,
   702				                                   "jayatana-parent-menuid",
   703				                                   menuParentID);
   704				dbusmenu_menuitem_property_set_int(item, "jayatana-menuid", menuID);
   705				dbusmenu_menuitem_property_set_variant(item,
   706				                                       "jayatana-windowxid",
   707				                                       g_variant_new_int64(
   708				                                           globalmenu_window->windowXID));
   709				if (modifiers > -1 && keycode > -1)
   710					jayatana_set_menuitem_shortcut(item, modifiers, keycode);
   711				dbusmenu_menuitem_property_set(item,
   712				                               DBUSMENU_MENUITEM_PROP_TOGGLE_TYPE,
   713				                               DBUSMENU_MENUITEM_TOGGLE_RADIO);
   714				dbusmenu_menuitem_property_set_int(
   715				    item,
   716				    DBUSMENU_MENUITEM_PROP_TOGGLE_STATE,
   717				    selected ? DBUSMENU_MENUITEM_TOGGLE_STATE_CHECKED
   718				             : DBUSMENU_MENUITEM_TOGGLE_STATE_UNCHECKED);
   719				g_signal_connect(G_OBJECT(item),
   720				                 DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED,
   721				                 G_CALLBACK(jayatana_item_activated),
   722				                 NULL);
   723				DbusmenuMenuitem *parent =
   724				    jayatana_find_menuid(globalmenu_window->dbusMenuRoot, menuParentID);
   725				if (parent != NULL)
   726					dbusmenu_menuitem_child_append(parent, item);
   727				// liberar etiqueta
   728				(*env)->ReleaseStringUTFChars(env, label, cclabel);
   729			}
   730		}
   731	}
   732	
   733	/**
   734	 * Agregar un nuevo elemento de menu tipo verificacion
   735	 */
   736	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_addMenuItemCheck(
   737	    JNIEnv *env, jobject that, jlong windowXID, jint menuParentID, jint menuID, jstring label,
   738	    jboolean enabled, jint modifiers, jint keycode, jboolean selected)
   739	{
   740		if (JAyatanaWindows != NULL)
   741		{
   742			// recuperar controlador
   743			JAyatanaWindow *globalmenu_window =
   744			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   745			                                          GUINT_TO_POINTER(windowXID));
   746			if (globalmenu_window != NULL)
   747			{
   748				// obtener etiqueta del menu
   749				const char *cclabel = (*env)->GetStringUTFChars(env, label, 0);
   750				// generar menu
   751				DbusmenuMenuitem *item =
   752				    jayatana_window_get_dbusmenu_item(globalmenu_window, menuID, cclabel);
   753				dbusmenu_menuitem_property_set(item, DBUSMENU_MENUITEM_PROP_LABEL, cclabel);
   754				dbusmenu_menuitem_property_set_bool(item,
   755				                                    DBUSMENU_MENUITEM_PROP_ENABLED,
   756				                                    (gboolean)enabled);
   757				dbusmenu_menuitem_property_set_int(item,
   758				                                   "jayatana-parent-menuid",
   759				                                   menuParentID);
   760				dbusmenu_menuitem_property_set_int(item, "jayatana-menuid", menuID);
   761				dbusmenu_menuitem_property_set_variant(item,
   762				                                       "jayatana-windowxid",
   763				                                       g_variant_new_int64(
   764				                                           globalmenu_window->windowXID));
   765				if (modifiers > -1 && keycode > -1)
   766					jayatana_set_menuitem_shortcut(item, modifiers, keycode);
   767				dbusmenu_menuitem_property_set(item,
   768				                               DBUSMENU_MENUITEM_PROP_TOGGLE_TYPE,
   769				                               DBUSMENU_MENUITEM_TOGGLE_CHECK);
   770				dbusmenu_menuitem_property_set_int(
   771				    item,
   772				    DBUSMENU_MENUITEM_PROP_TOGGLE_STATE,
   773				    selected ? DBUSMENU_MENUITEM_TOGGLE_STATE_CHECKED
   774				             : DBUSMENU_MENUITEM_TOGGLE_STATE_UNCHECKED);
   775				g_signal_connect(G_OBJECT(item),
   776				                 DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED,
   777				                 G_CALLBACK(jayatana_item_activated),
   778				                 NULL);
   779				DbusmenuMenuitem *parent =
   780				    jayatana_find_menuid(globalmenu_window->dbusMenuRoot, menuParentID);
   781				if (parent != NULL)
   782					dbusmenu_menuitem_child_append(parent, item);
   783				// liberar etiqueta
   784				(*env)->ReleaseStringUTFChars(env, label, cclabel);
   785			}
   786		}
   787	}
   788	
   789	/**
   790	 * Agregar un elemento de menu de separador
   791	 */
   792	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_addSeparator(JNIEnv *env,
   793	                                                                              jobject that,
   794	                                                                              jlong windowXID,
   795	                                                                              jint menuParentID)
   796	{
   797		if (JAyatanaWindows != NULL)
   798		{
   799			// recuperar controlador
   800			JAyatanaWindow *globalmenu_window =
   801			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   802			                                          GUINT_TO_POINTER(windowXID));
   803			if (globalmenu_window != NULL)
   804			{
   805				// generar separador
   806				gint id = id_stub++; // We really need to find a better
   807				                     // way to generate ID;
   808				char *label = g_strdup_printf("-jayatana-private: %d", id);
   809				DbusmenuMenuitem *item =
   810				    jayatana_window_get_dbusmenu_item(globalmenu_window, -1, label);
   811				g_free(label);
   812				dbusmenu_menuitem_property_set(item,
   813				                               DBUSMENU_MENUITEM_PROP_TYPE,
   814				                               DBUS_MENU_SERVER_TYPE_SEPARATOR);
   815				DbusmenuMenuitem *parent =
   816				    jayatana_find_menuid(globalmenu_window->dbusMenuRoot, menuParentID);
   817				if (parent != NULL)
   818					dbusmenu_menuitem_child_append(parent, item);
   819			}
   820		}
   821	}
   822	
   823	/**
   824	 * Actualizar visibilidad, accesibilidad y etiqueta de menu
   825	 */
   826	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GlobalMenu_updateMenu(
   827	    JNIEnv *env, jobject that, jlong windowXID, jint menuID, jstring label, jboolean enabled,
   828	    jboolean visible)
   829	{
   830		if (JAyatanaWindows != NULL)
   831		{
   832			JAyatanaWindow *globalmenu_window =
   833			    (JAyatanaWindow *)g_hash_table_lookup(JAyatanaWindows,
   834			                                          GUINT_TO_POINTER(windowXID));
   835			if (globalmenu_window != NULL)
   836			{
   837				DbusmenuMenuitem *item =
   838				    jayatana_find_menuid(globalmenu_window->dbusMenuRoot, menuID);
   839				if (item != NULL)
   840				{
   841					// actualizar menu
   842					const char *cclabel = (*env)->GetStringUTFChars(env, label, 0);
   843					dbusmenu_menuitem_property_set(item,
   844					                               DBUSMENU_MENUITEM_PROP_LABEL,
   845					                               cclabel);
   846					dbusmenu_menuitem_property_set_bool(item,
   847					                                    DBUSMENU_MENUITEM_PROP_ENABLED,
   848					                                    (gboolean)enabled);
   849					dbusmenu_menuitem_property_set_bool(item,
   850					                                    DBUSMENU_MENUITEM_PROP_VISIBLE,
   851					                                    (gboolean)visible);
   852					// liberar etiqueta
   853					(*env)->ReleaseStringUTFChars(env, label, cclabel);
   854				}
   855			}
   856		}
   857	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/com_jarego_jayatana_basic_GMainLoop.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 *
    26	 * File:   com_jarego_jayatana_basic_GMainLoop.c
    27	 * Author: Jared Gonzalez
    28	 */
    29	#include "com_jarego_jayatana_basic_GMainLoop.h"
    30	
    31	#include <gio/gio.h>
    32	#include <glib.h>
    33	#include <pthread.h>
    34	#include <stdio.h>
    35	
    36	/**
    37	 * GMainLoop para comunicacion con glib/dbus
    38	 */
    39	GMainLoop *com_jarego_jayatana_gmainloop = NULL;
    40	
    41	/**
    42	 * Hilo que mantiene en ejecucion un GMainLoop
    43	 */
    44	gpointer com_jarego_jayatana_gmainloop_thread(gpointer data)
    45	{
    46		// ejecutar GMainLoop
    47		com_jarego_jayatana_gmainloop = g_main_loop_new(NULL, FALSE);
    48		g_main_loop_run(com_jarego_jayatana_gmainloop);
    49		return NULL;
    50	}
    51	
    52	/**
    53	 * Iniciar un GMainLoop para comunicacion con glib/dbus al iniciar el programa
    54	 */
    55	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GMainLoop_installGMainLoop(JNIEnv *env,
    56	                                                                                 jclass jclass)
    57	{
    58		// lanza el hilo para el GMainLoop
    59		g_thread_new("jayatana_gmainloop", com_jarego_jayatana_gmainloop_thread, NULL);
    60	}
    61	
    62	/**
    63	 * Detener un GMainLoop para comunicacion con glib/dbus el finalizar el programa
    64	 */
    65	JNIEXPORT void JNICALL Java_com_jarego_jayatana_basic_GMainLoop_uninstallGMainLoop(JNIEnv *env,
    66	                                                                                   jclass jclass)
    67	{
    68		// detiene el GMainLoop
    69		g_main_loop_quit(com_jarego_jayatana_gmainloop);
    70	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/com_jarego_jayatana_jkey2xkey.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 *
    26	 * File:   com_jarego_jayatana_jkey2xkey.c
    27	 * Author: Jared Gonzalez
    28	 */
    29	#include "com_jarego_jayatana_jkey2xkey.h"
    30	
    31	#include <stdlib.h>
    32	#include <string.h>
    33	#include <xkbcommon/xkbcommon.h>
    34	/**
    35	 * Convertir acelerador de menu Java aun acelerador X
    36	 */
    37	int jkeycode_to_xkey_map(int keycode)
    38	{
    39		switch (keycode)
    40		{
    41		case JK_ENTER:
    42			return XKB_KEY_Return;
    43		case JK_BACK_SPACE:
    44			return XKB_KEY_BackSpace;
    45		case JK_TAB:
    46			return XKB_KEY_Tab;
    47		case JK_CANCEL:
    48			return XKB_KEY_Cancel;
    49		case JK_CLEAR:
    50			return XKB_KEY_Clear;
    51		/*case JK_SHIFT: return XKB_KEY_;
    52		 case JK_CONTROL: return XKB_KEY_;
    53		 case JK_ALT: return XKB_KEY_;*/
    54		case JK_PAUSE:
    55			return XKB_KEY_Pause;
    56		case JK_CAPS_LOCK:
    57			return XKB_KEY_Caps_Lock;
    58		case JK_ESCAPE:
    59			return XKB_KEY_Escape;
    60		case JK_SPACE:
    61			return XKB_KEY_space;
    62		case JK_PAGE_UP:
    63			return XKB_KEY_Page_Up;
    64		case JK_PAGE_DOWN:
    65			return XKB_KEY_Page_Down;
    66		case JK_END:
    67			return XKB_KEY_End;
    68		case JK_HOME:
    69			return XKB_KEY_Home;
    70		case JK_LEFT:
    71			return XKB_KEY_Left;
    72		case JK_UP:
    73			return XKB_KEY_Up;
    74		case JK_RIGHT:
    75			return XKB_KEY_Right;
    76		case JK_DOWN:
    77			return XKB_KEY_Down;
    78		case JK_COMMA:
    79			return XKB_KEY_comma;
    80		case JK_MINUS:
    81			return XKB_KEY_minus;
    82		case JK_PERIOD:
    83			return XKB_KEY_period;
    84		case JK_SLASH:
    85			return XKB_KEY_slash;
    86		/*case JK_0: return XKB_KEY_;
    87		 case JK_1: return XKB_KEY_;
    88		 case JK_2: return XKB_KEY_;
    89		 case JK_3: return XKB_KEY_;
    90		 case JK_4: return XKB_KEY_;
    91		 case JK_5: return XKB_KEY_;
    92		 case JK_6: return XKB_KEY_;
    93		 case JK_7: return XKB_KEY_;
    94		 case JK_8: return XKB_KEY_;
    95		 case JK_9: return XKB_KEY_;*/
    96		case JK_SEMICOLON:
    97			return XKB_KEY_semicolon;
    98		case JK_EQUALS:
    99			return XKB_KEY_equal;
   100		/*case JK_A: return XKB_KEY_;
   101		 case JK_B: return XKB_KEY_;
   102		 case JK_C: return XKB_KEY_;
   103		 case JK_D: return XKB_KEY_;
   104		 case JK_E: return XKB_KEY_;
   105		 case JK_F: return XKB_KEY_;
   106		 case JK_G: return XKB_KEY_;
   107		 case JK_H: return XKB_KEY_;
   108		 case JK_I: return XKB_KEY_;
   109		 case JK_J: return XKB_KEY_;
   110		 case JK_K: return XKB_KEY_;
   111		 case JK_L: return XKB_KEY_;
   112		 case JK_M: return XKB_KEY_;
   113		 case JK_N: return XKB_KEY_;
   114		 case JK_O: return XKB_KEY_;
   115		 case JK_P: return XKB_KEY_;
   116		 case JK_Q: return XKB_KEY_;
   117		 case JK_R: return XKB_KEY_;
   118		 case JK_S: return XKB_KEY_;
   119		 case JK_T: return XKB_KEY_;
   120		 case JK_U: return XKB_KEY_;
   121		 case JK_V: return XKB_KEY_;
   122		 case JK_W: return XKB_KEY_;
   123		 case JK_X: return XKB_KEY_;
   124		 case JK_Y: return XKB_KEY_;
   125		 case JK_Z: return XKB_KEY_;*/
   126		case JK_OPEN_BRACKET:
   127			return XKB_KEY_bracketleft;
   128		case JK_BACK_SLASH:
   129			return XKB_KEY_backslash;
   130		case JK_CLOSE_BRACKET:
   131			return XKB_KEY_bracketright;
   132		/*case JK_NUMPAD0: return XKB_KEY_;
   133		 case JK_NUMPAD1: return XKB_KEY_;
   134		 case JK_NUMPAD2: return XKB_KEY_;
   135		 case JK_NUMPAD3: return XKB_KEY_;
   136		 case JK_NUMPAD4: return XKB_KEY_;
   137		 case JK_NUMPAD5: return XKB_KEY_;
   138		 case JK_NUMPAD6: return XKB_KEY_;
   139		 case JK_NUMPAD7: return XKB_KEY_;
   140		 case JK_NUMPAD8: return XKB_KEY_;
   141		 case JK_NUMPAD9: return XKB_KEY_;*/
   142		case JK_MULTIPLY:
   143			return XKB_KEY_multiply;
   144		/*case JK_ADD: return XKB_KEY_;
   145		 case JK_SEPARATER: return XKB_KEY_;
   146		 case JK_SEPARATOR: return XKB_KEY_;
   147		 case JK_SUBTRACT: return XKB_KEY_;
   148		 case JK_DECIMAL: return XKB_KEY_; */
   149		case JK_DIVIDE:
   150			return XKB_KEY_division;
   151		case JK_DELETE:
   152			return XKB_KEY_Delete;
   153		case JK_NUM_LOCK:
   154			return XKB_KEY_Num_Lock;
   155		case JK_SCROLL_LOCK:
   156			return XKB_KEY_Scroll_Lock;
   157		/*case JK_F1: return XKB_KEY_;
   158		 case JK_F2: return XKB_KEY_;
   159		 case JK_F3: return XKB_KEY_;
   160		 case JK_F4: return XKB_KEY_;
   161		 case JK_F5: return XKB_KEY_;
   162		 case JK_F6: return XKB_KEY_;
   163		 case JK_F7: return XKB_KEY_;
   164		 case JK_F8: return XKB_KEY_;
   165		 case JK_F9: return XKB_KEY_;
   166		 case JK_F10: return XKB_KEY_;
   167		 case JK_F11: return XKB_KEY_;
   168		 case JK_F12: return XKB_KEY_;
   169		 case JK_F13: return XKB_KEY_;
   170		 case JK_F14: return XKB_KEY_;
   171		 case JK_F15: return XKB_KEY_;
   172		 case JK_F16: return XKB_KEY_;
   173		 case JK_F17: return XKB_KEY_;
   174		 case JK_F18: return XKB_KEY_;
   175		 case JK_F19: return XKB_KEY_;
   176		 case JK_F20: return XKB_KEY_;
   177		 case JK_F21: return XKB_KEY_;
   178		 case JK_F22: return XKB_KEY_;
   179		 case JK_F23: return XKB_KEY_;
   180		 case JK_F24: return XKB_KEY_;*/
   181		case JK_PRINTSCREEN:
   182			return XKB_KEY_Print;
   183		case JK_INSERT:
   184			return XKB_KEY_Insert;
   185		case JK_HELP:
   186			return XKB_KEY_Help;
   187		case JK_META:
   188			return XKB_KEY_Meta_R;
   189		case JK_BACK_QUOTE:
   190			return XKB_KEY_quoteright;
   191		case JK_QUOTE:
   192			return XKB_KEY_quoteleft;
   193		case JK_KP_UP:
   194			return XKB_KEY_KP_Up;
   195		case JK_KP_DOWN:
   196			return XKB_KEY_KP_Down;
   197		case JK_KP_LEFT:
   198			return XKB_KEY_KP_Left;
   199		case JK_KP_RIGHT:
   200			return XKB_KEY_KP_Right;
   201		case JK_DEAD_GRAVE:
   202			return XKB_KEY_dead_grave;
   203		case JK_DEAD_ACUTE:
   204			return XKB_KEY_dead_acute;
   205		case JK_DEAD_CIRCUMFLEX:
   206			return XKB_KEY_dead_circumflex;
   207		case JK_DEAD_TILDE:
   208			return XKB_KEY_dead_tilde;
   209		case JK_DEAD_MACRON:
   210			return XKB_KEY_dead_macron;
   211		case JK_DEAD_BREVE:
   212			return XKB_KEY_dead_breve;
   213		case JK_DEAD_ABOVEDOT:
   214			return XKB_KEY_dead_abovedot;
   215		case JK_DEAD_DIAERESIS:
   216			return XKB_KEY_dead_diaeresis;
   217		case JK_DEAD_ABOVERING:
   218			return XKB_KEY_dead_abovering;
   219		case JK_DEAD_DOUBLEACUTE:
   220			return XKB_KEY_dead_doubleacute;
   221		case JK_DEAD_CARON:
   222			return XKB_KEY_dead_caron;
   223		case JK_DEAD_CEDILLA:
   224			return XKB_KEY_dead_cedilla;
   225		case JK_DEAD_OGONEK:
   226			return XKB_KEY_dead_ogonek;
   227		case JK_DEAD_IOTA:
   228			return XKB_KEY_dead_iota;
   229		case JK_DEAD_VOICED_SOUND:
   230			return XKB_KEY_dead_voiced_sound;
   231		case JK_DEAD_SEMIVOICED_SOUND:
   232			return XKB_KEY_dead_semivoiced_sound;
   233		case JK_AMPERSAND:
   234			return XKB_KEY_ampersand;
   235		case JK_ASTERISK:
   236			return XKB_KEY_asterisk;
   237		case JK_QUOTEDBL:
   238			return XKB_KEY_quotedbl;
   239		case JK_LESS:
   240			return XKB_KEY_less;
   241		case JK_GREATER:
   242			return XKB_KEY_greater;
   243		case JK_BRACELEFT:
   244			return XKB_KEY_braceleft;
   245		case JK_BRACERIGHT:
   246			return XKB_KEY_braceright;
   247		case JK_AT:
   248			return XKB_KEY_at;
   249		case JK_COLON:
   250			return XKB_KEY_colon;
   251		/* case JK_CIRCUMFLEX: return XKB_KEY_; */
   252		case JK_DOLLAR:
   253			return XKB_KEY_dollar;
   254		case JK_EURO_SIGN:
   255			return XKB_KEY_EuroSign;
   256		case JK_EXCLAMATION_MARK:
   257			return XKB_KEY_exclamdown;
   258		case JK_INVERTED_EXCLAMATION_MARK:
   259			return XKB_KEY_exclam;
   260		case JK_LEFT_PARENTHESIS:
   261			return XKB_KEY_parenleft;
   262		case JK_NUMBER_SIGN:
   263			return XKB_KEY_numbersign;
   264		case JK_PLUS:
   265			return XKB_KEY_plus;
   266		case JK_RIGHT_PARENTHESIS:
   267			return XKB_KEY_parenright;
   268		case JK_UNDERSCORE:
   269			return XKB_KEY_underscore;
   270		case JK_WINDOWS:
   271			return XKB_KEY_Super_L;
   272		/* case JK_CONTEXT_MENU: return XKB_KEY_;
   273		 case K_FINAL: return XKB_KEY_;
   274		 case JK_CONVERT: return XKB_KEY_;
   275		 case JK_NONCONVERT: return XKB_KEY_;
   276		 case JK_ACCEPT: return XKB_KEY_;
   277		 case JK_MODECHANGE: return XKB_KEY_;
   278		 case JK_KANA: return XKB_KEY; */
   279		case JK_KANJI:
   280			return XKB_KEY_Kanji;
   281		/* case JK_ALPHANUMERIC: return XKB_KEY_; */
   282		// case JK_KATAKANA: return XKB_KEY_KATAKANA;
   283		case JK_HIRAGANA:
   284			return XKB_KEY_Hiragana;
   285		/*case JK_FULL_WIDTH: return XKB_KEY_;
   286		 case JK_HALF_WIDTH: return XKB_KEY_;
   287		 case JK_ROMAN_CHARACTERS: return XKB_KEY_;
   288		 case JK_ALL_CANDIDATES: return XKB_KEY_;
   289		 case JK_PREVIOUS_CANDIDATE: return XKB_KEY_; */
   290		case JK_CODE_INPUT:
   291			return XKB_KEY_Codeinput;
   292		// case JK_JAPANESE_KATAKANA: return XKB_KEY_KATAKANA;
   293		case JK_JAPANESE_HIRAGANA:
   294			return XKB_KEY_Hiragana;
   295		/*case JK_JAPANESE_ROMAN: return XKB_KEY_; */
   296		case JK_KANA_LOCK:
   297			return XKB_KEY_Kana_Lock;
   298		/*case JK_INPUT_METHOD_ON_OFF: return XKB_KEY_;
   299		 case JK_CUT: return XKB_KEY_;
   300		 case JK_COPY: return XKB_KEY_;
   301		 case JK_PASTE: return XKB_KEY_;
   302		 case JK_UNDO: return XKB_KEY_;
   303		 case JK_AGAIN: return XKB_KEY_;*/
   304		case JK_FIND:
   305			return XKB_KEY_Find;
   306		/*case JK_PROPS: return XKB_KEY_;
   307		 case JK_STOP: return XKB_KEY_;
   308		 case JK_COMPOSE: return XKB_KEY_;
   309		 case JK_ALT_GRAPH: return XKB_KEY_;*/
   310		case JK_BEGIN:
   311			return XKB_KEY_Begin;
   312		default:
   313			return 0;
   314		}
   315	}
   316	
   317	/**
   318	 * Convertir acelerador de menu Java aun acelerador X
   319	 */
   320	char *jkeycode_to_xkey(int keycode)
   321	{
   322		int code = 0;
   323	
   324		if (keycode >= JK_A && keycode <= JK_Z)
   325			code = keycode - JK_A + XKB_KEY_A;
   326		else if (keycode >= JK_F1 && keycode <= JK_F12)
   327			code = keycode - JK_F1 + XKB_KEY_F1;
   328		else if (keycode >= JK_0 && keycode <= JK_9)
   329			code = keycode - JK_0 + XKB_KEY_0;
   330		else
   331			code = jkeycode_to_xkey_map(keycode);
   332	
   333		if (code == 0)
   334			return NULL;
   335	
   336		char ret[40];
   337		size_t rets = xkb_keysym_to_utf8(code, ret, 1024);
   338		char *retf  = (char *)calloc((rets + 1), sizeof(char));
   339		strncpy(retf, ret, rets);
   340		return retf;
   341	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/com_jarego_jayatana_jkey2xkey.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 *
    26	 * File:   com_jarego_jayatana_jkey2xkey.h
    27	 * Author: Jared Gonzalez
    28	 */
    29	
    30	#ifndef COM_JAREGO_JAYATANA_JKEY2XKEY_H_
    31	#define COM_JAREGO_JAYATANA_JKEY2XKEY_H_
    32	
    33	/**
    34	 * Tabla de valores de modificadores
    35	 */
    36	#define JK_SHIFT (1 << 0)
    37	#define JK_CTRL (1 << 1)
    38	#define JK_ALT (1 << 3)
    39	
    40	/**
    41	 * Tabla de valores de aceleradores
    42	 */
    43	#define JK_ENTER '\n'
    44	#define JK_BACK_SPACE '\b'
    45	#define JK_TAB '\t'
    46	#define JK_CANCEL 0x03
    47	#define JK_CLEAR 0x0C
    48	#define JK_CONTROL 0x11
    49	#define JK_PAUSE 0x13
    50	#define JK_CAPS_LOCK 0x14
    51	#define JK_ESCAPE 0x1B
    52	#define JK_SPACE 0x20
    53	#define JK_PAGE_UP 0x21
    54	#define JK_PAGE_DOWN 0x22
    55	#define JK_END 0x23
    56	#define JK_HOME 0x24
    57	#define JK_LEFT 0x25
    58	#define JK_UP 0x26
    59	#define JK_RIGHT 0x27
    60	#define JK_DOWN 0x28
    61	#define JK_COMMA 0x2C
    62	#define JK_MINUS 0x2D
    63	#define JK_PERIOD 0x2E
    64	#define JK_SLASH 0x2F
    65	#define JK_0 0x30
    66	#define JK_1 0x31
    67	#define JK_2 0x32
    68	#define JK_3 0x33
    69	#define JK_4 0x34
    70	#define JK_5 0x35
    71	#define JK_6 0x36
    72	#define JK_7 0x37
    73	#define JK_8 0x38
    74	#define JK_9 0x39
    75	#define JK_SEMICOLON 0x3B
    76	#define JK_EQUALS 0x3D
    77	#define JK_A 0x41
    78	#define JK_B 0x42
    79	#define JK_C 0x43
    80	#define JK_D 0x44
    81	#define JK_E 0x45
    82	#define JK_F 0x46
    83	#define JK_G 0x47
    84	#define JK_H 0x48
    85	#define JK_I 0x49
    86	#define JK_J 0x4A
    87	#define JK_K 0x4B
    88	#define JK_L 0x4C
    89	#define JK_M 0x4D
    90	#define JK_N 0x4E
    91	#define JK_O 0x4F
    92	#define JK_P 0x50
    93	#define JK_Q 0x51
    94	#define JK_R 0x52
    95	#define JK_S 0x53
    96	#define JK_T 0x54
    97	#define JK_U 0x55
    98	#define JK_V 0x56
    99	#define JK_W 0x57
   100	#define JK_X 0x58
   101	#define JK_Y 0x59
   102	#define JK_Z 0x5A
   103	#define JK_OPEN_BRACKET 0x5B
   104	#define JK_BACK_SLASH 0x5C
   105	#define JK_CLOSE_BRACKET 0x5D
   106	#define JK_NUMPAD0 0x60
   107	#define JK_NUMPAD1 0x61
   108	#define JK_NUMPAD2 0x62
   109	#define JK_NUMPAD3 0x63
   110	#define JK_NUMPAD4 0x64
   111	#define JK_NUMPAD5 0x65
   112	#define JK_NUMPAD6 0x66
   113	#define JK_NUMPAD7 0x67
   114	#define JK_NUMPAD8 0x68
   115	#define JK_NUMPAD9 0x69
   116	#define JK_MULTIPLY 0x6A
   117	#define JK_ADD 0x6B
   118	#define JK_SEPARATER 0x6C
   119	#define JK_SEPARATOR JK_SEPARATER
   120	#define JK_SUBTRACT 0x6D
   121	#define JK_DECIMAL 0x6E
   122	#define JK_DIVIDE 0x6F
   123	#define JK_DELETE 0x7F
   124	#define JK_NUM_LOCK 0x90
   125	#define JK_SCROLL_LOCK 0x91
   126	#define JK_F1 0x70
   127	#define JK_F2 0x71
   128	#define JK_F3 0x72
   129	#define JK_F4 0x73
   130	#define JK_F5 0x74
   131	#define JK_F6 0x75
   132	#define JK_F7 0x76
   133	#define JK_F8 0x77
   134	#define JK_F9 0x78
   135	#define JK_F10 0x79
   136	#define JK_F11 0x7A
   137	#define JK_F12 0x7B
   138	#define JK_F13 0xF000
   139	#define JK_F14 0xF001
   140	#define JK_F15 0xF002
   141	#define JK_F16 0xF003
   142	#define JK_F17 0xF004
   143	#define JK_F18 0xF005
   144	#define JK_F19 0xF006
   145	#define JK_F20 0xF007
   146	#define JK_F21 0xF008
   147	#define JK_F22 0xF009
   148	#define JK_F23 0xF00A
   149	#define JK_F24 0xF00B
   150	#define JK_PRINTSCREEN 0x9A
   151	#define JK_INSERT 0x9B
   152	#define JK_HELP 0x9C
   153	#define JK_META 0x9D
   154	#define JK_BACK_QUOTE 0xC0
   155	#define JK_QUOTE 0xDE
   156	#define JK_KP_UP 0xE0
   157	#define JK_KP_DOWN 0xE1
   158	#define JK_KP_LEFT 0xE2
   159	#define JK_KP_RIGHT 0xE3
   160	#define JK_DEAD_GRAVE 0x80
   161	#define JK_DEAD_ACUTE 0x81
   162	#define JK_DEAD_CIRCUMFLEX 0x82
   163	#define JK_DEAD_TILDE 0x83
   164	#define JK_DEAD_MACRON 0x84
   165	#define JK_DEAD_BREVE 0x85
   166	#define JK_DEAD_ABOVEDOT 0x86
   167	#define JK_DEAD_DIAERESIS 0x87
   168	#define JK_DEAD_ABOVERING 0x88
   169	#define JK_DEAD_DOUBLEACUTE 0x89
   170	#define JK_DEAD_CARON 0x8a
   171	#define JK_DEAD_CEDILLA 0x8b
   172	#define JK_DEAD_OGONEK 0x8c
   173	#define JK_DEAD_IOTA 0x8d
   174	#define JK_DEAD_VOICED_SOUND 0x8e
   175	#define JK_DEAD_SEMIVOICED_SOUND 0x8f
   176	#define JK_AMPERSAND 0x96
   177	#define JK_ASTERISK 0x97
   178	#define JK_QUOTEDBL 0x98
   179	#define JK_LESS 0x99
   180	#define JK_GREATER 0xa0
   181	#define JK_BRACELEFT 0xa1
   182	#define JK_BRACERIGHT 0xa2
   183	#define JK_AT 0x0200
   184	#define JK_COLON 0x0201
   185	#define JK_CIRCUMFLEX 0x0202
   186	#define JK_DOLLAR 0x0203
   187	#define JK_EURO_SIGN 0x0204
   188	#define JK_EXCLAMATION_MARK 0x0205
   189	#define JK_INVERTED_EXCLAMATION_MARK 0x0206
   190	#define JK_LEFT_PARENTHESIS 0x0207
   191	#define JK_NUMBER_SIGN 0x0208
   192	#define JK_PLUS 0x0209
   193	#define JK_RIGHT_PARENTHESIS 0x020A
   194	#define JK_UNDERSCORE 0x020B
   195	#define JK_WINDOWS 0x020C
   196	#define JK_CONTEXT_MENU 0x020D
   197	#define JK_FINAL 0x0018
   198	#define JK_CONVERT 0x001C
   199	#define JK_NONCONVERT 0x001D
   200	#define JK_ACCEPT 0x001E
   201	#define JK_MODECHANGE 0x001F
   202	#define JK_KANA 0x0015
   203	#define JK_KANJI 0x0019
   204	#define JK_ALPHANUMERIC 0x00F0
   205	#define JK_KATAKANA 0x00F1
   206	#define JK_HIRAGANA 0x00F2
   207	#define JK_FULL_WIDTH 0x00F3
   208	#define JK_HALF_WIDTH 0x00F4
   209	#define JK_ROMAN_CHARACTERS 0x00F5
   210	#define JK_ALL_CANDIDATES 0x0100
   211	#define JK_PREVIOUS_CANDIDATE 0x0101
   212	#define JK_CODE_INPUT 0x0102
   213	#define JK_JAPANESE_KATAKANA 0x0103
   214	#define JK_JAPANESE_HIRAGANA 0x0104
   215	#define JK_JAPANESE_ROMAN 0x0105
   216	#define JK_KANA_LOCK 0x0106
   217	#define JK_INPUT_METHOD_ON_OFF 0x0107
   218	#define JK_CUT 0xFFD1
   219	#define JK_COPY 0xFFCD
   220	#define JK_PASTE 0xFFCF
   221	#define JK_UNDO 0xFFCB
   222	#define JK_AGAIN 0xFFC9
   223	#define JK_FIND 0xFFD0
   224	#define JK_PROPS 0xFFCA
   225	#define JK_STOP 0xFFC8
   226	#define JK_COMPOSE 0xFF20
   227	#define JK_ALT_GRAPH 0xFF7E
   228	#define JK_BEGIN 0xFF58
   229	
   230	/**
   231	 * Convertir acelerador de menu Java aun acelerador X
   232	 */
   233	char *jkeycode_to_xkey(int);
   234	
   235	#endif /* COM_JAREGO_JAYATANA_JKEY2XKEY_H_ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/com_jarego_jayatana_jni.c
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 *
    26	 * File:   com_jarego_jayatana_jni.c
    27	 * Author: Jared Gonzalez
    28	 */
    29	#include "com_jarego_jayatana_jni.h"
    30	
    31	JavaVM *jayatana_jvm;
    32	
    33	/**
    34	 * Obtener el putero JavaVM para permitr integracion con Ubuntu/Linux
    35	 */
    36	jint JNI_OnLoad(JavaVM *jvm, void *reserved)
    37	{
    38		jayatana_jvm = jvm;
    39		return JNI_VERSION_1_8;
    40	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/com_jarego_jayatana_jni.h
--------------------------------------------------------------------------------
     1	/*
     2	 * Copyright (c) 2014 Jared Gonzalez
     3	 *
     4	 * Permission is hereby granted, free of charge, to any
     5	 * person obtaining a copy of this software and associated
     6	 * documentation files (the "Software"), to deal in the
     7	 * Software without restriction, including without limitation
     8	 * the rights to use, copy, modify, merge, publish,
     9	 * distribute, sublicense, and/or sell copies of the
    10	 * Software, and to permit persons to whom the Software is
    11	 * furnished to do so, subject to the following conditions:
    12	 *
    13	 * The above copyright notice and this permission notice
    14	 * shall be included in all copies or substantial portions of
    15	 * the Software.
    16	 *
    17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    18	 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    19	 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    20	 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    21	 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    22	 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    23	 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    24	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    25	 *
    26	 * File:   com_jarego_jayatana_jni.h
    27	 * Author: Jared Gonzalez
    28	 */
    29	#include <jni.h>
    30	
    31	#ifndef COM_JAREGO_JAYATANA_JNI_H_
    32	#define COM_JAREGO_JAYATANA_JNI_H_
    33	
    34	extern JavaVM *jayatana_jvm;
    35	
    36	/**
    37	 * Obtener el putero JavaVM para permitr integracion con Ubuntu/Linux
    38	 */
    39	jint JNI_OnLoad(JavaVM *, void *);
    40	
    41	#endif /* COM_JAREGO_JAYATANA_JNI_H_ */
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/config.h.in
--------------------------------------------------------------------------------
     1	#ifndef CONFIG_H
     2	#define CONFIG_H
     3	
     4	#define LIBDIR "@CMAKE_INSTALL_FULL_LIBDIR@/jayatana"
     5	#define JAVADIR "@CMAKE_INSTALL_FULL_DATAROOTDIR@/java"
     6	#define JAVA_VERSION @Java_VERSION_MINOR@
     7	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/dbusmenu-definitions.h
--------------------------------------------------------------------------------
     1	#ifndef DBUSMENU_DEFINITIONS_H
     2	#define DBUSMENU_DEFINITIONS_H
     3	
     4	#define DBUS_MENU_SERVER_TYPE_DEFAULT "standard"
     5	#define DBUS_MENU_SERVER_TYPE_SEPARATOR "separator"
     6	
     7	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/jayatana-window.c
--------------------------------------------------------------------------------
     1	
     2	#include "jayatana-window.h"
     3	
     4	JAyatanaWindow *jayatana_window_new()
     5	{
     6		JAyatanaWindow *ret = (JAyatanaWindow *)g_malloc0(sizeof(JAyatanaWindow));
     7		ret->menu_items   = g_hash_table_new_full(g_str_hash, g_str_equal, g_free, g_object_unref);
     8		ret->menu_counter = 1;
     9		return ret;
    10	}
    11	
    12	JAyatanaWindow *jayatana_window_copy(JAyatanaWindow *src)
    13	{
    14		JAyatanaWindow *ret = (JAyatanaWindow *)g_malloc0(sizeof(JAyatanaWindow));
    15		ret->windowXID      = src->windowXID;
    16		ret->globalThat     = src->globalThat;
    17		ret->menu_counter   = src->menu_counter;
    18	
    19		ret->windowXIDPath        = g_strdup(src->windowXIDPath);
    20		ret->gdBusProxyRegistered = src->gdBusProxyRegistered;
    21		ret->gBusWatcher          = src->gBusWatcher;
    22		ret->dbBusProxy           = G_DBUS_PROXY(g_object_ref(src->dbBusProxy));
    23		ret->dbBusProxyCallSync   = g_variant_ref(src->dbBusProxyCallSync);
    24	
    25		ret->dbusMenuServer = DBUSMENU_SERVER(g_object_ref(src->dbusMenuServer));
    26		ret->dbusMenuRoot   = DBUSMENU_MENUITEM(g_object_ref(src->dbusMenuRoot));
    27	
    28		ret->registerState = src->registerState;
    29		ret->menu_items    = g_hash_table_ref(src->menu_items);
    30		return ret;
    31	}
    32	
    33	void jayatana_window_free(JAyatanaWindow *window)
    34	{
    35		if (window->gdBusProxyRegistered)
    36		{
    37			g_clear_pointer(&window->windowXIDPath, g_free);
    38			g_clear_object(&window->dbBusProxy);
    39			g_clear_pointer(&window->dbBusProxyCallSync, g_variant_unref);
    40			g_clear_object(&window->dbusMenuServer);
    41			g_clear_object(&window->dbusMenuRoot);
    42		}
    43		g_clear_pointer(&window->menu_items, g_hash_table_unref);
    44		g_clear_pointer(&window, g_free);
    45	}
    46	
    47	G_DEFINE_BOXED_TYPE(JAyatanaWindow, jayatana_window, (GBoxedCopyFunc)jayatana_window_copy,
    48	                    (GBoxedFreeFunc)jayatana_window_free)
    49	
    50	extern void jayatana_item_activated(DbusmenuMenuitem *item, guint timestamp, gpointer user_data);
    51	extern void jayatana_item_events(DbusmenuMenuitem *item, const char *event);
    52	extern void jayatana_item_about_to_show(DbusmenuMenuitem *item);
    53	
    54	DbusmenuMenuitem *jayatana_window_get_dbusmenu_item(JAyatanaWindow *win, jint id,
    55	                                                    const char *cclabel)
    56	{
    57		DbusmenuMenuitem *it;
    58		char *checksum = g_compute_checksum_for_data(G_CHECKSUM_SHA512,
    59		                                             (const unsigned char *)cclabel,
    60		                                             strlen(cclabel));
    61		it             = DBUSMENU_MENUITEM(g_hash_table_lookup(win->menu_items, checksum));
    62		if (it == NULL)
    63		{
    64			it = dbusmenu_menuitem_new_with_id(id > 0 ? id : win->menu_counter++);
    65			g_hash_table_insert(win->menu_items, checksum, it);
    66		}
    67		else
    68		{
    69			g_signal_handlers_disconnect_by_func(it, (gpointer)jayatana_item_activated, NULL);
    70			g_signal_handlers_disconnect_by_func(it, (gpointer)jayatana_item_events, NULL);
    71			g_signal_handlers_disconnect_by_func(it,
    72			                                     (gpointer)jayatana_item_about_to_show,
    73			                                     NULL);
    74		}
    75		return it;
    76	}
    77	
    78	void jayatana_window_remove_unparented(JAyatanaWindow *win)
    79	{
    80		GHashTableIter iter;
    81		char *key;
    82		DbusmenuMenuitem *value;
    83		g_hash_table_iter_init(&iter, win->menu_items);
    84		while (g_hash_table_iter_next(&iter, (void **)&key, (void **)&value))
    85		{
    86			if (dbusmenu_menuitem_get_parent(value) == NULL)
    87				g_hash_table_iter_remove(&iter);
    88		}
    89	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/jayatana-window.h
--------------------------------------------------------------------------------
     1	#ifndef JAYATANAWINDOW_H
     2	#define JAYATANAWINDOW_H
     3	
     4	#include <gio/gio.h>
     5	
     6	#include <jawt_md.h>
     7	#include <libdbusmenu-glib/server.h>
     8	#include <stdbool.h>
     9	
    10	G_BEGIN_DECLS
    11	
    12	/**
    13	 * Control structure of global menu
    14	 */
    15	typedef struct
    16	{
    17		jlong windowXID;
    18		jobject globalThat;
    19	
    20		int menu_counter;
    21		char *windowXIDPath;
    22		bool gdBusProxyRegistered;
    23		guint gBusWatcher;
    24		GDBusProxy *dbBusProxy;
    25		GVariant *dbBusProxyCallSync;
    26	
    27		DbusmenuServer *dbusMenuServer;
    28		DbusmenuMenuitem *dbusMenuRoot;
    29	
    30		jint registerState;
    31		GHashTable *menu_items;
    32	} JAyatanaWindow;
    33	
    34	JAyatanaWindow *jayatana_window_new();
    35	JAyatanaWindow *jayatana_window_copy(JAyatanaWindow *src);
    36	void jayatana_window_free(JAyatanaWindow *window);
    37	
    38	void jayatana_window_remove_unparented(JAyatanaWindow *win);
    39	DbusmenuMenuitem *jayatana_window_get_dbusmenu_item(JAyatanaWindow *win, jint id,
    40	                                                    const char *cclabel);
    41	
    42	G_END_DECLS
    43	
    44	#endif // JAYATANAWINDOW_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/lib/meson.build
--------------------------------------------------------------------------------
     1	install_directory = join_paths(get_option('libdir') / 'jayatana')
     2	
     3	config = configure_file(input: 'config.h.in', output: 'config.h', configuration : data)
     4	agent_sources = files(
     5	  'com_jarego_jayatana_Agent.h',
     6	  'com_jarego_jayatana_Agent.c'
     7	)
     8	jayatanaag = shared_library('jayatanaag', agent_sources, config,
     9	          dependencies : [x11, jni],
    10	          install: true,
    11	          install_dir: install_directory
    12	)
    13	
    14	jayatana_sources = files(
    15	  'com_jarego_jayatana_basic_GlobalMenu.c',
    16	  'com_jarego_jayatana_basic_GMainLoop.c',
    17	  'com_jarego_jayatana_jkey2xkey.c',
    18	  'com_jarego_jayatana_jkey2xkey.h',
    19	  'com_jarego_jayatana_jni.c',
    20	  'com_jarego_jayatana_jni.h',
    21	  'jayatana-window.c',
    22	  'jayatana-window.h',
    23	  'dbusmenu-definitions.h'
    24	)
    25	
    26	jayatana = shared_library('jayatana', jayatana_sources,
    27	            dependencies: [x11, jni, xkbcommon, dbusmenu, jayatana_jni, glib],
    28	            install: true,
    29	            install_dir: install_directory
    30	)
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/LICENSE
--------------------------------------------------------------------------------
     1	Copyright (c) 2013 Jared González
     2	Copyright (c) 2018 Konstantin Pugin
     3	
     4	MIT
     5	 
     6	Permission is hereby granted, free of charge, to any
     7	person obtaining a copy of this software and associated
     8	documentation files (the "Software"), to deal in the
     9	Software without restriction, including without limitation
    10	the rights to use, copy, modify, merge, publish,
    11	distribute, sublicense, and/or sell copies of the
    12	Software, and to permit persons to whom the Software is
    13	furnished to do so, subject to the following conditions:
    14	
    15	The above copyright notice and this permission notice
    16	shall be included in all copies or substantial portions of
    17	the Software.
    18	
    19	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    20	KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    21	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    22	PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
    23	OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
    24	OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    25	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    26	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/meson.build
--------------------------------------------------------------------------------
     1	# cmake_policy(['VERSION', '3.6'])
     2	project('jayatana', 'java', 'c',
     3	        meson_version: '>=1.0.0',
     4	        version: '25.04',
     5	        license: ['MIT'],
     6	         default_options : ['c_std=gnu11', 'buildtype=debugoptimized'])
     7	
     8	x11 = dependency('x11', required: true)
     9	xkbcommon = dependency('xkbcommon', required : true)
    10	dbusmenu = dependency('dbusmenu-glib-0.4', version : '>=16.04.0')
    11	javac = meson.get_compiler('java')
    12	java = import('java')
    13	jni = dependency('jni', version: '>= 1.8.0', modules: ['jvm', 'awt'], required : true)
    14	glib = dependency('gio-2.0', required : true)
    15	
    16	java_ver = javac.version()
    17	version_array = java_ver.split('.')
    18	java_ver = version_array[0]
    19	if java_ver < '2.0'
    20	  java_ver = version_array[1]
    21	endif
    22	
    23	data= {
    24	  'CMAKE_INSTALL_FULL_LIBDIR' : join_paths(get_option('prefix'),get_option('libdir')),
    25	  'CMAKE_INSTALL_FULL_DATAROOTDIR' : join_paths(get_option('prefix'),get_option('datadir')),
    26	  'Java_VERSION_MINOR' : java_ver,
    27	  'Java_VERSION_STRING' : javac.version()
    28	}
    29	
    30	subdir('java')
    31	subdir('lib')
    32	
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/jayatana/README.md
--------------------------------------------------------------------------------
     1	This is renamed fork of [Google Code repo](https://code.google.com/archive/p/java-swing-ayatana) of Jayatana.
     2	
     3	JAyatana helps to use DBusMenu for Java Swing programs (enables Global Menu for many Java applications).
     4	
     5	*Dependencies:*
     6	
     7	 * GLib (>= 2.40.0)
     8	 * Java (>= 1.9.0)
     9	 * xkbcommon (>= 0.5.0)
    10	 * dbusmenu-glib (>= 16.04.0)
    11	
    12	*Enabling Jayatana*
    13	
    14	1. System-wide way (recommended only if you have many Java programs with menus):
    15	- add `JAVA_TOOL_OPTIONS=-javaagent:/usr/share/java/jayatanaag.jar $JAVA_TOOL_OPTIONS` into your *.profile* file.
    16	
    17	2. Application-specific ways (useful if you usually have one or 2 Java programs, like Android Studio) and if above does not work.
    18	
    19	*2.1. Intellij programs (Idea, PhpStorm, CLion, Android Studio)*
    20	- Edit *.vmoptions file, and add `-javaagent:/usr/share/java/jayatanaag.jar` to the end of file.
    21	- Edit *.properties file, and add `linux.native.menu=true` to the end of it.
    22	
    23	*2.2. Netbeans*
    24	- Edit netbeans.conf, and add `-J-javaagent:/usr/share/java/jayatanaag.jar` to the end of it.
    25	
    26	3. Enable agent via desktop file (for any single application)
    27	- Add `-javaagent:/usr/share/java/jayatanaag.jar` after Exec or TryExec line of application's desktop file (if application executes JAR directly). If application executes JAR via wrapper, and this option to the end of JVM options for running actual JAR.
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/config.h.in
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef CONFIG_H
    20	#define CONFIG_H
    21	
    22	#define GETTEXT_PACKAGE "@GETTEXT_PACKAGE@"
    23	#define LOCALE_DIR "@CMAKE_INSTALL_FULL_LOCALEDIR@"
    24	
    25	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/data/appmenu-registrar.service.in
--------------------------------------------------------------------------------
     1	[D-BUS Service]
     2	Name=com.canonical.AppMenu.Registrar
     3	Exec=@CMAKE_INSTALL_FULL_LIBEXECDIR@/vala-panel/appmenu-registrar --reference
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/data/com.canonical.AppMenu.Registrar.xml
--------------------------------------------------------------------------------
     1	<node>
     2	  <interface name="com.canonical.AppMenu.Registrar">
     3	    <method name="RegisterWindow">
     4	      <arg type="u" name="window_id" direction="in"/>
     5	      <arg type="o" name="menu_object_path" direction="in"/>
     6	    </method>
     7	    <method name="UnregisterWindow">
     8	      <arg type="u" name="window_id" direction="in"/>
     9	    </method>
    10	    <method name="GetMenuForWindow">
    11	      <arg type="u" name="window" direction="in"/>
    12	      <arg type="s" name="service" direction="out"/>
    13	      <arg type="o" name="path" direction="out"/>
    14	    </method>
    15	    <method name="GetMenus">
    16	      <arg type="a(uso)" name="menus" direction="out"/>
    17	    </method>
    18	    <signal name="WindowRegistered">
    19	      <arg type="u" name="window_id"/>
    20	      <arg type="s" name="service"/>
    21	      <arg type="o" name="path"/>
    22	    </signal>
    23	    <signal name="WindowUnregistered">
    24	      <arg type="u" name="window_id"/>
    25	    </signal>
    26	  </interface>
    27	</node>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/data/org.valapanel.AppMenu.Registrar.xml
--------------------------------------------------------------------------------
     1	<node>
     2	  <interface name="org.valapanel.AppMenu.Registrar">
     3	    <method name="Reference">
     4	    </method>
     5	    <method name="UnReference">
     6	    </method>
     7	  </interface>
     8	</node>
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/meson.build
--------------------------------------------------------------------------------
     1	project('registrar', 'c',
     2		meson_version: '>=0.61.0',
     3	    version: '25.04',
     4		license: ['LGPL-3.0-or-later'],
     5	    default_options: [
     6	        'c_std=gnu11',
     7	        'buildtype=debugoptimized',
     8	        'warning_level=1'
     9	        ])
    10	
    11	##################
    12	# Module imports #
    13	##################
    14	
    15	gnome = import('gnome')
    16	i18n = import('i18n')
    17	pkgconfig = import('pkgconfig')
    18	
    19	###############
    20	# Directories #
    21	###############
    22	prefix = get_option('prefix')
    23	datadir = get_option('datadir')
    24	localedir = get_option('localedir')
    25	schema_dir = join_paths(get_option('datadir'), 'glib-2.0', 'schemas')
    26	libexecdir = get_option('libexecdir')
    27	installdir = join_paths(libexecdir, 'vala-panel')
    28	servicedir = join_paths(prefix,datadir, 'dbus-1','services')
    29	
    30	################
    31	# Dependencies #
    32	################
    33	glib_ver = '>=2.52.0'
    34	giounix = dependency('gio-unix-2.0', version: glib_ver)
    35	
    36	
    37	#################
    38	# Configuration #
    39	#################
    40	conf_data = configuration_data()
    41	conf_data.set('GETTEXT_PACKAGE', 'vala-panel-appmenu')
    42	conf_data.set('CMAKE_INSTALL_FULL_LOCALEDIR', join_paths(prefix,localedir))
    43	
    44	config = configure_file(input : 'config.h.in',
    45	               output : 'config.h',
    46				   configuration : conf_data)
    47	
    48	version = vcs_tag(
    49		command : ['git','describe','--tags'],
    50		input: 'version.h.in',
    51		output: 'version.h',
    52		replace_string: '@VERSION@',
    53	)
    54	
    55	#################
    56	#     Build     #
    57	#################
    58	
    59	marshal = gnome.genmarshal('registrar-marshal', sources: 'registrar-marshal.list')
    60	intro_c = run_command(
    61	        'cat', join_paths('data','com.canonical.AppMenu.Registrar.xml'), check: true
    62	    ).stdout().strip().split('"')
    63	priv_c = run_command(
    64	        'cat', join_paths('data','org.valapanel.AppMenu.Registrar.xml'), check: true
    65	    ).stdout().strip().split('"')
    66	
    67	intro_xml = ''.join('\"'.join(intro_c).split('\n'))
    68	priv_xml = ''.join('\"'.join(priv_c).split('\n'))
    69	
    70	xml = configure_file(input : 'registrar-xml.c.in',
    71	               output : 'registrar-xml.c',
    72				   configuration : {
    73	                    'XML_CONTENTS' : intro_xml,
    74	                    'PRIVATE_CONTENTS' : priv_xml
    75				   })
    76	sources = files(
    77	    'registrar-main.c',
    78	    'registrar-main.h',
    79	    'registrar-dbusmenu.c',
    80	    'registrar-dbusmenu.h'
    81	)
    82	registrar = executable('appmenu-registrar',
    83	    config, xml, sources, marshal, version,
    84	    dependencies : giounix,
    85	    install : true,
    86	    install_dir : installdir
    87	)
    88	
    89	service = configure_file(input : join_paths('data', 'appmenu-registrar.service.in'),
    90	               output : 'com.canonical.AppMenu.Registrar.service',
    91	               install_dir: servicedir,
    92				   configuration : {
    93	                    'CMAKE_INSTALL_FULL_LIBEXECDIR' : join_paths(prefix,libexecdir),
    94				   })
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/registrar-dbusmenu.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include "registrar-dbusmenu.h"
    20	#include "registrar-marshal.h"
    21	#include <stdbool.h>
    22	
    23	extern const char *introspection_xml;
    24	
    25	typedef struct
    26	{
    27		char *bus_name;
    28		char *object_path;
    29	} DBusAddress;
    30	
    31	DBusAddress *dbus_address_new(const char *bus_name, const char *object_path)
    32	{
    33		DBusAddress *ret = (DBusAddress *)g_slice_alloc0(sizeof(DBusAddress));
    34		ret->bus_name    = g_strdup(bus_name);
    35		ret->object_path = g_strdup(object_path);
    36		return ret;
    37	}
    38	
    39	DBusAddress *dbus_address_copy(const DBusAddress *src)
    40	{
    41		DBusAddress *ret = (DBusAddress *)g_slice_new(DBusAddress);
    42		ret->bus_name    = g_strdup(src->bus_name);
    43		ret->object_path = g_strdup(src->object_path);
    44		return ret;
    45	}
    46	
    47	void dbus_address_free(void *obj)
    48	{
    49		DBusAddress *addr = (DBusAddress *)obj;
    50		g_free(addr->bus_name);
    51		g_free(addr->object_path);
    52		g_slice_free1(sizeof(DBusAddress), addr);
    53	}
    54	
    55	G_DEFINE_BOXED_TYPE(DBusAddress, dbus_address, dbus_address_copy, dbus_address_free)
    56	
    57	struct _RegistrarDBusMenu
    58	{
    59		GObject parent;
    60		GHashTable *menus;
    61		uint registered_object;
    62	};
    63	
    64	G_DEFINE_TYPE(RegistrarDBusMenu, registrar_dbus_menu, G_TYPE_OBJECT)
    65	
    66	enum
    67	{
    68		WINDOW_REGISTERED_SIGNAL,
    69		WINDOW_UNREGISTERED_SIGNAL,
    70		NUM_SIGNALS
    71	};
    72	static uint registrar_dbus_menu_signals[NUM_SIGNALS] = { 0 };
    73	
    74	void registrar_dbus_menu_register_window(RegistrarDBusMenu *self, uint window_id,
    75	                                         const char *menu_object_path, const char *sender)
    76	{
    77		g_return_if_fail(self != NULL);
    78		g_return_if_fail(menu_object_path != NULL);
    79		g_return_if_fail(sender != NULL);
    80		DBusAddress *addr = dbus_address_new(sender, menu_object_path);
    81		g_hash_table_insert(self->menus, GUINT_TO_POINTER(window_id), addr);
    82		g_signal_emit(self,
    83		              registrar_dbus_menu_signals[WINDOW_REGISTERED_SIGNAL],
    84		              0,
    85		              window_id,
    86		              sender,
    87		              menu_object_path);
    88	}
    89	
    90	void registrar_dbus_menu_unregister_window(RegistrarDBusMenu *self, uint window_id)
    91	{
    92		g_return_if_fail(self != NULL);
    93		g_hash_table_remove(self->menus, GUINT_TO_POINTER(window_id));
    94		g_signal_emit(self, registrar_dbus_menu_signals[WINDOW_UNREGISTERED_SIGNAL], 0, window_id);
    95	}
    96	
    97	void registrar_dbus_menu_get_menu_for_window(RegistrarDBusMenu *self, uint window_id,
    98	                                             char **service, char **object_path)
    99	{
   100		DBusAddress *addr =
   101		    (DBusAddress *)g_hash_table_lookup(self->menus, GUINT_TO_POINTER(window_id));
   102		if (addr)
   103		{
   104			*service     = addr->bus_name;
   105			*object_path = addr->object_path;
   106		}
   107		else
   108		{
   109			*service     = "";
   110			*object_path = "/";
   111		}
   112		//            if (menu != null && !DBusMenu.GtkClient.check(service,path))
   113		//            {
   114		//                service = "";
   115		//                path = new ObjectPath("/");
   116		//                unregister_window(window);
   117		//            }
   118	}
   119	
   120	void registrar_dbus_menu_get_menus(RegistrarDBusMenu *self, GVariant **menus)
   121	{
   122		GVariantBuilder bldr;
   123		GHashTableIter iter;
   124		gpointer key, value;
   125	
   126		g_variant_builder_init(&bldr, (const GVariantType *)"a(uso)");
   127		g_hash_table_iter_init(&iter, self->menus);
   128		while (g_hash_table_iter_next(&iter, &key, &value))
   129		{
   130			char *name;
   131			char *path;
   132			registrar_dbus_menu_get_menu_for_window(self, GPOINTER_TO_UINT(key), &name, &path);
   133			g_variant_builder_add(&bldr, "(uso)", GPOINTER_TO_UINT(key), name, path);
   134		}
   135		*menus = g_variant_builder_end(&bldr);
   136	}
   137	
   138	static void registrar_dbus_menu_init(RegistrarDBusMenu *self)
   139	{
   140		self->menus = g_hash_table_new_full(g_direct_hash, g_direct_equal, NULL, dbus_address_free);
   141	}
   142	
   143	static void registrar_dbus_menu_finalize(GObject *obj)
   144	{
   145		RegistrarDBusMenu *self = REGISTRAR_DBUS_MENU(obj);
   146		g_hash_table_unref(self->menus);
   147		G_OBJECT_CLASS(registrar_dbus_menu_parent_class)->finalize(obj);
   148	}
   149	
   150	static void registrar_dbus_menu_class_init(RegistrarDBusMenuClass *klass)
   151	{
   152		G_OBJECT_CLASS(klass)->finalize = registrar_dbus_menu_finalize;
   153		registrar_dbus_menu_signals[WINDOW_REGISTERED_SIGNAL] =
   154		    g_signal_new(g_intern_static_string("window-registered"),
   155		                 registrar_dbus_menu_get_type(),
   156		                 G_SIGNAL_RUN_LAST,
   157		                 0,
   158		                 NULL,
   159		                 NULL,
   160		                 g_cclosure_user_marshal_VOID__UINT_STRING_STRING,
   161		                 G_TYPE_NONE,
   162		                 3,
   163		                 G_TYPE_UINT,
   164		                 G_TYPE_STRING,
   165		                 G_TYPE_STRING);
   166		registrar_dbus_menu_signals[WINDOW_UNREGISTERED_SIGNAL] =
   167		    g_signal_new(g_intern_static_string("window-unregistered"),
   168		                 registrar_dbus_menu_get_type(),
   169		                 G_SIGNAL_RUN_LAST,
   170		                 0,
   171		                 NULL,
   172		                 NULL,
   173		                 g_cclosure_marshal_VOID__UINT,
   174		                 G_TYPE_NONE,
   175		                 1,
   176		                 G_TYPE_UINT);
   177	}
   178	
   179	static void _dbus_registrar_dbus_menu_register_window(RegistrarDBusMenu *self,
   180	                                                      GVariant *_parameters_,
   181	                                                      GDBusMethodInvocation *invocation)
   182	{
   183		g_autoptr(GError) error = NULL;
   184		GVariantIter _arguments_iter;
   185		uint window_id               = 0U;
   186		char *menu_object_path       = NULL;
   187		GDBusMessage *_reply_message = NULL;
   188		GVariant *_reply;
   189		GVariantBuilder _reply_builder;
   190		g_variant_iter_init(&_arguments_iter, _parameters_);
   191		GVariant *value = g_variant_iter_next_value(&_arguments_iter);
   192		window_id       = g_variant_get_uint32(value);
   193		g_variant_unref(value);
   194		value            = g_variant_iter_next_value(&_arguments_iter);
   195		menu_object_path = g_variant_dup_string(value, NULL);
   196		g_variant_unref(value);
   197		registrar_dbus_menu_register_window(self,
   198		                                    window_id,
   199		                                    menu_object_path,
   200		                                    g_dbus_method_invocation_get_sender(invocation));
   201		_reply_message =
   202		    g_dbus_message_new_method_reply(g_dbus_method_invocation_get_message(invocation));
   203		g_variant_builder_init(&_reply_builder, G_VARIANT_TYPE_TUPLE);
   204		_reply = g_variant_builder_end(&_reply_builder);
   205		g_dbus_message_set_body(_reply_message, _reply);
   206		g_dbus_connection_send_message(g_dbus_method_invocation_get_connection(invocation),
   207		                               _reply_message,
   208		                               G_DBUS_SEND_MESSAGE_FLAGS_NONE,
   209		                               NULL,
   210		                               NULL);
   211		g_object_unref(invocation);
   212		g_object_unref(_reply_message);
   213		g_free(menu_object_path);
   214	}
   215	
   216	static void _dbus_registrar_dbus_menu_unregister_window(RegistrarDBusMenu *self,
   217	                                                        GVariant *_parameters_,
   218	                                                        GDBusMethodInvocation *invocation)
   219	{
   220		g_autoptr(GError) error = NULL;
   221		GVariantIter _arguments_iter;
   222		uint window_id               = 0U;
   223		GDBusMessage *_reply_message = NULL;
   224		GVariant *_reply;
   225		GVariantBuilder _reply_builder;
   226		g_variant_iter_init(&_arguments_iter, _parameters_);
   227		GVariant *value = g_variant_iter_next_value(&_arguments_iter);
   228		window_id       = g_variant_get_uint32(value);
   229		g_variant_unref(value);
   230		registrar_dbus_menu_unregister_window(self, window_id);
   231		_reply_message =
   232		    g_dbus_message_new_method_reply(g_dbus_method_invocation_get_message(invocation));
   233		g_variant_builder_init(&_reply_builder, G_VARIANT_TYPE_TUPLE);
   234		_reply = g_variant_builder_end(&_reply_builder);
   235		g_dbus_message_set_body(_reply_message, _reply);
   236		g_dbus_connection_send_message(g_dbus_method_invocation_get_connection(invocation),
   237		                               _reply_message,
   238		                               G_DBUS_SEND_MESSAGE_FLAGS_NONE,
   239		                               NULL,
   240		                               NULL);
   241		g_object_unref(invocation);
   242		g_object_unref(_reply_message);
   243	}
   244	
   245	static void _dbus_registrar_dbus_menu_get_menu_for_window(RegistrarDBusMenu *self,
   246	                                                          GVariant *_parameters_,
   247	                                                          GDBusMethodInvocation *invocation)
   248	{
   249		GVariantIter _arguments_iter;
   250		uint window                  = 0U;
   251		GDBusMessage *_reply_message = NULL;
   252		GVariant *_reply;
   253		GVariantBuilder _reply_builder;
   254		char *service = NULL;
   255		char *path    = NULL;
   256		g_variant_iter_init(&_arguments_iter, _parameters_);
   257		g_autoptr(GVariant) value = g_variant_iter_next_value(&_arguments_iter);
   258		window                    = g_variant_get_uint32(value);
   259		registrar_dbus_menu_get_menu_for_window(self, window, &service, &path);
   260		_reply_message =
   261		    g_dbus_message_new_method_reply(g_dbus_method_invocation_get_message(invocation));
   262		g_variant_builder_init(&_reply_builder, G_VARIANT_TYPE_TUPLE);
   263		g_variant_builder_add_value(&_reply_builder, g_variant_new_string(service));
   264		g_variant_builder_add_value(&_reply_builder, g_variant_new_object_path(path));
   265		_reply = g_variant_builder_end(&_reply_builder);
   266		g_dbus_message_set_body(_reply_message, _reply);
   267		g_dbus_connection_send_message(g_dbus_method_invocation_get_connection(invocation),
   268		                               _reply_message,
   269		                               G_DBUS_SEND_MESSAGE_FLAGS_NONE,
   270		                               NULL,
   271		                               NULL);
   272		g_object_unref(invocation);
   273		g_object_unref(_reply_message);
   274	}
   275	
   276	static void _dbus_registrar_dbus_menu_get_menus(RegistrarDBusMenu *self, GVariant *_parameters_,
   277	                                                GDBusMethodInvocation *invocation)
   278	{
   279		GVariantIter _arguments_iter;
   280		GDBusMessage *_reply_message = NULL;
   281		GVariant *_reply;
   282		GVariantBuilder _reply_builder;
   283		GVariant *menus = NULL;
   284		g_variant_iter_init(&_arguments_iter, _parameters_);
   285		registrar_dbus_menu_get_menus(self, &menus);
   286		_reply_message =
   287		    g_dbus_message_new_method_reply(g_dbus_method_invocation_get_message(invocation));
   288		g_variant_builder_init(&_reply_builder, G_VARIANT_TYPE_TUPLE);
   289		g_variant_builder_add_value(&_reply_builder, menus);
   290		_reply = g_variant_builder_end(&_reply_builder);
   291		g_dbus_message_set_body(_reply_message, _reply);
   292		g_dbus_connection_send_message(g_dbus_method_invocation_get_connection(invocation),
   293		                               _reply_message,
   294		                               G_DBUS_SEND_MESSAGE_FLAGS_NONE,
   295		                               NULL,
   296		                               NULL);
   297		g_object_unref(invocation);
   298		g_object_unref(_reply_message);
   299	}
   300	
   301	static void registrar_dbus_menu_dbus_interface_method_call(
   302	    GDBusConnection *connection, const char *sender, const char *object_path,
   303	    const char *interface_name, const char *method_name, GVariant *parameters,
   304	    GDBusMethodInvocation *invocation, gpointer user_data)
   305	{
   306		RegistrarDBusMenu *object = REGISTRAR_DBUS_MENU(user_data);
   307		if (g_strcmp0(method_name, "RegisterWindow") == 0)
   308		{
   309			_dbus_registrar_dbus_menu_register_window(object, parameters, invocation);
   310		}
   311		else if (g_strcmp0(method_name, "UnregisterWindow") == 0)
   312		{
   313			_dbus_registrar_dbus_menu_unregister_window(object, parameters, invocation);
   314		}
   315		else if (g_strcmp0(method_name, "GetMenuForWindow") == 0)
   316		{
   317			_dbus_registrar_dbus_menu_get_menu_for_window(object, parameters, invocation);
   318		}
   319		else if (g_strcmp0(method_name, "GetMenus") == 0)
   320		{
   321			_dbus_registrar_dbus_menu_get_menus(object, parameters, invocation);
   322		}
   323		else
   324		{
   325			g_object_unref(invocation);
   326		}
   327	}
   328	
   329	static void _dbus_registrar_dbus_menu_window_registered(GObject *_sender, uint window_id,
   330	                                                        const char *service, const char *path,
   331	                                                        gpointer *_data)
   332	{
   333		GDBusConnection *_connection;
   334		GVariant *_arguments;
   335		GVariantBuilder _arguments_builder;
   336		_connection = (GDBusConnection *)_data;
   337		g_variant_builder_init(&_arguments_builder, G_VARIANT_TYPE_TUPLE);
   338		g_variant_builder_add_value(&_arguments_builder, g_variant_new_uint32(window_id));
   339		g_variant_builder_add_value(&_arguments_builder, g_variant_new_string(service));
   340		g_variant_builder_add_value(&_arguments_builder, g_variant_new_object_path(path));
   341		_arguments = g_variant_builder_end(&_arguments_builder);
   342		g_dbus_connection_emit_signal(_connection,
   343		                              NULL,
   344		                              DBUSMENU_REG_OBJECT,
   345		                              DBUSMENU_REG_IFACE,
   346		                              "WindowRegistered",
   347		                              _arguments,
   348		                              NULL);
   349	}
   350	
   351	static void _dbus_registrar_dbus_menu_window_unregistered(GObject *_sender, uint window_id,
   352	                                                          gpointer *_data)
   353	{
   354		GDBusConnection *_connection;
   355		GVariant *_arguments;
   356		GVariantBuilder _arguments_builder;
   357		_connection = (GDBusConnection *)_data;
   358		g_variant_builder_init(&_arguments_builder, G_VARIANT_TYPE_TUPLE);
   359		g_variant_builder_add_value(&_arguments_builder, g_variant_new_uint32(window_id));
   360		_arguments = g_variant_builder_end(&_arguments_builder);
   361		g_dbus_connection_emit_signal(_connection,
   362		                              NULL,
   363		                              DBUSMENU_REG_OBJECT,
   364		                              DBUSMENU_REG_IFACE,
   365		                              "WindowUnregistered",
   366		                              _arguments,
   367		                              NULL);
   368	}
   369	static const GDBusInterfaceVTable _interface_vtable = {
   370		registrar_dbus_menu_dbus_interface_method_call, NULL, NULL
   371	};
   372	
   373	void registrar_dbus_menu_unregister(RegistrarDBusMenu *data, GDBusConnection *con)
   374	{
   375		g_dbus_connection_unregister_object(con, data->registered_object);
   376		g_signal_handlers_disconnect_by_func(data,
   377		                                     _dbus_registrar_dbus_menu_window_registered,
   378		                                     con);
   379		g_signal_handlers_disconnect_by_func(data,
   380		                                     _dbus_registrar_dbus_menu_window_unregistered,
   381		                                     con);
   382		g_object_unref(data);
   383	}
   384	
   385	uint registrar_dbus_menu_register(RegistrarDBusMenu *object, GDBusConnection *connection,
   386	                                  GError **error)
   387	{
   388		GDBusNodeInfo *info = g_dbus_node_info_new_for_xml(introspection_xml, NULL);
   389		uint result         = g_dbus_connection_register_object(connection,
   390	                                                        DBUSMENU_REG_OBJECT,
   391	                                                        (GDBusInterfaceInfo *)info->interfaces[0],
   392	                                                        &_interface_vtable,
   393	                                                        object,
   394	                                                        NULL,
   395	                                                        error);
   396		if (!result)
   397		{
   398			return 0;
   399		}
   400		object->registered_object = result;
   401		g_signal_connect(object,
   402		                 "window-registered",
   403		                 (GCallback)_dbus_registrar_dbus_menu_window_registered,
   404		                 connection);
   405		g_signal_connect(object,
   406		                 "window-unregistered",
   407		                 (GCallback)_dbus_registrar_dbus_menu_window_unregistered,
   408		                 connection);
   409		return result;
   410	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/registrar-dbusmenu.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef REGISTRARDBUSMENU_H
    20	#define REGISTRARDBUSMENU_H
    21	
    22	#include <gio/gio.h>
    23	
    24	#define DBUSMENU_REG_IFACE "com.canonical.AppMenu.Registrar"
    25	#define DBUSMENU_REG_OBJECT "/com/canonical/AppMenu/Registrar"
    26	
    27	G_BEGIN_DECLS
    28	
    29	G_DECLARE_FINAL_TYPE(RegistrarDBusMenu, registrar_dbus_menu, REGISTRAR, DBUS_MENU, GObject)
    30	uint registrar_dbus_menu_register(RegistrarDBusMenu *object, GDBusConnection *connection,
    31	                                  GError **error);
    32	void registrar_dbus_menu_unregister(RegistrarDBusMenu *data, GDBusConnection *con);
    33	
    34	G_END_DECLS
    35	
    36	#endif // REGISTRARDBUSMENU_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/registrar-main.c
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#include "registrar-main.h"
    20	#include "config.h"
    21	#include "registrar-dbusmenu.h"
    22	#include "version.h"
    23	#include <glib/gi18n.h>
    24	#include <stdbool.h>
    25	#include <stdint.h>
    26	
    27	struct _RegistrarApplication
    28	{
    29		GApplication parent;
    30		RegistrarDBusMenu *registrar;
    31		u_int32_t dbusmenu_binding;
    32		u_int32_t private_binding;
    33	};
    34	
    35	extern const char *private_xml;
    36	
    37	G_DEFINE_TYPE(RegistrarApplication, registrar_application, G_TYPE_APPLICATION)
    38	
    39	static const GOptionEntry options[4] = {
    40		{ "version", 'v', 0, G_OPTION_ARG_NONE, NULL, N_("Print version and exit"), NULL },
    41		{ "reference",
    42		  'r',
    43		  0,
    44		  G_OPTION_ARG_NONE,
    45		  NULL,
    46		  N_("Reference a registrar (need more unreferences to quit automatically)"),
    47		  NULL },
    48		{ "unreference",
    49		  'u',
    50		  0,
    51		  G_OPTION_ARG_NONE,
    52		  NULL,
    53		  N_("Unreference a registrar (need less unreferences to quit automatically, or quits if "
    54		     "refcount reaches zero)"),
    55		  NULL },
    56		{ NULL }
    57	};
    58	
    59	RegistrarApplication *registrar_application_new()
    60	{
    61		return REGISTRAR_APPLICATION(
    62		    g_object_new(registrar_application_get_type(),
    63		                 "application-id",
    64		                 "org.valapanel.AppMenu.Registrar",
    65		                 "flags",
    66		                 G_APPLICATION_HANDLES_COMMAND_LINE,
    67		                 "resource-base-path",
    68		                 "/org/valapanel/registrar",
    69		                 NULL));
    70	}
    71	static void registrar_application_activate(GApplication *base)
    72	{
    73	}
    74	static int registrar_application_handle_local_options(GApplication *application,
    75	                                                      GVariantDict *options)
    76	{
    77		if (g_variant_dict_contains(options, "version"))
    78		{
    79			g_print(_("%s - Version %s\n"), g_get_application_name(), VERSION);
    80			return 0;
    81		}
    82		return -1;
    83	}
    84	static int registrar_application_command_line(GApplication *application,
    85	                                              GApplicationCommandLine *commandline)
    86	{
    87		GVariantDict *options = g_application_command_line_get_options_dict(commandline);
    88		if (g_variant_dict_contains(options, "reference"))
    89			g_application_hold(application);
    90		if (g_variant_dict_contains(options, "unreference"))
    91			g_application_release(application);
    92		return 0;
    93	}
    94	static void registrar_application_on_dbus_name_aquired(GDBusConnection *connection,
    95	                                                       const char *name, gpointer user_data)
    96	{
    97		RegistrarApplication *self = REGISTRAR_APPLICATION(user_data);
    98		g_autoptr(GError) err      = NULL;
    99		registrar_dbus_menu_register(self->registrar, connection, &err);
   100		if (err)
   101		{
   102			g_print("%s\n", err->message);
   103		}
   104	}
   105	static void registrar_application_on_dbus_name_lost(GDBusConnection *connection, const char *name,
   106	                                                    gpointer user_data)
   107	{
   108		RegistrarApplication *self = REGISTRAR_APPLICATION(user_data);
   109		registrar_dbus_menu_unregister(self->registrar, connection);
   110	}
   111	
   112	static void registrar_application_method_call(GDBusConnection *connection, const char *sender,
   113	                                              const char *object_path, const char *interface_name,
   114	                                              const char *method_name, GVariant *parameters,
   115	                                              GDBusMethodInvocation *invocation, gpointer user_data)
   116	{
   117		GApplication *app = G_APPLICATION(user_data);
   118		if (g_strcmp0(method_name, "Reference") == 0)
   119		{
   120			g_application_hold(app);
   121		}
   122		else if (g_strcmp0(method_name, "UnReference") == 0)
   123		{
   124			g_application_release(app);
   125		}
   126		else
   127		{
   128			g_object_unref(invocation);
   129		}
   130	}
   131	static const GDBusInterfaceVTable _interface_vtable = { registrar_application_method_call,
   132		                                                NULL,
   133		                                                NULL };
   134	
   135	static int registrar_application_dbus_register(GApplication *base, GDBusConnection *connection,
   136	                                               const char *object_path, GError **error)
   137	{
   138		RegistrarApplication *self = REGISTRAR_APPLICATION(base);
   139		g_return_val_if_fail(connection != NULL, false);
   140		g_return_val_if_fail(object_path != NULL, false);
   141		bool ret = G_APPLICATION_CLASS(registrar_application_parent_class)
   142		               ->dbus_register(base, connection, object_path, error);
   143		if (*error != NULL)
   144			return false;
   145		self->dbusmenu_binding =
   146		    g_bus_own_name_on_connection(connection,
   147		                                 DBUSMENU_REG_IFACE,
   148		                                 G_BUS_NAME_OWNER_FLAGS_NONE,
   149		                                 registrar_application_on_dbus_name_aquired,
   150		                                 registrar_application_on_dbus_name_lost,
   151		                                 self,
   152		                                 NULL);
   153		GDBusNodeInfo *info = g_dbus_node_info_new_for_xml(private_xml, NULL);
   154		self->private_binding =
   155		    g_dbus_connection_register_object(connection,
   156		                                      object_path,
   157		                                      (GDBusInterfaceInfo *)info->interfaces[0],
   158		                                      &_interface_vtable,
   159		                                      self,
   160		                                      NULL,
   161		                                      error);
   162	
   163		return ret && self->dbusmenu_binding && self->private_binding;
   164	}
   165	static void registrar_application_dbus_unregister(GApplication *base, GDBusConnection *connection,
   166	                                                  const char *object_path)
   167	{
   168		RegistrarApplication *self = REGISTRAR_APPLICATION(base);
   169		g_return_if_fail(connection != NULL);
   170		g_return_if_fail(object_path != NULL);
   171		g_bus_unown_name(self->dbusmenu_binding);
   172		registrar_dbus_menu_unregister(self->registrar, connection);
   173		g_dbus_connection_unregister_object(connection, self->private_binding);
   174		self->dbusmenu_binding = 0;
   175		G_APPLICATION_CLASS(registrar_application_parent_class)
   176		    ->dbus_unregister(base, connection, object_path);
   177	}
   178	static void registrar_application_finalize(GObject *obj)
   179	{
   180		RegistrarApplication *self = REGISTRAR_APPLICATION(obj);
   181		g_clear_object(&self->registrar);
   182		G_OBJECT_CLASS(registrar_application_parent_class)->finalize(obj);
   183	}
   184	
   185	static void registrar_application_init(RegistrarApplication *application)
   186	{
   187		bindtextdomain(GETTEXT_PACKAGE, LOCALE_DIR);
   188		bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");
   189		textdomain(GETTEXT_PACKAGE);
   190		application->registrar =
   191		    REGISTRAR_DBUS_MENU(g_object_new(registrar_dbus_menu_get_type(), NULL));
   192		g_application_add_main_option_entries(G_APPLICATION(application), options);
   193	}
   194	
   195	static void registrar_application_class_init(RegistrarApplicationClass *klass)
   196	{
   197		G_APPLICATION_CLASS(klass)->handle_local_options =
   198		    registrar_application_handle_local_options;
   199		G_APPLICATION_CLASS(klass)->command_line    = registrar_application_command_line;
   200		G_APPLICATION_CLASS(klass)->dbus_register   = registrar_application_dbus_register;
   201		G_APPLICATION_CLASS(klass)->activate        = registrar_application_activate;
   202		G_APPLICATION_CLASS(klass)->dbus_unregister = registrar_application_dbus_unregister;
   203		G_OBJECT_CLASS(klass)->finalize             = registrar_application_finalize;
   204	}
   205	
   206	int main(int argc, char *argv[])
   207	{
   208		RegistrarApplication *app = registrar_application_new();
   209		return g_application_run(G_APPLICATION(app), argc, argv);
   210	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/registrar-main.h
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef REGISTRARMAIN_H
    20	#define REGISTRARMAIN_H
    21	
    22	#include <gio/gio.h>
    23	
    24	G_BEGIN_DECLS
    25	
    26	G_DECLARE_FINAL_TYPE(RegistrarApplication, registrar_application, REGISTRAR, APPLICATION,
    27	                     GApplication)
    28	
    29	RegistrarApplication *registrar_application_new();
    30	
    31	G_END_DECLS
    32	
    33	#endif // REGISTRARMAIN_H
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/registrar-marshal.list
--------------------------------------------------------------------------------
     1	VOID: UINT,STRING,STRING
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/registrar-xml.c.in
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	const char* introspection_xml = "@XML_CONTENTS@";
    20	const char* private_xml = "@PRIVATE_CONTENTS@";
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/subprojects/registrar/version.h.in
--------------------------------------------------------------------------------
     1	/*
     2	 * vala-panel-appmenu
     3	 * Copyright (C) 2018 Konstantin Pugin <ria.freelander@gmail.com>
     4	 *
     5	 * This program is free software: you can redistribute it and/or modify
     6	 * it under the terms of the GNU Lesser General Public License as published by
     7	 * the Free Software Foundation, either version 3 of the License, or
     8	 * (at your option) any later version.
     9	 *
    10	 * This program is distributed in the hope that it will be useful,
    11	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
    12	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    13	 * GNU General Public License for more details.
    14	 *
    15	 * You should have received a copy of the GNU Lesser General Public License
    16	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
    17	 */
    18	
    19	#ifndef VERSION_H
    20	#define VERSION_H
    21	
    22	#define VERSION "@VERSION@"
    23	
    24	#endif
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/vapi/config.vala.in
--------------------------------------------------------------------------------
     1	namespace Config {
     2	   public const string GETTEXT_PACKAGE = "@GETTEXT_PACKAGE@";
     3	   public const string LOCALE_DIR = "@CMAKE_INSTALL_PREFIX@/share/locale";
     4	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/vapi/libmatepanelapplet-4.0.vapi
--------------------------------------------------------------------------------
     1	/* MatePanelApplet-4.0.vapi generated by vapigen, do not modify. */
     2	
     3	[CCode (cprefix = "MatePanel", gir_namespace = "MatePanelApplet", gir_version = "4.0", lower_case_cprefix = "mate_panel_")]
     4	namespace MatePanel {
     5		[CCode (cheader_filename = "mate-panel-applet.h", type_id = "mate_panel_applet_get_type ()")]
     6		public class Applet : Gtk.EventBox, Atk.Implementor, Gtk.Buildable {
     7			[CCode (has_construct_function = false, type = "GtkWidget*")]
     8			public Applet ();
     9			public static int factory_main (string factory_id, bool out_process, GLib.Type applet_type, MatePanel.AppletFactoryCallback callback);
    10			public static int factory_setup_in_process (string factory_id, GLib.Type applet_type, MatePanel.AppletFactoryCallback callback);
    11			public MatePanel.AppletBackgroundType get_background (out Gdk.RGBA color,out Cairo.Pattern pixmap);
    12			public MatePanel.AppletFlags get_flags ();
    13			public bool get_locked_down ();
    14			public MatePanel.AppletOrient get_orient ();
    15			public string get_preferences_path ();
    16			public uint get_size ();
    17			public void request_focus (uint32 timestamp);
    18			[Version (deprecated = true, deprecated_since = "3.20")]
    19			public void set_background_widget (Gtk.Widget widget);
    20			public void set_flags (MatePanel.AppletFlags flags);
    21			public void set_size_hints (int size_hints, int n_elements, int base_size);
    22			public void setup_menu (string xml, Gtk.ActionGroup action_group);
    23			public void setup_menu_from_file (string filename, Gtk.ActionGroup action_group);
    24			[NoAccessorMethod]
    25			public string background { owned get; set; }
    26			[NoAccessorMethod]
    27			public void* closure { get; construct; }
    28			[NoAccessorMethod]
    29			public GLib.DBusConnection connection { owned get; construct; }
    30			public uint flags { get; set; }
    31			[NoAccessorMethod]
    32			public string id { owned get; construct; }
    33			[NoAccessorMethod]
    34			public bool locked { get; set; }
    35			[NoAccessorMethod]
    36			public bool locked_down { get; set; }
    37			[NoAccessorMethod]
    38			public uint orient { get; set; }
    39			[NoAccessorMethod]
    40			public string prefs_path { owned get; set; }
    41			[NoAccessorMethod]
    42			public uint size { get; set; }
    43			[NoAccessorMethod]
    44			public void* size_hints { get; set; }
    45			public virtual signal void change_background (MatePanel.AppletBackgroundType type, Gdk.RGBA color, Cairo.Pattern pixmap);
    46			public virtual signal void change_orient (uint orient);
    47			public virtual signal void change_size (int size);
    48			public virtual signal void move_focus_out_of_applet (Gtk.DirectionType direction);
    49		}
    50		[CCode (cheader_filename = "mate-panel-applet-enums.h", cprefix = "PANEL_", type_id = "mate_panel_applet_background_type_get_type ()")]
    51		public enum AppletBackgroundType {
    52			NO_BACKGROUND,
    53			COLOR_BACKGROUND,
    54			PIXMAP_BACKGROUND
    55		}
    56		[CCode (cheader_filename = "mate-panel-applet-enums.h", cprefix = "MATE_PANEL_APPLET_", type_id = "mate_panel_applet_flags_get_type ()")]
    57		[Flags]
    58		public enum AppletFlags {
    59			FLAGS_NONE,
    60			EXPAND_MAJOR,
    61			EXPAND_MINOR,
    62			HAS_HANDLE
    63		}
    64		[CCode (cheader_filename = "mate-panel-applet-enums.h", cprefix = "MATE_PANEL_APPLET_ORIENT_", type_id = "mate_panel_applet_orient_get_type ()")]
    65		public enum AppletOrient {
    66			UP,
    67			DOWN,
    68			LEFT,
    69			RIGHT
    70		}
    71		[CCode (cheader_filename = "mate-panel-applet.h", instance_pos = 2.9)]
    72		public delegate bool AppletFactoryCallback (MatePanel.Applet applet, string iid);
    73		[CCode (cheader_filename = "mate-panel-applet.h", cname = "MATE_PANEL_APPLET_FLAGS_ALL")]
    74		public const int APPLET_FLAGS_ALL;
    75		[CCode (cheader_filename = "mate-panel-applet-gsettings.h")]
    76		namespace AppletSettings
    77		{
    78			public GLib.Settings @new(Applet applet, string schema);
    79		}
    80	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/vapi/libxfce4panel-2.0.vapi
--------------------------------------------------------------------------------
     1	/* libxfce4panel-1.0.vapi generated by vapigen-0.16, do not modify. */
     2	
     3	namespace Xfce {
     4	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
     5	    public class ArrowButton : Gtk.ToggleButton, Atk.Implementor, Gtk.Buildable, Gtk.Activatable {
     6	        [CCode (has_construct_function = false, type = "GtkWidget*")]
     7	        public ArrowButton (Gtk.ArrowType arrow_type);
     8	        public Gtk.ArrowType get_arrow_type ();
     9	        public bool get_blinking ();
    10	        public void set_arrow_type (Gtk.ArrowType arrow_type);
    11	        public void set_blinking (bool blinking);
    12	        public Gtk.ArrowType arrow_type { get; set; }
    13	        public virtual signal void arrow_type_changed (Gtk.ArrowType type);
    14	    }
    15	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
    16	    public class HVBox : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
    17	        public Gtk.Orientation orientation;
    18	        [CCode (cname = "xfce_hvbox_new", has_construct_function = false, type = "GtkWidget*")]
    19	        public HVBox (Gtk.Orientation orientation, bool homogeneous, int spacing);
    20	        [CCode (cname = "xfce_hvbox_get_orientation")]
    21	        public Gtk.Orientation get_orientation ();
    22	        [CCode (cname = "xfce_hvbox_set_orientation")]
    23	        public void set_orientation (Gtk.Orientation orientation);
    24	    }
    25	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
    26	    public class PanelImage : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
    27	        [CCode (has_construct_function = false, type = "GtkWidget*")]
    28	        public PanelImage ();
    29	        public void clear ();
    30	        [CCode (has_construct_function = false, type = "GtkWidget*")]
    31	        public PanelImage.from_pixbuf (Gdk.Pixbuf pixbuf);
    32	        [CCode (has_construct_function = false, type = "GtkWidget*")]
    33	        public PanelImage.from_source (string source);
    34	        public int get_size ();
    35	        public void set_from_pixbuf (Gdk.Pixbuf pixbuf);
    36	        public void set_from_source (string source);
    37	        public void set_size (int size);
    38	        [NoAccessorMethod]
    39	        public Gdk.Pixbuf pixbuf { owned get; set; }
    40	        public int size { get; set; }
    41	        [NoAccessorMethod]
    42	        public string source { owned get; set; }
    43	    }
    44	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
    45	    public class PanelPlugin : Gtk.EventBox, Atk.Implementor, Gtk.Buildable, Xfce.PanelPluginProvider {
    46	        [CCode (has_construct_function = false)]
    47	        protected PanelPlugin ();
    48	        public void add_action_widget (Gtk.Widget widget);
    49	        public Gtk.ArrowType arrow_type ();
    50	        public void block_autohide (bool blocked);
    51	        public void block_menu ();
    52	        [NoWrapper]
    53	        public virtual void @construct ();
    54	        public void focus_widget (Gtk.Widget widget);
    55	        public unowned string get_arguments ();
    56	        public unowned string get_comment ();
    57	        public unowned string get_display_name ();
    58	        public bool get_expand ();
    59	        public bool get_locked ();
    60	        public Xfce.PanelPluginMode get_mode ();
    61	        public uint get_nrows ();
    62	        public Gtk.Orientation get_orientation ();
    63	        public unowned string get_property_base ();
    64	        [CCode (cname = "xfce_panel_plugin_xfconf_channel_new")]
    65	        public Xfconf.Channel get_channel();
    66	        public Xfce.ScreenPosition get_screen_position ();
    67	        public bool get_shrink ();
    68	        public int get_size ();
    69	        public bool get_small ();
    70	        public unowned string lookup_rc_file ();
    71	        public void menu_insert_item (Gtk.MenuItem item);
    72	        public void menu_show_about ();
    73	        public void menu_show_configure ();
    74	        public static void position_menu (Gtk.Menu menu, ref int x, ref int y, out bool push_in, void* panel_plugin);
    75	        public void position_widget (Gtk.Widget menu_widget, Gtk.Widget attach_widget, int x, int y);
    76	        public void register_menu (Gtk.Menu menu);
    77	        public void remove ();
    78	        public unowned string save_location (bool create);
    79	        public void set_expand (bool expand);
    80	        public void set_shrink (bool shrink);
    81	        public void set_small (bool small);
    82	        public void take_window (Gtk.Window window);
    83	        public void unblock_menu ();
    84	        [CCode (array_length = false, array_null_terminated = true)]
    85	        public string[] arguments { get; construct; }
    86	        public string comment { get; construct; }
    87	        public string display_name { get; construct; }
    88	        public bool expand { get; set; }
    89	        public Xfce.PanelPluginMode mode { get; }
    90	        public string name { get; construct; }
    91	        public uint nrows { get; }
    92	        public Gtk.Orientation orientation { get; }
    93	        public Xfce.ScreenPosition screen_position { get; }
    94	        public bool shrink { get; set; }
    95	        public int size { get; }
    96	        public bool small { get; set; }
    97	        public int unique_id { get; construct; }
    98	        public virtual signal void about ();
    99	        public virtual signal void configure_plugin ();
   100	        public virtual signal void free_data ();
   101	        public virtual signal void mode_changed (Xfce.PanelPluginMode mode);
   102	        public virtual signal void nrows_changed (uint rows);
   103	        public virtual signal void orientation_changed (Gtk.Orientation orientation);
   104	        public virtual signal bool remote_event (string name, GLib.Value value, uint handle);
   105	        public virtual signal void removed ();
   106	        public virtual signal void save ();
   107	        public virtual signal void screen_position_changed (Xfce.ScreenPosition position);
   108	        public virtual signal bool size_changed (int size);
   109	    }
   110	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   111	    [Compact]
   112	    public class PanelTypeModule {
   113	    }
   114	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   115	    public interface PanelPluginProvider {
   116	        public abstract void ask_remove ();
   117	        public void emit_signal (Xfce.PanelPluginProviderSignal provider_signal);
   118	        public abstract unowned string get_name ();
   119	        public abstract bool get_show_about ();
   120	        public abstract bool get_show_configure ();
   121	        public abstract int get_unique_id ();
   122	        public abstract bool remote_event (string name, GLib.Value value, uint handle);
   123	        public abstract void removed ();
   124	        public abstract void save ();
   125	        public abstract void set_locked (bool locked);
   126	        public abstract void set_mode (Xfce.PanelPluginMode mode);
   127	        public abstract void set_nrows (uint rows);
   128	        public abstract void set_screen_position (Xfce.ScreenPosition screen_position);
   129	        public abstract void set_size (int size);
   130	        public abstract void show_about ();
   131	        public abstract void show_configure ();
   132	        public signal void provider_signal (uint p0);
   133	    }
   134	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", cprefix = "XFCE_PANEL_PLUGIN_MODE_")]
   135	    public enum PanelPluginMode {
   136	        HORIZONTAL,
   137	        VERTICAL,
   138	        DESKBAR
   139	    }
   140	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", cprefix = "PROVIDER_PROP_TYPE_", has_type_id = false)]
   141	    public enum PanelPluginProviderPropType {
   142	        SET_SIZE,
   143	        SET_MODE,
   144	        SET_SCREEN_POSITION,
   145	        SET_BACKGROUND_ALPHA,
   146	        SET_NROWS,
   147	        SET_LOCKED,
   148	        SET_SENSITIVE,
   149	        SET_BACKGROUND_COLOR,
   150	        SET_BACKGROUND_IMAGE,
   151	        ACTION_REMOVED,
   152	        ACTION_SAVE,
   153	        ACTION_QUIT,
   154	        ACTION_QUIT_FOR_RESTART,
   155	        ACTION_BACKGROUND_UNSET,
   156	        ACTION_SHOW_CONFIGURE,
   157	        ACTION_SHOW_ABOUT,
   158	        ACTION_ASK_REMOVE
   159	    }
   160	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", cprefix = "PROVIDER_SIGNAL_", has_type_id = false)]
   161	    public enum PanelPluginProviderSignal {
   162	        MOVE_PLUGIN,
   163	        EXPAND_PLUGIN,
   164	        COLLAPSE_PLUGIN,
   165	        SMALL_PLUGIN,
   166	        UNSMALL_PLUGIN,
   167	        LOCK_PANEL,
   168	        UNLOCK_PANEL,
   169	        REMOVE_PLUGIN,
   170	        ADD_NEW_ITEMS,
   171	        PANEL_PREFERENCES,
   172	        PANEL_LOGOUT,
   173	        PANEL_ABOUT,
   174	        PANEL_HELP,
   175	        SHOW_CONFIGURE,
   176	        SHOW_ABOUT,
   177	        FOCUS_PLUGIN,
   178	        SHRINK_PLUGIN,
   179	        UNSHRINK_PLUGIN
   180	    }
   181	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", cprefix = "XFCE_SCREEN_POSITION_")]
   182	    public enum ScreenPosition {
   183	        NONE,
   184	        NW_H,
   185	        N,
   186	        NE_H,
   187	        NW_V,
   188	        W,
   189	        SW_V,
   190	        NE_V,
   191	        E,
   192	        SE_V,
   193	        SW_H,
   194	        S,
   195	        SE_H,
   196	        FLOATING_H,
   197	        FLOATING_V
   198	    }
   199	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", has_target = false)]
   200	    public delegate bool PanelPluginCheck (Gdk.Screen screen);
   201	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", has_target = false)]
   202	    public delegate void PanelPluginFunc (Xfce.PanelPlugin plugin);
   203	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", has_target = false)]
   204	    public delegate bool PanelPluginPreInit (int argc, string argv);
   205	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", has_target = false)]
   206	    public delegate unowned Gtk.Widget PluginConstructFunc (string name, int unique_id, string display_name, string comment, string arguments, Gdk.Screen screen);
   207	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", has_target = false)]
   208	    public delegate GLib.Type PluginInitFunc (GLib.TypeModule module, bool make_resident);
   209	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   210	    public const int LIBXFCE4PANEL_MAJOR_VERSION;
   211	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   212	    public const int LIBXFCE4PANEL_MICRO_VERSION;
   213	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   214	    public const int LIBXFCE4PANEL_MINOR_VERSION;
   215	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   216	    public const string LIBXFCE4PANEL_VERSION;
   217	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h", cname = "libxfce4panel_check_version")]
   218	    public static unowned string libxfce4panel_check_version (uint required_major, uint required_minor, uint required_micro);
   219	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   220	    public static unowned Gtk.Widget panel_create_button ();
   221	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   222	    public static unowned Gtk.Widget panel_create_toggle_button ();
   223	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   224	    public static unowned string panel_get_channel_name ();
   225	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   226	    public static unowned Gdk.Pixbuf panel_pixbuf_from_source (string source, Gtk.IconTheme icon_theme, int size);
   227	    [CCode (cheader_filename = "libxfce4panel/libxfce4panel.h")]
   228	    public static unowned Gdk.Pixbuf panel_pixbuf_from_source_at_size (string source, Gtk.IconTheme icon_theme, int dest_width, int dest_height);
   229	}
--------------------------------------------------------------------------------

File: external/vala-panel-appmenu/vapi/libxfconf-0.vapi
--------------------------------------------------------------------------------
     1	/* libxfconf-0.vapi generated by vapigen-0.16, do not modify. */
     2	
     3	namespace Xfconf {
     4		[CCode (cheader_filename = "xfconf/xfconf.h")]
     5		public class Channel : GLib.Object {
     6			[CCode (has_construct_function = false)]
     7			public Channel (string channel_name);
     8			public static unowned Xfconf.Channel @get (string channel_name);
     9			public bool get_bool (string property, bool default_value);
    10			public double get_double (string property, double default_value);
    11			public int32 get_int (string property, int32 default_value);
    12			public bool get_named_struct (string property, string struct_name, void* value_struct);
    13			public unowned GLib.HashTable get_properties (string property_base);
    14			public bool get_property (string property, GLib.Value value);
    15			public string get_string (string property, string default_value);
    16			[CCode (array_length = false)]
    17			public string[] get_string_list (string property);
    18			[CCode (sentinel = "G_TYPE_INVALID")]
    19			public bool get_struct (string property, void* value_struct, ...);
    20			public bool get_structv (string property, void* value_struct, [CCode (array_length_pos = 2)] GLib.Type[] member_types);
    21			public uint32 get_uint (string property, uint32 default_value);
    22			public uint64 get_uint64 (string property, uint64 default_value);
    23			public bool has_property (string property);
    24			public bool is_property_locked (string property);
    25			public void reset_property (string property_base, bool recursive);
    26			public bool set_bool (string property, bool value);
    27			public bool set_double (string property, double value);
    28			public bool set_int (string property, int32 value);
    29			public bool set_named_struct (string property, string struct_name, void* value_struct);
    30			public bool set_property (string property, GLib.Value value);
    31			public bool set_string (string property, string value);
    32			public bool set_string_list (string property, [CCode (array_length = false, type = "const gchar* const*")] string[] values);
    33			[CCode (sentinel = "G_TYPE_INVALID")]
    34			public bool set_struct (string property, void* value_struct, ...);
    35			public bool set_structv (string property, void* value_struct, [CCode (array_length_pos = 2)] GLib.Type[] member_types);
    36			public bool set_uint (string property, uint32 value);
    37			public bool set_uint64 (string property, uint64 value);
    38			[CCode (has_construct_function = false)]
    39			public Channel.with_property_base (string channel_name, string property_base);
    40			[NoAccessorMethod]
    41			public bool is_singleton { get; construct; }
    42			public virtual signal void property_changed (string p0, GLib.Value p1);
    43		}
    44		[CCode (cheader_filename = "xfconf/xfconf.h")]
    45		[Compact]
    46		public class Property {
    47			[CCode (cname = "xfconf_g_property_bind")]
    48			public static ulong bind (Xfconf.Channel channel, string xfconf_property, GLib.Type xfconf_property_type, void* object, string object_property);
    49			[CCode (cname = "xfconf_g_property_bind_gdkcolor")]
    50			public static ulong bind_gdkcolor (Xfconf.Channel channel, string xfconf_property, void* object, string object_property);
    51			[CCode (cname = "xfconf_g_property_unbind")]
    52			public static void unbind (ulong id);
    53			[CCode (cname = "xfconf_g_property_unbind_all")]
    54			public static void unbind_all (void* channel_or_object);
    55			[CCode (cname = "xfconf_g_property_unbind_by_property")]
    56			public static void unbind_by_property (Xfconf.Channel channel, string xfconf_property, void* object, string object_property);
    57		}
    58		[CCode (cheader_filename = "xfconf/xfconf.h", cprefix = "XFCONF_ERROR_")]
    59		public errordomain Error {
    60			UNKNOWN,
    61			CHANNEL_NOT_FOUND,
    62			PROPERTY_NOT_FOUND,
    63			READ_FAILURE,
    64			WRITE_FAILURE,
    65			PERMISSION_DENIED,
    66			INTERNAL_ERROR,
    67			NO_BACKEND,
    68			INVALID_PROPERTY,
    69			INVALID_CHANNEL
    70		}
    71		[CCode (cheader_filename = "xfconf/xfconf.h")]
    72		public static void array_free (GLib.PtrArray arr);
    73		[CCode (cheader_filename = "xfconf/xfconf.h")]
    74		public static bool init () throws Xfconf.Error;
    75		[CCode (array_length = false, cheader_filename = "xfconf/xfconf.h")]
    76		public static string[] list_channels ();
    77		[CCode (cheader_filename = "xfconf/xfconf.h")]
    78		public static void named_struct_register (string struct_name, [CCode (array_length_pos = 1)] GLib.Type[] member_types);
    79		[CCode (cheader_filename = "xfconf/xfconf.h")]
    80		public static void shutdown ();
    81	}
--------------------------------------------------------------------------------

File: .gitignore
--------------------------------------------------------------------------------
     1	*.gmo
     2	*.la
     3	*.lo
     4	*.swp
     5	*.tar.*
     6	.deps
     7	.libs
     8	ChangeLog
     9	INSTALL
    10	Makefile
    11	aclocal.m4
    12	autom4te.cache
    13	build
    14	compile
    15	config.*
    16	configure
    17	depcomp
    18	install-sh
    19	intltool*
    20	libtool
    21	missing
    22	mkinstalldirs
    23	panel-plugin/*.desktop
    24	panel-plugin/*.desktop.in
    25	po/Makefile.in.in
    26	po/POTFILES
    27	stamp-*
    28	m4
    29	ABOUT-NLS
    30	po/Makevars.template
    31	po/Rules-quot
    32	po/boldquot.sed
    33	po/en@boldquot.header
    34	po/en@quot.header
    35	po/insert-header.sin
    36	po/quot.sed
    37	po/remove-potcdate.sed
    38	po/remove-potcdate.sin
    39	po/*.pot
--------------------------------------------------------------------------------

File: .gitlab-ci.yml
--------------------------------------------------------------------------------
     1	include:
     2	  - project: 'xfce/xfce4-dev-tools'
     3	    file: '/ci/build_project.yml'
     4	
--------------------------------------------------------------------------------

File: .gitmodules
--------------------------------------------------------------------------------
     1	[submodule "external/vala-panel-appmenu"]
     2		path = external/vala-panel-appmenu
     3		url = https://gitlab.com/vala-panel-project/vala-panel-appmenu.git
--------------------------------------------------------------------------------

File: icons/256x256/Makefile.am
--------------------------------------------------------------------------------
     1	# $Id$
     2	
     3	iconsdir = $(datadir)/icons/hicolor/48x48/apps
     4	icons_DATA =								\
     5		xfce4-newtonmenu-plugin.png
     6	
     7	EXTRA_DIST =								\
     8		$(icons_DATA)
     9	
    10	# vi:set ts=8 sw=8 noet ai nocindent syntax=automake:
--------------------------------------------------------------------------------

File: icons/Makefile.am
--------------------------------------------------------------------------------
     1	# $Id$
     2	
     3	SUBDIRS =								\
     4		256x256								\
     5		scalable
     6	
     7	EXTRA_DIST =                                                            \
     8		meson.build                                                     \
     9		$(NULL)
    10	
    11	gtk_update_icon_cache = gtk-update-icon-cache -f -t $(datadir)/icons/hicolor
    12	
    13	install-data-hook:
    14		@-if test -z "$(DESTDIR)"; then					\
    15	                echo "Updating Gtk icon cache.";			\
    16	                $(gtk_update_icon_cache);				\
    17	        else								\
    18	                echo "*** Icon cache not updated. Remember to run:";	\
    19			echo "***";						\
    20	                echo "***   $(gtk_update_icon_cache)";			\
    21			echo "***";						\
    22	        fi
    23	
    24	# vi:set ts=8 sw=8 noet ai nocindent syntax=automake:
--------------------------------------------------------------------------------

File: icons/meson.build
--------------------------------------------------------------------------------
     1	install_data(
     2	  '256x256' / 'xfce4-newtonmenu-plugin.png',
     3	  install_dir: get_option('prefix') / get_option('datadir') / 'icons' / 'hicolor' / '256x256' / 'apps',
     4	)
     5	
     6	install_data(
     7	  'scalable' / 'xfce4-newtonmenu-plugin.svg',
     8	  install_dir: get_option('prefix') / get_option('datadir') / 'icons' / 'hicolor' / 'scalable' / 'apps',
     9	)
--------------------------------------------------------------------------------

File: icons/scalable/Makefile.am
--------------------------------------------------------------------------------
     1	# $Id$
     2	
     3	iconsdir = $(datadir)/icons/hicolor/scalable/apps
     4	icons_DATA =								\
     5		xfce4-newtonmenu-plugin.svg
     6	
     7	EXTRA_DIST =								\
     8		$(icons_DATA)
     9	
    10	# vi:set ts=8 sw=8 noet ai nocindent syntax=automake:
--------------------------------------------------------------------------------

File: Makefile.am
--------------------------------------------------------------------------------
     1	@SET_MAKE@
     2	
     3	AUTOMAKE_OPTIONS = subdir-objects
     4	ACLOCAL_AMFLAGS = -I m4 ${ACLOCAL_FLAGS}
     5	
     6	SUBDIRS =	\
     7		icons	\
     8		panel-plugin \
     9		po
    10	
    11	EXTRA_DIST = \
    12		meson.build \
    13		po/meson.build \
    14		xfce-revision.h.in \
    15		$(NULL)
    16	
    17	distclean-local:
    18		rm -rf *.cache *~
    19	
    20	distuninstallcheck_listfiles =                                          \
    21	        find . -type f -print | grep -v ./share/icons/hicolor/icon-theme.cache
    22	
    23	rpm: dist
    24		rpmbuild -ta $(PACKAGE)-$(VERSION).tar.gz
    25		@rm -f $(PACKAGE)-$(VERSION).tar.gz
    26	
    27	.PHONY: ChangeLog
    28	
    29	ChangeLog: Makefile
    30		(GIT_DIR=$(top_srcdir)/.git git log > .changelog.tmp \
    31		&& mv .changelog.tmp ChangeLog; rm -f .changelog.tmp) \
    32		|| (touch ChangeLog; echo 'Git directory not found: installing possibly empty changelog.' >&2)
    33	
    34	dist-hook: ChangeLog
    35	
    36	# vi:set ts=8 sw=8 noet ai nocindent syntax=automake:
--------------------------------------------------------------------------------

File: meson.build
--------------------------------------------------------------------------------
     1	project(
     2	  'xfce4-newtonmenu-plugin',
     3	  'c',
     4	  version: '0.0.4-dev',
     5	  license: 'GPL-2.0-or-later',
     6	  meson_version: '>= 0.54.0',
     7	  default_options: [
     8	    'c_std=gnu11',
     9	    'buildtype=debugoptimized',
    10	    'warning_level=2',
    11	  ]
    12	)
    13	
    14	project_namespace = 'panel-plugins'
    15	pkgdatadir = get_option('prefix') / get_option('datadir') / meson.project_name()
    16	copyright_year = '2025'
    17	
    18	cc = meson.get_compiler('c')
    19	pkgconfig = import('pkgconfig')
    20	gnome = import('gnome')
    21	i18n = import('i18n')
    22	
    23	dependency_versions = {
    24	  'glib': '>= 2.66.0',
    25	  'gtk': '>= 3.24.0',
    26	  'xfce4': '>= 4.16.0',
    27	}
    28	
    29	glib = dependency('glib-2.0', version: dependency_versions['glib'])
    30	gtk = dependency('gtk+-3.0', version: dependency_versions['gtk'])
    31	libxfce4panel = dependency('libxfce4panel-2.0', version: dependency_versions['xfce4'])
    32	libxfce4ui = dependency('libxfce4ui-2', version: dependency_versions['xfce4'])
    33	libxfce4util = dependency('libxfce4util-1.0', version: dependency_versions['xfce4'])
    34	
    35	feature_cflags = []
    36	if cc.check_header('string.h')
    37	  feature_cflags += '-DHAVE_STRING_H=1'
    38	endif
    39	
    40	extra_cflags = []
    41	extra_cflags_check = [
    42	  '-Wmissing-declarations',
    43	  '-Wmissing-noreturn',
    44	  '-Wold-style-definition',
    45	  '-Wredundant-decls',
    46	  '-Wpointer-arith',
    47	  '-Wcast-align',
    48	  '-Winit-self',
    49	  '-Wshadow',
    50	  '-Wmissing-include-dirs',
    51	  '-Wundef',
    52	  '-Wformat',
    53	  '-Wformat-security',
    54	  '-Wformat-y2k',
    55	  '-Wnested-externs',
    56	  '-Wno-unused-parameter',
    57	  '-Wno-declaration-after-statement',
    58	  '-Wno-missing-field-initializers',
    59	  '-Werror=implicit-function-declaration',
    60	  '-Wno-error=deprecated-declarations',
    61	]
    62	
    63	optimization = get_option('optimization')
    64	if get_option('debug') and optimization in ['0', 'g']
    65	  extra_cflags_check += '-fstack-protector-strong'
    66	  extra_cflags += [
    67	    '-DDEBUG=1',
    68	    '-DDEBUG_TRACE=1',
    69	    '-DG_ENABLE_DEBUG',
    70	  ]
    71	elif optimization in ['3', 'minsize']
    72	  extra_cflags += [
    73	    '-DNDEBUG',
    74	    '-DG_DISABLE_CAST_CHECKS',
    75	    '-DG_DISABLE_ASSERT',
    76	  ]
    77	endif
    78	
    79	if dependency_versions.has_key('glib')
    80	  glib_version_parts = dependency_versions['glib'].split(' ')
    81	  glib_min_version_parts = glib_version_parts[1].split('.')
    82	  glib_min_version_define = 'GLIB_VERSION_@0@_@1@'.format(glib_min_version_parts[0], glib_min_version_parts[1])
    83	  extra_cflags += [
    84	    '-DGLIB_VERSION_MIN_REQUIRED=@0@'.format(glib_min_version_define),
    85	    '-DGLIB_VERSION_MAX_ALLOWED=@0@'.format(glib_min_version_define),
    86	    '-DG_LOG_DOMAIN="@0@"'.format(meson.project_name()),
    87	    '-DG_LOG_USE_STRUCTURED=1',
    88	  ]
    89	endif
    90	
    91	version_parts = meson.project_version().split('-dev')[0].split('.')
    92	version_short = '@0@.@1@'.format(version_parts[0], version_parts[1])
    93	
    94	extra_cflags += [
    95	  '-DPACKAGE="@0@"'.format(meson.project_name()),
    96	  '-DPACKAGE_NAME="@0@"'.format(meson.project_name()),
    97	  '-DPACKAGE_VERSION="@0@"'.format(meson.project_version()),
    98	  '-DVERSION="@0@"'.format(meson.project_version()),
    99	  '-DVERSION_SHORT="@0@"'.format(version_short),
   100	  '-DPACKAGE_STRING="@0@ @1@"'.format(meson.project_name(), meson.project_version()),
   101	  '-DPACKAGE_DATADIR="@0@"'.format(pkgdatadir),
   102	  '-DCOPYRIGHT_YEAR="@0@"'.format(copyright_year),
   103	  '-DPACKAGE_LOCALE_DIR="@0@"'.format(get_option('prefix') / get_option('localedir')),
   104	  '-DPACKAGE_URL="https://docs.xfce.org/@0@/@1@/start"'.format(project_namespace, meson.project_name()),
   105	  '-DPACKAGE_BUGREPORT="https://gitlab.xfce.org/@0@/@1@/-/issues"'.format(project_namespace, meson.project_name()),
   106	  '-DGETTEXT_PACKAGE="@0@"'.format(meson.project_name()),
   107	  '-DPREFIX="@0@"'.format(get_option('prefix')),
   108	  '-DBINDIR="@0@"'.format(get_option('prefix') / get_option('bindir')),
   109	  '-DDATADIR="@0@"'.format(get_option('prefix') / get_option('datadir')),
   110	  '-DDOCDIR="@0@"'.format(get_option('prefix') / 'doc' / meson.project_name()),
   111	  '-DINCLUDEDIR="@0@"'.format(get_option('prefix') / get_option('includedir')),
   112	  '-DLIBDIR="@0@"'.format(get_option('prefix') / get_option('libdir')),
   113	  '-DLIBEXECDIR="@0@"'.format(get_option('prefix') / get_option('libexecdir')),
   114	  '-DLOCALEDIR="@0@"'.format(get_option('prefix') / get_option('localedir')),
   115	  '-DLOCALSTATEDIR="@0@"'.format(get_option('prefix') / get_option('localstatedir')),
   116	  '-DSBINDIR="@0@"'.format(get_option('prefix') / get_option('sbindir')),
   117	  '-DSYSCONFDIR="@0@"'.format(get_option('prefix') / get_option('sysconfdir')),
   118	  '-DHAVE_XFCE_REVISION_H=1',
   119	]
   120	
   121	add_project_arguments(cc.get_supported_arguments(extra_cflags_check), language: 'c')
   122	add_project_arguments(feature_cflags, language: 'c')
   123	add_project_arguments(extra_cflags, language: 'c')
   124	
   125	xfce_revision_h = vcs_tag(
   126	  command: ['git', 'rev-parse', '--short', 'HEAD'],
   127	  fallback: 'UNKNOWN',
   128	  input: 'xfce-revision.h.in',
   129	  output: 'xfce-revision.h',
   130	  replace_string: '@REVISION@',
   131	)
   132	
   133	subdir('icons')
   134	subdir('panel-plugin')
   135	subdir('po')
--------------------------------------------------------------------------------

File: NEWS
--------------------------------------------------------------------------------
     1	0.0.1
     2	=====
     3	- Enter here some release highlights.
     4	- Updated translations: John Doo (be), Foo Bar (nl).
     5	- New translations: Anton (de).
--------------------------------------------------------------------------------

File: panel-plugin/Makefile.am
--------------------------------------------------------------------------------
     1	AM_CPPFLAGS = \
     2		-I$(top_srcdir) \
     3		-DG_LOG_DOMAIN=\"xfce4-newtonmenu-plugin\" \
     4		-DPACKAGE_LOCALE_DIR=\"$(localedir)\" \
     5		$(PLATFORM_CPPFLAGS)
     6	
     7	#
     8	# newtonmenu plugin
     9	#
    10	plugin_LTLIBRARIES = \
    11		libnewtonmenu.la
    12	
    13	plugindir = \
    14		$(libdir)/xfce4/panel/plugins
    15	
    16	libnewtonmenu_la_SOURCES = \
    17		newtonmenu.c \
    18		newtonmenu.h \
    19		newtonmenu-dialogs.c \
    20		newtonmenu-dialogs.h
    21	
    22	libnewtonmenu_la_CFLAGS = \
    23		$(GLIB_CFLAGS) \
    24		$(GTK_CFLAGS) \
    25		$(LIBXFCE4UTIL_CFLAGS) \
    26		$(LIBXFCE4UI_CFLAGS) \
    27		$(LIBXFCE4PANEL_CFLAGS) \
    28		$(PLATFORM_CFLAGS)
    29	
    30	libnewtonmenu_la_LDFLAGS = \
    31	       -avoid-version \
    32	       -module \
    33	       -no-undefined \
    34	       -export-symbols-regex '^xfce_panel_module_(preinit|init|construct)' \
    35	       $(PLATFORM_LDFLAGS)
    36	
    37	libnewtonmenu_la_LIBADD = \
    38		$(GLIB_LIBS) \
    39		$(GTK_LIBS) \
    40		$(LIBXFCE4UTIL_LIBS) \
    41		$(LIBXFCE4UI_LIBS) \
    42		$(LIBXFCE4PANEL_LIBS)
    43	
    44	#
    45	# Desktop file
    46	#
    47	desktopdir =								\
    48		$(datadir)/xfce4/panel/plugins
    49	
    50	newtonmenu.desktop: newtonmenu.desktop.in
    51		$(AM_V_GEN)$(MSGFMT) --desktop --template $< -d $(top_srcdir)/po -o $@
    52	
    53	desktop_DATA =								\
    54		newtonmenu.desktop
    55	
    56	EXTRA_DIST =								\
    57		meson.build							\
    58		newtonmenu.desktop.in
    59	
    60	CLEANFILES =								\
    61		$(desktop_DATA)
    62	
    63	# vi:set ts=8 sw=8 noet ai nocindent syntax=automake:
--------------------------------------------------------------------------------

File: panel-plugin/meson.build
--------------------------------------------------------------------------------
     1	newtonmenu_resources_xml = 'newtonmenu.gresource.xml'
     2	newtonmenu_config_ui_file = 'newtonmenu-dialog.ui'
     3	newtonmenu_force_quit_ui_file = 'newtonmenu-force-quit-dialog.ui'
     4	
     5	newtonmenu_resources_compiled = gnome.compile_resources('newtonmenu-ui-resources',
     6	  newtonmenu_resources_xml,
     7	  source_dir: meson.current_source_dir(),
     8	  c_name: 'newtonmenu_ui',
     9	  dependencies: [
    10	    files(newtonmenu_config_ui_file),
    11	    files(newtonmenu_force_quit_ui_file) 
    12	  ]
    13	)
    14	
    15	plugin_sources = [
    16	  'newtonmenu-dialogs.c',
    17	  'newtonmenu-dialogs.h',
    18	  'newtonmenu-force-quit-dialog.c',
    19	  'newtonmenu-force-quit-dialog.h',
    20	  'newtonmenu.c',
    21	  'newtonmenu.h',
    22	  xfce_revision_h,
    23	  newtonmenu_resources_compiled
    24	]
    25	
    26	plugin_install_subdir = 'xfce4' / 'panel' / 'plugins'
    27	
    28	exo_dep = dependency('exo-2', version: '>=0.12.0', required: true)
    29	libwnck_dep = dependency('libwnck-3.0', version: '>=3.0', required: true)
    30	
    31	plugin_lib = shared_module(
    32	  'newtonmenu',
    33	  plugin_sources,
    34	  gnu_symbol_visibility: 'hidden',
    35	  c_args: [
    36	    '-DG_LOG_DOMAIN="@0@"'.format('xfce4-newtonmenu-plugin'),
    37	    '-DWNCK_I_KNOW_THIS_IS_UNSTABLE'
    38	  ],
    39	  include_directories: [
    40	    include_directories('..')
    41	  ],
    42	  dependencies: [
    43	    glib,
    44	    gtk,
    45	    libxfce4panel,
    46	    libxfce4ui,
    47	    libxfce4util,
    48	    exo_dep,
    49	    libwnck_dep 
    50	  ],
    51	  install: true,
    52	  install_dir: get_option('prefix') / get_option('libdir') / plugin_install_subdir
    53	)
    54	
    55	i18n.merge_file(
    56	  input: 'newtonmenu.desktop.in',
    57	  output: 'newtonmenu.desktop',
    58	  po_dir: '..' / 'po',
    59	  type: 'desktop',
    60	  install: true,
    61	  install_dir: get_option('prefix') / get_option('datadir') / plugin_install_subdir
    62	)--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu.c
--------------------------------------------------------------------------------
     1	#ifdef HAVE_CONFIG_H
     2	#include <config.h>
     3	#endif
     4	#ifdef HAVE_STRING_H
     5	#include <string.h>
     6	#endif
     7	
     8	#include <gtk/gtk.h>
     9	#include <libxfce4util/libxfce4util.h>
    10	#include <libxfce4panel/libxfce4panel.h>
    11	#include <gdk/gdkkeysyms.h>
    12	#include <libintl.h>
    13	
    14	#include "newtonmenu.h"
    15	#include "newtonmenu-dialogs.h" 
    16	#include "newtonmenu-force-quit-dialog.h"
    17	
    18	#define DEFAULT_DISPLAY_ICON TRUE
    19	#define DEFAULT_ICON_NAME "xfce4-newtonmenu-plugin"
    20	#define DEFAULT_LABEL_TEXT N_("Menu")
    21	
    22	#define DEFAULT_CONFIRM_LOGOUT FALSE
    23	#define DEFAULT_CONFIRM_RESTART TRUE
    24	#define DEFAULT_CONFIRM_SHUTDOWN TRUE
    25	#define DEFAULT_CONFIRM_FORCE_QUIT FALSE 
    26	
    27	static void newtonmenu_construct (XfcePanelPlugin *plugin);
    28	static void newtonmenu_read (newtonmenuPlugin *newtonmenu);
    29	static void newtonmenu_free (XfcePanelPlugin *plugin, newtonmenuPlugin *newtonmenu);
    30	static void newtonmenu_orientation_changed (XfcePanelPlugin *plugin, GtkOrientation orientation, newtonmenuPlugin *newtonmenu);
    31	static gboolean newtonmenu_size_changed (XfcePanelPlugin *plugin, gint size, newtonmenuPlugin *newtonmenu);
    32	static newtonmenuPlugin* newtonmenu_new (XfcePanelPlugin *plugin);
    33	static void newtonmenu_popup_menu_on_toggle (GtkToggleButton *toggle_button, newtonmenuPlugin *newtonmenu);
    34	static void newtonmenu_menu_deactivate_cb (GtkMenu *menu, newtonmenuPlugin *newtonmenu);
    35	
    36	static void on_about_this_pc_activate(GtkMenuItem *menuitem, gpointer user_data);
    37	static void on_system_settings_activate(GtkMenuItem *menuitem, gpointer user_data);
    38	static void on_run_command_activate(GtkMenuItem *menuitem, gpointer user_data);
    39	static void on_force_quit_activate(GtkMenuItem *menuitem, gpointer user_data);
    40	static void on_sleep_activate(GtkMenuItem *menuitem, gpointer user_data);
    41	static void on_restart_activate(GtkMenuItem *menuitem, gpointer user_data);
    42	static void on_shutdown_activate(GtkMenuItem *menuitem, gpointer user_data);
    43	static void on_lock_screen_activate(GtkMenuItem *menuitem, gpointer user_data);
    44	static void on_log_out_activate(GtkMenuItem *menuitem, gpointer user_data);
    45	
    46	static void execute_command(const gchar *command);
    47	
    48	
    49	XFCE_PANEL_PLUGIN_REGISTER (newtonmenu_construct);
    50	
    51	
    52	static void execute_command(const gchar *command)
    53	{
    54	    GError *error = NULL;
    55	    if (!g_spawn_command_line_async (command, &error))
    56	    {
    57	        g_warning ("Failed to execute command '%s': %s", command, error ? error->message : "Unknown error");
    58	        if (error) g_error_free (error);
    59	    }
    60	}
    61	
    62	void
    63	newtonmenu_save (XfcePanelPlugin *plugin,
    64	             newtonmenuPlugin    *newtonmenu)
    65	{
    66	  XfceRc *rc;
    67	  gchar  *file;
    68	
    69	  g_return_if_fail(newtonmenu != NULL);
    70	  g_return_if_fail(XFCE_IS_PANEL_PLUGIN(plugin));
    71	
    72	  file = xfce_panel_plugin_save_location (plugin, TRUE);
    73	
    74	  if (G_UNLIKELY (file == NULL))
    75	    {
    76	       return;
    77	    }
    78	
    79	  rc = xfce_rc_simple_open (file, FALSE);
    80	  g_free (file);
    81	
    82	  if (G_LIKELY (rc != NULL))
    83	    {
    84	      xfce_rc_write_bool_entry (rc, "DisplayIcon", newtonmenu->display_icon_prop);
    85	
    86	      if (newtonmenu->icon_name_prop)
    87	        xfce_rc_write_entry (rc, "IconName", newtonmenu->icon_name_prop);
    88	      else
    89	        xfce_rc_write_entry (rc, "IconName", "");
    90	
    91	      if (newtonmenu->label_text_prop)
    92	        xfce_rc_write_entry (rc, "LabelText", newtonmenu->label_text_prop);
    93	      else
    94	        xfce_rc_write_entry (rc, "LabelText", "");
    95	      
    96	      xfce_rc_write_bool_entry(rc, "ConfirmLogout", newtonmenu->confirm_logout_prop);
    97	      xfce_rc_write_bool_entry(rc, "ConfirmRestart", newtonmenu->confirm_restart_prop);
    98	      xfce_rc_write_bool_entry(rc, "ConfirmShutdown", newtonmenu->confirm_shutdown_prop);
    99	      xfce_rc_write_bool_entry(rc, "ConfirmForceQuit", newtonmenu->confirm_force_quit_prop);
   100	
   101	      xfce_rc_close (rc);
   102	    }
   103	}
   104	
   105	static void
   106	newtonmenu_read (newtonmenuPlugin *newtonmenu)
   107	{
   108	  XfceRc      *rc;
   109	  gchar       *file;
   110	  const gchar *value;
   111	
   112	  g_return_if_fail(newtonmenu != NULL);
   113	  g_return_if_fail(newtonmenu->plugin != NULL);
   114	
   115	  file = xfce_panel_plugin_save_location (newtonmenu->plugin, TRUE);
   116	
   117	  if (G_LIKELY (file != NULL))
   118	    {
   119	      rc = xfce_rc_simple_open (file, TRUE);
   120	      g_free (file);
   121	
   122	      if (G_LIKELY (rc != NULL))
   123	        {
   124	          newtonmenu->display_icon_prop = xfce_rc_read_bool_entry (rc, "DisplayIcon", DEFAULT_DISPLAY_ICON);
   125	
   126	          value = xfce_rc_read_entry (rc, "IconName", DEFAULT_ICON_NAME);
   127	          g_free(newtonmenu->icon_name_prop);
   128	          newtonmenu->icon_name_prop = g_strdup (value);
   129	
   130	          value = xfce_rc_read_entry (rc, "LabelText", _(DEFAULT_LABEL_TEXT));
   131	          g_free(newtonmenu->label_text_prop);
   132	          newtonmenu->label_text_prop = g_strdup (value);
   133	
   134	          newtonmenu->confirm_logout_prop = xfce_rc_read_bool_entry(rc, "ConfirmLogout", DEFAULT_CONFIRM_LOGOUT);
   135	          newtonmenu->confirm_restart_prop = xfce_rc_read_bool_entry(rc, "ConfirmRestart", DEFAULT_CONFIRM_RESTART);
   136	          newtonmenu->confirm_shutdown_prop = xfce_rc_read_bool_entry(rc, "ConfirmShutdown", DEFAULT_CONFIRM_SHUTDOWN);
   137	          newtonmenu->confirm_force_quit_prop = xfce_rc_read_bool_entry(rc, "ConfirmForceQuit", DEFAULT_CONFIRM_FORCE_QUIT);
   138	          
   139	          xfce_rc_close (rc);
   140	          return;
   141	        }
   142	    }
   143	
   144	  newtonmenu->display_icon_prop = DEFAULT_DISPLAY_ICON;
   145	  g_free(newtonmenu->icon_name_prop);
   146	  newtonmenu->icon_name_prop = g_strdup (DEFAULT_ICON_NAME);
   147	  g_free(newtonmenu->label_text_prop);
   148	  newtonmenu->label_text_prop = g_strdup (_(DEFAULT_LABEL_TEXT));
   149	
   150	  newtonmenu->confirm_logout_prop = DEFAULT_CONFIRM_LOGOUT;
   151	  newtonmenu->confirm_restart_prop = DEFAULT_CONFIRM_RESTART;
   152	  newtonmenu->confirm_shutdown_prop = DEFAULT_CONFIRM_SHUTDOWN;
   153	  newtonmenu->confirm_force_quit_prop = DEFAULT_CONFIRM_FORCE_QUIT;
   154	}
   155	
   156	void
   157	newtonmenu_update_display (newtonmenuPlugin *newtonmenu)
   158	{
   159	    GtkIconTheme *icon_theme = NULL;
   160	    gint panel_icon_size;
   161	
   162	    g_return_if_fail (newtonmenu != NULL);
   163	    g_return_if_fail (newtonmenu->plugin != NULL);
   164	    g_return_if_fail (GTK_IS_BUTTON (newtonmenu->button));
   165	    g_return_if_fail (GTK_IS_BOX (newtonmenu->button_box));
   166	    g_return_if_fail (GTK_IS_IMAGE (newtonmenu->icon_image));
   167	    g_return_if_fail (GTK_IS_LABEL (newtonmenu->label_widget));
   168	
   169	    if (newtonmenu->display_icon_prop)
   170	    {
   171	        gtk_widget_show (newtonmenu->icon_image);
   172	        gtk_widget_hide (newtonmenu->label_widget);
   173	
   174	        icon_theme = gtk_icon_theme_get_for_screen (gtk_widget_get_screen (GTK_WIDGET (newtonmenu->plugin)));
   175	        panel_icon_size = xfce_panel_plugin_get_icon_size (newtonmenu->plugin);
   176	        
   177	        if (newtonmenu->icon_name_prop && strlen(newtonmenu->icon_name_prop) > 0) {
   178	            if (gtk_icon_theme_has_icon(icon_theme, newtonmenu->icon_name_prop)) {
   179	                 gtk_image_set_from_icon_name (GTK_IMAGE (newtonmenu->icon_image),
   180	                                          newtonmenu->icon_name_prop,
   181	                                          GTK_ICON_SIZE_BUTTON);
   182	                 gtk_image_set_pixel_size(GTK_IMAGE(newtonmenu->icon_image), panel_icon_size);
   183	            } else if (g_file_test(newtonmenu->icon_name_prop, G_FILE_TEST_IS_REGULAR)) {
   184	                GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(newtonmenu->icon_name_prop, panel_icon_size, panel_icon_size, NULL);
   185	                if (pixbuf) {
   186	                    gtk_image_set_from_pixbuf(GTK_IMAGE(newtonmenu->icon_image), pixbuf);
   187	                    g_object_unref(pixbuf);
   188	                } else {
   189	                    gtk_image_set_from_icon_name (GTK_IMAGE (newtonmenu->icon_image), "image-missing", GTK_ICON_SIZE_BUTTON);
   190	                    gtk_image_set_pixel_size(GTK_IMAGE(newtonmenu->icon_image), panel_icon_size);
   191	                }
   192	            } else {
   193	                 gtk_image_set_from_icon_name (GTK_IMAGE (newtonmenu->icon_image), "image-missing", GTK_ICON_SIZE_BUTTON);
   194	                 gtk_image_set_pixel_size(GTK_IMAGE(newtonmenu->icon_image), panel_icon_size);
   195	            }
   196	        } else {
   197	             gtk_image_set_from_icon_name (GTK_IMAGE (newtonmenu->icon_image), "image-missing", GTK_ICON_SIZE_BUTTON);
   198	             gtk_image_set_pixel_size(GTK_IMAGE(newtonmenu->icon_image), panel_icon_size);
   199	        }
   200	    }
   201	    else
   202	    {
   203	        gtk_widget_hide (newtonmenu->icon_image);
   204	        gtk_widget_show (newtonmenu->label_widget);
   205	        gtk_label_set_text (GTK_LABEL (newtonmenu->label_widget), 
   206	                            newtonmenu->label_text_prop ? _(newtonmenu->label_text_prop) : "");
   207	    }
   208	
   209	    gtk_widget_queue_resize (GTK_WIDGET(newtonmenu->plugin));
   210	}
   211	
   212	static newtonmenuPlugin *
   213	newtonmenu_new (XfcePanelPlugin *plugin)
   214	{
   215	  newtonmenuPlugin   *newtonmenu;
   216	  GtkOrientation  orientation;
   217	
   218	  newtonmenu = g_slice_new0 (newtonmenuPlugin);
   219	  newtonmenu->plugin = plugin;
   220	  newtonmenu_read (newtonmenu);
   221	
   222	  orientation = xfce_panel_plugin_get_orientation (plugin);
   223	
   224	  newtonmenu->event_box = gtk_event_box_new ();
   225	  gtk_widget_show (newtonmenu->event_box);
   226	
   227	  newtonmenu->button = gtk_toggle_button_new (); 
   228	  gtk_button_set_relief (GTK_BUTTON (newtonmenu->button), GTK_RELIEF_NONE);
   229	  gtk_widget_show (newtonmenu->button);
   230	  gtk_container_add (GTK_CONTAINER (newtonmenu->event_box), newtonmenu->button);
   231	
   232	  newtonmenu->button_box = gtk_box_new (orientation, 2);
   233	  gtk_container_set_border_width(GTK_CONTAINER(newtonmenu->button_box), 2);
   234	  gtk_widget_show (newtonmenu->button_box);
   235	  gtk_container_add (GTK_CONTAINER (newtonmenu->button), newtonmenu->button_box);
   236	
   237	  newtonmenu->icon_image = gtk_image_new ();
   238	  gtk_box_pack_start (GTK_BOX (newtonmenu->button_box), newtonmenu->icon_image, FALSE, FALSE, 0);
   239	
   240	  newtonmenu->label_widget = gtk_label_new ("");
   241	  gtk_box_pack_start (GTK_BOX (newtonmenu->button_box), newtonmenu->label_widget, TRUE, TRUE, 0);
   242	  
   243	  newtonmenu_update_display (newtonmenu);
   244	  newtonmenu->main_menu = NULL;
   245	
   246	  return newtonmenu;
   247	}
   248	
   249	static void
   250	newtonmenu_free (XfcePanelPlugin *plugin,
   251	             newtonmenuPlugin    *newtonmenu)
   252	{
   253	  GtkWidget *dialog;
   254	
   255	  g_return_if_fail(newtonmenu != NULL);
   256	
   257	  dialog = g_object_get_data (G_OBJECT (plugin), "dialog");
   258	  if (G_UNLIKELY (dialog != NULL))
   259	    gtk_widget_destroy (dialog);
   260	
   261	  g_free (newtonmenu->icon_name_prop);
   262	  newtonmenu->icon_name_prop = NULL;
   263	  g_free (newtonmenu->label_text_prop);
   264	  newtonmenu->label_text_prop = NULL;
   265	
   266	  if (newtonmenu->main_menu)
   267	  {
   268	      newtonmenu->main_menu = NULL; 
   269	  }
   270	  
   271	  g_slice_free (newtonmenuPlugin, newtonmenu);
   272	}
   273	
   274	static void
   275	newtonmenu_orientation_changed (XfcePanelPlugin *plugin,
   276	                            GtkOrientation   orientation,
   277	                            newtonmenuPlugin    *newtonmenu)
   278	{
   279	  g_return_if_fail(newtonmenu != NULL);
   280	  g_return_if_fail(GTK_IS_BOX(newtonmenu->button_box));
   281	
   282	  gtk_orientable_set_orientation(GTK_ORIENTABLE(newtonmenu->button_box), orientation);
   283	  newtonmenu_update_display(newtonmenu);
   284	}
   285	
   286	static gboolean
   287	newtonmenu_size_changed (XfcePanelPlugin *plugin,
   288	                     gint             size,
   289	                     newtonmenuPlugin    *newtonmenu)
   290	{
   291	  GtkOrientation orientation;
   292	
   293	  g_return_val_if_fail(newtonmenu != NULL, TRUE);
   294	
   295	  orientation = xfce_panel_plugin_get_orientation (plugin);
   296	
   297	  if (orientation == GTK_ORIENTATION_HORIZONTAL)
   298	    gtk_widget_set_size_request (GTK_WIDGET (plugin), -1, size);
   299	  else
   300	    gtk_widget_set_size_request (GTK_WIDGET (plugin), size, -1);
   301	
   302	
   303	  newtonmenu_update_display(newtonmenu);
   304	  return TRUE;
   305	}
   306	
   307	static void
   308	on_about_this_pc_activate(GtkMenuItem *menuitem, gpointer user_data)
   309	{
   310	    execute_command("xfce4-about");
   311	}
   312	
   313	static void
   314	on_system_settings_activate(GtkMenuItem *menuitem, gpointer user_data)
   315	{
   316	    execute_command("xfce4-settings-manager");
   317	}
   318	
   319	static void
   320	on_run_command_activate(GtkMenuItem *menuitem, gpointer user_data)
   321	{
   322	    execute_command("xfce4-appfinder --collapsed");
   323	}
   324	
   325	static void
   326	on_force_quit_activate(GtkMenuItem *menuitem, gpointer user_data)
   327	{
   328	    newtonmenuPlugin *newtonmenu = (newtonmenuPlugin*)user_data;
   329	    GtkWindow *parent_window = NULL;
   330	
   331	    g_return_if_fail(newtonmenu != NULL);
   332	
   333	    if (newtonmenu->plugin && gtk_widget_get_toplevel(GTK_WIDGET(newtonmenu->plugin))) {
   334	        parent_window = GTK_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(newtonmenu->plugin)));
   335	    }
   336	
   337	    newtonmenu_show_force_quit_applications_dialog(parent_window, newtonmenu);
   338	}
   339	
   340	static void
   341	on_sleep_activate(GtkMenuItem *menuitem, gpointer user_data)
   342	{
   343	    execute_command("xfce4-session-logout --suspend");
   344	}
   345	
   346	static void
   347	on_restart_activate(GtkMenuItem *menuitem, gpointer user_data)
   348	{
   349	    newtonmenuPlugin *newtonmenu = (newtonmenuPlugin*)user_data;
   350	    GtkWindow *parent_window = NULL;
   351	
   352	    g_return_if_fail(newtonmenu != NULL);
   353	
   354	    if (newtonmenu->plugin && gtk_widget_get_toplevel(GTK_WIDGET(newtonmenu->plugin))) {
   355	        parent_window = GTK_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(newtonmenu->plugin)));
   356	    }
   357	
   358	    if (newtonmenu->confirm_restart_prop) {
   359	        newtonmenu_show_generic_confirmation(parent_window, _("restart"), _("Restart"), "xfce4-session-logout --reboot");
   360	    } else {
   361	        execute_command("xfce4-session-logout --reboot");
   362	    }
   363	}
   364	
   365	static void
   366	on_shutdown_activate(GtkMenuItem *menuitem, gpointer user_data)
   367	{
   368	    newtonmenuPlugin *newtonmenu = (newtonmenuPlugin*)user_data;
   369	    GtkWindow *parent_window = NULL;
   370	
   371	    g_return_if_fail(newtonmenu != NULL);
   372	
   373	    if (newtonmenu->plugin && gtk_widget_get_toplevel(GTK_WIDGET(newtonmenu->plugin))) {
   374	        parent_window = GTK_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(newtonmenu->plugin)));
   375	    }
   376	    
   377	    if (newtonmenu->confirm_shutdown_prop) {
   378	        newtonmenu_show_generic_confirmation(parent_window, _("shut down"), _("Shut Down"), "xfce4-session-logout --halt");
   379	    } else {
   380	        execute_command("xfce4-session-logout --halt");
   381	    }
   382	}
   383	
   384	static void
   385	on_lock_screen_activate(GtkMenuItem *menuitem, gpointer user_data)
   386	{
   387	    execute_command("xflock4");
   388	}
   389	
   390	static void
   391	on_log_out_activate(GtkMenuItem *menuitem, gpointer user_data)
   392	{
   393	    newtonmenuPlugin *newtonmenu = (newtonmenuPlugin*)user_data;
   394	    GtkWindow *parent_window = NULL;
   395	    const gchar *username = g_get_user_name();
   396	    gchar *action_name; 
   397	
   398	    g_return_if_fail(newtonmenu != NULL);
   399	
   400	    if (newtonmenu->plugin && gtk_widget_get_toplevel(GTK_WIDGET(newtonmenu->plugin))) {
   401	        parent_window = GTK_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(newtonmenu->plugin)));
   402	    }
   403	
   404	    if (username) {
   405	        action_name = g_strdup_printf(_("log out %s"), username);
   406	    } else {
   407	        action_name = g_strdup(_("log out")); 
   408	    }
   409	
   410	    if (newtonmenu->confirm_logout_prop) {
   411	        newtonmenu_show_generic_confirmation(parent_window, action_name, _("Log Out"), "xfce4-session-logout --logout");
   412	    } else {
   413	        execute_command("xfce4-session-logout --logout");
   414	    }
   415	    g_free(action_name);
   416	}
   417	
   418	
   419	static void
   420	newtonmenu_menu_deactivate_cb (GtkMenu *menu, newtonmenuPlugin *newtonmenu)
   421	{
   422	    gulong handler_id;
   423	    g_return_if_fail (newtonmenu != NULL);
   424	    g_return_if_fail (GTK_IS_TOGGLE_BUTTON (newtonmenu->button));
   425	
   426	    if (gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(newtonmenu->button)))
   427	    {
   428	        handler_id = g_signal_handler_find(newtonmenu->button, G_SIGNAL_MATCH_FUNC, 0, 0, NULL, G_CALLBACK(newtonmenu_popup_menu_on_toggle), NULL);
   429	        if (handler_id > 0) {
   430	            g_signal_handler_block(newtonmenu->button, handler_id);
   431	        }
   432	
   433	        gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(newtonmenu->button), FALSE);
   434	
   435	        if (handler_id > 0) {
   436	            g_signal_handler_unblock(newtonmenu->button, handler_id);
   437	        }
   438	    }
   439	    xfce_panel_plugin_block_autohide (newtonmenu->plugin, FALSE);
   440	}
   441	
   442	static void
   443	newtonmenu_popup_menu_on_toggle (GtkToggleButton *toggle_button, newtonmenuPlugin *newtonmenu)
   444	{
   445	    GtkWidget *menu_item;
   446	    GtkAccelGroup *accel_group;
   447	
   448	    g_return_if_fail (newtonmenu != NULL);
   449	    g_return_if_fail (GTK_IS_TOGGLE_BUTTON (toggle_button));
   450	
   451	    if (!gtk_toggle_button_get_active(toggle_button))
   452	    {
   453	        if (newtonmenu->main_menu && gtk_widget_get_visible(newtonmenu->main_menu)) {
   454	            gtk_menu_popdown(GTK_MENU(newtonmenu->main_menu));
   455	        }
   456	        xfce_panel_plugin_block_autohide (newtonmenu->plugin, FALSE);
   457	        return;
   458	    }
   459	
   460	    xfce_panel_plugin_block_autohide (newtonmenu->plugin, TRUE);
   461	
   462	    if (newtonmenu->main_menu == NULL)
   463	    {
   464	        newtonmenu->main_menu = gtk_menu_new();
   465	        accel_group = gtk_accel_group_new ();
   466	        gtk_menu_set_accel_group (GTK_MENU (newtonmenu->main_menu), accel_group);
   467	        g_object_unref(accel_group);
   468	        
   469	        menu_item = gtk_menu_item_new_with_mnemonic (_("About This PC"));
   470	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_about_this_pc_activate), newtonmenu->plugin);
   471	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   472	        
   473	        gtk_menu_shell_append(GTK_MENU_SHELL(newtonmenu->main_menu), gtk_separator_menu_item_new());
   474	
   475	        menu_item = gtk_menu_item_new_with_mnemonic (_("System Settings..."));
   476	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_system_settings_activate), newtonmenu);
   477	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   478	
   479	        menu_item = gtk_menu_item_new_with_mnemonic (_("Run Command..."));
   480	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_run_command_activate), newtonmenu);
   481	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   482	        
   483	        gtk_menu_shell_append(GTK_MENU_SHELL(newtonmenu->main_menu), gtk_separator_menu_item_new());
   484	        
   485	        menu_item = gtk_menu_item_new_with_mnemonic (_("Force Quit..."));
   486	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_force_quit_activate), newtonmenu); 
   487	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   488	
   489	        gtk_menu_shell_append(GTK_MENU_SHELL(newtonmenu->main_menu), gtk_separator_menu_item_new());
   490	
   491	        menu_item = gtk_menu_item_new_with_mnemonic (_("Sleep"));
   492	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_sleep_activate), newtonmenu);
   493	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   494	        
   495	        menu_item = gtk_menu_item_new_with_mnemonic (_("Restart..."));
   496	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_restart_activate), newtonmenu);
   497	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   498	
   499	        menu_item = gtk_menu_item_new_with_mnemonic (_("Shut Down..."));
   500	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_shutdown_activate), newtonmenu);
   501	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   502	        
   503	        gtk_menu_shell_append(GTK_MENU_SHELL(newtonmenu->main_menu), gtk_separator_menu_item_new());
   504	
   505	        menu_item = gtk_menu_item_new_with_mnemonic (_("Lock Screen"));
   506	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_lock_screen_activate), newtonmenu);
   507	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   508	
   509	        const gchar* username = g_get_user_name();
   510	        gchar* logout_label;
   511	        if (username) {
   512	            logout_label = g_strdup_printf(_("Log Out %s..."), username);
   513	        } else {
   514	            logout_label = g_strdup(_("Log Out..."));
   515	        }
   516	        menu_item = gtk_menu_item_new_with_mnemonic (logout_label);
   517	        g_free(logout_label);
   518	        g_signal_connect (menu_item, "activate", G_CALLBACK (on_log_out_activate), newtonmenu);
   519	        gtk_menu_shell_append (GTK_MENU_SHELL (newtonmenu->main_menu), menu_item);
   520	        
   521	        g_signal_connect (newtonmenu->main_menu, "deactivate",
   522	                          G_CALLBACK (newtonmenu_menu_deactivate_cb), newtonmenu);
   523	        
   524	        g_object_add_weak_pointer (G_OBJECT(newtonmenu->main_menu), (gpointer *) &(newtonmenu->main_menu));
   525	    }
   526	    
   527	    gtk_widget_show_all(newtonmenu->main_menu);
   528	
   529	    xfce_panel_plugin_popup_menu(newtonmenu->plugin,
   530	                                 GTK_MENU(newtonmenu->main_menu),
   531	                                 GTK_WIDGET(toggle_button),
   532	                                 NULL);
   533	}
   534	
   535	static void
   536	newtonmenu_construct (XfcePanelPlugin *plugin)
   537	{
   538	  newtonmenuPlugin *newtonmenu;
   539	
   540	  xfce_textdomain(GETTEXT_PACKAGE, PACKAGE_LOCALE_DIR, "UTF-8");
   541	  newtonmenu = newtonmenu_new (plugin);
   542	  g_return_if_fail(newtonmenu != NULL);
   543	
   544	  gtk_container_add (GTK_CONTAINER (plugin), newtonmenu->event_box);
   545	  xfce_panel_plugin_add_action_widget (plugin, newtonmenu->event_box);
   546	  
   547	  g_signal_connect (G_OBJECT (plugin), "free-data", G_CALLBACK (newtonmenu_free), newtonmenu);
   548	  g_signal_connect (G_OBJECT (plugin), "save", G_CALLBACK (newtonmenu_save), newtonmenu);
   549	  g_signal_connect (G_OBJECT (plugin), "size-changed", G_CALLBACK (newtonmenu_size_changed), newtonmenu);
   550	  g_signal_connect (G_OBJECT (plugin), "orientation-changed", G_CALLBACK (newtonmenu_orientation_changed), newtonmenu);
   551	  
   552	  g_return_if_fail(newtonmenu->button != NULL);
   553	  g_signal_connect (G_OBJECT (newtonmenu->button), "toggled", G_CALLBACK (newtonmenu_popup_menu_on_toggle), newtonmenu);
   554	
   555	  xfce_panel_plugin_menu_show_configure (plugin);
   556	  g_signal_connect (G_OBJECT (plugin), "configure-plugin", G_CALLBACK (newtonmenu_configure), newtonmenu);
   557	  xfce_panel_plugin_menu_show_about (plugin);
   558	  g_signal_connect (G_OBJECT (plugin), "about", G_CALLBACK (newtonmenu_about), plugin);
   559	}--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu.desktop.in
--------------------------------------------------------------------------------
     1	[Xfce Panel]
     2	Type=X-XFCE-PanelPlugin
     3	Encoding=UTF-8
     4	Name=newtonmenu Plugin
     5	Comment=newtonmenu plugin for the Xfce panel
     6	Icon=xfce4-newtonmenu-plugin
     7	X-XFCE-Module=newtonmenu
     8	X-XFCE-Internal=false
     9	X-XFCE-Unique=false
    10	X-XFCE-API=2.0
    11	
--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu-dialogs.c
--------------------------------------------------------------------------------
     1	#ifdef HAVE_CONFIG_H
     2	#include <config.h>
     3	#endif
     4	#ifdef HAVE_XFCE_REVISION_H
     5	#include "xfce-revision.h"
     6	#endif
     7	
     8	#include <string.h>
     9	#include <gtk/gtk.h>
    10	
    11	#include <libxfce4ui/libxfce4ui.h>
    12	#include <libxfce4panel/libxfce4panel.h>
    13	#include <exo/exo.h>
    14	
    15	#include "newtonmenu.h"
    16	#include "newtonmenu-dialogs.h"
    17	
    18	#define PLUGIN_WEBSITE "https://gitlab.xfce.org/panel-plugins/xfce4-newtonmenu-plugin"
    19	
    20	static void on_display_icon_checkbutton_toggled (GtkToggleButton *togglebutton, gpointer user_data);
    21	static void on_icon_choose_button_clicked (GtkButton *button, gpointer user_data);
    22	static void dialog_save_settings_and_update (GtkDialog *dialog, newtonmenuPlugin *newtonmenu, GtkBuilder *builder);
    23	static void newtonmenu_configure_response_cb (GtkWidget *dialog_widget, gint response, newtonmenuPlugin *newtonmenu);
    24	static void generic_action_dialog_response_cb (GtkDialog *dialog, gint response_id, gpointer user_data);
    25	
    26	
    27	static void
    28	on_display_icon_checkbutton_toggled (GtkToggleButton *togglebutton, gpointer user_data)
    29	{
    30	    GtkBuilder *builder = GTK_BUILDER(user_data);
    31	    gboolean display_icon = gtk_toggle_button_get_active (togglebutton);
    32	    GtkWidget *icon_settings_box, *label_settings_box;
    33	
    34	    g_return_if_fail(builder != NULL);
    35	
    36	    icon_settings_box = GTK_WIDGET(gtk_builder_get_object (builder, "icon_settings_box"));
    37	    label_settings_box = GTK_WIDGET(gtk_builder_get_object (builder, "label_settings_box"));
    38	
    39	    if(icon_settings_box) gtk_widget_set_visible (icon_settings_box, display_icon);
    40	    if(label_settings_box) gtk_widget_set_visible (label_settings_box, !display_icon);
    41	}
    42	
    43	static void
    44	on_icon_choose_button_clicked (GtkButton *button, gpointer user_data)
    45	{
    46	    GtkWidget *parent_dialog = GTK_WIDGET(user_data);
    47	    GtkBuilder *builder = GTK_BUILDER(g_object_get_data(G_OBJECT(parent_dialog), "builder"));
    48	    GtkWidget *icon_chooser_dialog;
    49	    gchar *selected_icon_name = NULL;
    50	    GtkWindow *parent_window = GTK_WINDOW(parent_dialog);
    51	    GtkWidget *icon_name_entry_widget;
    52	
    53	    g_return_if_fail(builder != NULL);
    54	    icon_name_entry_widget = GTK_WIDGET(gtk_builder_get_object(builder, "icon_name_entry"));
    55	    g_return_if_fail(GTK_IS_ENTRY(icon_name_entry_widget));
    56	
    57	
    58	    icon_chooser_dialog = exo_icon_chooser_dialog_new (
    59	        _("Choose an Icon"),
    60	        parent_window,
    61	        _("_Cancel"), GTK_RESPONSE_CANCEL,
    62	        _("_OK"), GTK_RESPONSE_ACCEPT,
    63	        NULL);
    64	    
    65	    gtk_window_set_modal(GTK_WINDOW(icon_chooser_dialog), TRUE);
    66	    gtk_dialog_set_default_response(GTK_DIALOG(icon_chooser_dialog), GTK_RESPONSE_ACCEPT);
    67	
    68	    const gchar *current_icon = gtk_entry_get_text(GTK_ENTRY(icon_name_entry_widget));
    69	    if (current_icon && *current_icon) {
    70	        exo_icon_chooser_dialog_set_icon(EXO_ICON_CHOOSER_DIALOG(icon_chooser_dialog), current_icon);
    71	    }
    72	
    73	    if (gtk_dialog_run (GTK_DIALOG (icon_chooser_dialog)) == GTK_RESPONSE_ACCEPT)
    74	    {
    75	        selected_icon_name = exo_icon_chooser_dialog_get_icon (EXO_ICON_CHOOSER_DIALOG (icon_chooser_dialog));
    76	        if (selected_icon_name)
    77	        {
    78	            gtk_entry_set_text (GTK_ENTRY(icon_name_entry_widget), selected_icon_name);
    79	            g_free (selected_icon_name);
    80	        }
    81	    }
    82	    gtk_widget_destroy (icon_chooser_dialog);
    83	}
    84	
    85	static void
    86	dialog_save_settings_and_update (GtkDialog *dialog, newtonmenuPlugin *newtonmenu, GtkBuilder *builder)
    87	{
    88	    GtkWidget *widget;
    89	
    90	    g_return_if_fail(newtonmenu != NULL);
    91	    g_return_if_fail(builder != NULL);
    92	
    93	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "display_icon_checkbutton"));
    94	    if (GTK_IS_TOGGLE_BUTTON(widget))
    95	        newtonmenu->display_icon_prop = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
    96	
    97	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "icon_name_entry"));
    98	    if (GTK_IS_ENTRY(widget)) {
    99	        g_free (newtonmenu->icon_name_prop);
   100	        newtonmenu->icon_name_prop = g_strdup (gtk_entry_get_text (GTK_ENTRY (widget)));
   101	    }
   102	
   103	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "label_text_entry"));
   104	    if (GTK_IS_ENTRY(widget)) {
   105	        g_free (newtonmenu->label_text_prop);
   106	        newtonmenu->label_text_prop = g_strdup (gtk_entry_get_text (GTK_ENTRY (widget)));
   107	    }
   108	
   109	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "confirm_logout_checkbutton"));
   110	    if (GTK_IS_TOGGLE_BUTTON(widget))
   111	        newtonmenu->confirm_logout_prop = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
   112	
   113	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "confirm_restart_checkbutton"));
   114	    if (GTK_IS_TOGGLE_BUTTON(widget))
   115	        newtonmenu->confirm_restart_prop = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
   116	        
   117	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "confirm_shutdown_checkbutton"));
   118	    if (GTK_IS_TOGGLE_BUTTON(widget))
   119	        newtonmenu->confirm_shutdown_prop = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
   120	
   121	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "confirm_force_quit_checkbutton"));
   122	    if (GTK_IS_TOGGLE_BUTTON(widget))
   123	        newtonmenu->confirm_force_quit_prop = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (widget));
   124	    
   125	    newtonmenu_save (newtonmenu->plugin, newtonmenu);
   126	    newtonmenu_update_display (newtonmenu);
   127	}
   128	
   129	static void
   130	newtonmenu_configure_response_cb (GtkWidget    *dialog_widget,
   131	                              gint          response,
   132	                              newtonmenuPlugin *newtonmenu)
   133	{
   134	  GtkBuilder *builder = GTK_BUILDER(g_object_get_data(G_OBJECT(dialog_widget), "builder"));
   135	
   136	  if (response == GTK_RESPONSE_HELP) 
   137	    {
   138	      gboolean result;
   139	      result = g_spawn_command_line_async ("exo-open --launch WebBrowser " PLUGIN_WEBSITE, NULL);
   140	      if (G_UNLIKELY (result == FALSE))
   141	        g_warning (_("Unable to open the following url: %s"), PLUGIN_WEBSITE);
   142	      return; 
   143	    }
   144	  
   145	  if (response == GTK_RESPONSE_CLOSE || response == GTK_RESPONSE_DELETE_EVENT || response == GTK_RESPONSE_OK) {
   146	      if (builder && newtonmenu) {
   147	          dialog_save_settings_and_update(GTK_DIALOG(dialog_widget), newtonmenu, builder);
   148	      }
   149	  }
   150	
   151	  if (newtonmenu && newtonmenu->plugin) {
   152	      g_object_set_data (G_OBJECT (newtonmenu->plugin), "dialog", NULL);
   153	      xfce_panel_plugin_unblock_menu (newtonmenu->plugin);
   154	  }
   155	  if (builder) {
   156	      g_object_unref(builder);
   157	      g_object_set_data(G_OBJECT(dialog_widget), "builder", NULL);
   158	  }
   159	  gtk_widget_destroy (dialog_widget);
   160	}
   161	
   162	void
   163	newtonmenu_configure (XfcePanelPlugin *plugin,
   164	                  newtonmenuPlugin    *newtonmenu)
   165	{
   166	  GtkBuilder *builder;
   167	  GObject    *dialog_obj;
   168	  GtkWidget  *dialog_widget;
   169	  GtkWidget  *widget;
   170	
   171	  g_return_if_fail(plugin != NULL);
   172	  g_return_if_fail(newtonmenu != NULL);
   173	
   174	  if (g_object_get_data(G_OBJECT(plugin), "dialog") != NULL) {
   175	      gtk_window_present(GTK_WINDOW(g_object_get_data(G_OBJECT(plugin), "dialog")));
   176	      return;
   177	  }
   178	
   179	  xfce_panel_plugin_block_menu (plugin);
   180	
   181	  const gchar *ui_resource_path = "/org/xfce/panel/plugins/newtonmenu/newtonmenu-dialog.ui";
   182	  builder = gtk_builder_new_from_resource (ui_resource_path);
   183	
   184	  if (G_UNLIKELY (builder == NULL)) {
   185	      g_warning ("Failed to load UI for newtonmenu plugin configuration from resource: %s", ui_resource_path);
   186	      xfce_panel_plugin_unblock_menu (plugin);
   187	      return;
   188	  }
   189	
   190	  dialog_obj = gtk_builder_get_object (builder, "newtonmenu_config_dialog");
   191	  if (G_UNLIKELY (dialog_obj == NULL || !GTK_IS_DIALOG (dialog_obj))) {
   192	      g_warning ("UI loaded, but toplevel widget ('newtonmenu_config_dialog') is not a GtkDialog or has wrong ID.");
   193	      g_object_unref (builder);
   194	      xfce_panel_plugin_unblock_menu (plugin);
   195	      return;
   196	  }
   197	  dialog_widget = GTK_WIDGET(dialog_obj);
   198	  gtk_window_set_transient_for(GTK_WINDOW(dialog_widget), GTK_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(plugin))));
   199	  gtk_window_set_position(GTK_WINDOW(dialog_widget), GTK_WIN_POS_CENTER_ON_PARENT);
   200	
   201	  g_object_set_data(G_OBJECT(dialog_widget), "builder", builder);
   202	  g_object_set_data(G_OBJECT(dialog_widget), "plugin_data", newtonmenu);
   203	
   204	  widget = GTK_WIDGET(gtk_builder_get_object (builder, "display_icon_checkbutton"));
   205	  if (GTK_IS_TOGGLE_BUTTON(widget)) {
   206	      gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (widget), newtonmenu->display_icon_prop);
   207	      on_display_icon_checkbutton_toggled(GTK_TOGGLE_BUTTON(widget), builder);
   208	      g_signal_connect (widget, "toggled", G_CALLBACK (on_display_icon_checkbutton_toggled), builder);
   209	  } else {
   210	      g_warning("Widget 'display_icon_checkbutton' not found or not a GtkToggleButton.");
   211	  }
   212	
   213	  widget = GTK_WIDGET(gtk_builder_get_object (builder, "icon_name_entry"));
   214	  if (GTK_IS_ENTRY(widget)) {
   215	      gtk_entry_set_text (GTK_ENTRY (widget), newtonmenu->icon_name_prop ? newtonmenu->icon_name_prop : "");
   216	  } else {
   217	      g_warning("Widget 'icon_name_entry' not found or not a GtkEntry.");
   218	  }
   219	
   220	  widget = GTK_WIDGET(gtk_builder_get_object (builder, "label_text_entry"));
   221	  if (GTK_IS_ENTRY(widget)) {
   222	      gtk_entry_set_text (GTK_ENTRY (widget), newtonmenu->label_text_prop ? newtonmenu->label_text_prop : "");
   223	  } else {
   224	      g_warning("Widget 'label_text_entry' not found or not a GtkEntry.");
   225	  }
   226	
   227	  widget = GTK_WIDGET(gtk_builder_get_object (builder, "icon_choose_button"));
   228	  if (GTK_IS_BUTTON(widget)) {
   229	      g_signal_connect (widget, "clicked", G_CALLBACK (on_icon_choose_button_clicked), dialog_widget);
   230	  } else {
   231	      g_warning("Widget 'icon_choose_button' not found or not a GtkButton.");
   232	  }
   233	
   234	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "confirm_logout_checkbutton"));
   235	    if (GTK_IS_TOGGLE_BUTTON(widget))
   236	        gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(widget), newtonmenu->confirm_logout_prop);
   237	
   238	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "confirm_restart_checkbutton"));
   239	    if (GTK_IS_TOGGLE_BUTTON(widget))
   240	        gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(widget), newtonmenu->confirm_restart_prop);
   241	
   242	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "confirm_shutdown_checkbutton"));
   243	    if (GTK_IS_TOGGLE_BUTTON(widget))
   244	        gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(widget), newtonmenu->confirm_shutdown_prop);
   245	
   246	    widget = GTK_WIDGET(gtk_builder_get_object (builder, "confirm_force_quit_checkbutton"));
   247	    if (GTK_IS_TOGGLE_BUTTON(widget))
   248	        gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(widget), newtonmenu->confirm_force_quit_prop);
   249	
   250	
   251	  g_object_set_data (G_OBJECT (plugin), "dialog", dialog_widget);
   252	  g_signal_connect (G_OBJECT (dialog_widget), "response",
   253	                    G_CALLBACK(newtonmenu_configure_response_cb), newtonmenu);
   254	
   255	  gtk_widget_show_all (dialog_widget);
   256	}
   257	
   258	void
   259	newtonmenu_about (XfcePanelPlugin *plugin)
   260	{
   261	  const gchar *auth[] = {
   262	      "Adam",
   263	      "AI Assistant",
   264	      NULL
   265	  };
   266	
   267	  gtk_show_about_dialog (GTK_WINDOW(gtk_widget_get_toplevel(GTK_WIDGET(plugin))),
   268	                         "logo-icon-name", "xfce4-newtonmenu-plugin",
   269	                         "license-type",   GTK_LICENSE_GPL_2_0,
   270	                         "version",        PACKAGE_VERSION,
   271	                         "program-name",   PACKAGE_NAME,
   272	                         "comments",       _("A macOS-like application and session menu button."),
   273	                         "website",        PLUGIN_WEBSITE,
   274	                         "copyright",      _("Copyright © 2024-2025 Adam"),
   275	                         "authors",        auth,
   276	                         NULL);
   277	}
   278	
   279	static void
   280	generic_action_dialog_response_cb (GtkDialog *dialog, gint response_id, gpointer command_to_run_gpointer)
   281	{
   282	    gchar *command_to_run = (gchar*)command_to_run_gpointer;
   283	
   284	    if (response_id == GTK_RESPONSE_YES)
   285	    {
   286	        if (command_to_run && *command_to_run) {
   287	            GError *error = NULL;
   288	            if (!g_spawn_command_line_async (command_to_run, &error))
   289	            {
   290	                g_warning ("Failed to execute command '%s': %s", command_to_run, error ? error->message : "Unknown error");
   291	                if (error) g_error_free (error);
   292	            }
   293	        }
   294	    }
   295	    if (command_to_run) g_free(command_to_run); 
   296	    gtk_widget_destroy (GTK_WIDGET (dialog));
   297	}
   298	
   299	void
   300	newtonmenu_show_generic_confirmation (GtkWindow *parent, 
   301	                                        const gchar *action_name_translated, 
   302	                                        const gchar *action_verb_translated, 
   303	                                        const gchar *command_to_run)
   304	{
   305	    GtkWidget *dialog;
   306	    gchar *primary_text;
   307	    gchar *secondary_text = NULL; 
   308	
   309	    primary_text = g_strdup_printf (_("Are you sure you want to %s?"), action_name_translated);
   310	
   311	    dialog = gtk_message_dialog_new (parent,
   312	                                     GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
   313	                                     GTK_MESSAGE_QUESTION,
   314	                                     GTK_BUTTONS_NONE,
   315	                                     "%s", 
   316	                                     primary_text);
   317	    g_free(primary_text);
   318	
   319	    if (secondary_text) {
   320	        gtk_message_dialog_format_secondary_text(GTK_MESSAGE_DIALOG(dialog), "%s", secondary_text);
   321	        g_free(secondary_text);
   322	    }
   323	    
   324	    gchar *action_button_label = g_strdup_printf("_%s", action_verb_translated);
   325	
   326	    gtk_dialog_add_buttons(GTK_DIALOG(dialog),
   327	                           _("_Cancel"), GTK_RESPONSE_CANCEL,
   328	                           action_button_label, GTK_RESPONSE_YES,
   329	                           NULL);
   330	    g_free(action_button_label);
   331	
   332	    gtk_dialog_set_default_response(GTK_DIALOG(dialog), GTK_RESPONSE_CANCEL);
   333	    
   334	    g_signal_connect (dialog, "response", G_CALLBACK (generic_action_dialog_response_cb), g_strdup(command_to_run));
   335	    gtk_window_set_position(GTK_WINDOW(dialog), GTK_WIN_POS_CENTER_ALWAYS); 
   336	    gtk_widget_show_all (dialog);
   337	}--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu-dialogs.h
--------------------------------------------------------------------------------
     1	#ifndef __newtonmenu_DIALOGS_H__
     2	#define __newtonmenu_DIALOGS_H__
     3	
     4	#include <gtk/gtk.h>
     5	#include "newtonmenu.h" // Include to use newtonmenuPlugin type
     6	
     7	G_BEGIN_DECLS
     8	
     9	void newtonmenu_configure (XfcePanelPlugin *plugin, newtonmenuPlugin *newtonmenu);
    10	void newtonmenu_about (XfcePanelPlugin *plugin);
    11	void newtonmenu_show_generic_confirmation (GtkWindow *parent, const gchar *action_name_translated, const gchar *action_verb_translated, const gchar *command_to_run);
    12	
    13	G_END_DECLS
    14	
    15	#endif /* !__newtonmenu_DIALOGS_H__ */--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu-dialog.ui
--------------------------------------------------------------------------------
     1	<?xml version="1.0" encoding="UTF-8"?>
     2	<interface>
     3	  <requires lib="gtk+" version="3.20"/>
     4	  <object class="GtkDialog" id="newtonmenu_config_dialog">
     5	    <property name="can_focus">False</property>
     6	    <property name="title" translatable="yes">Newton Button Preferences</property>
     7	    <property name="type_hint">dialog</property>
     8	    <property name="border_width">12</property>
     9	    <property name="default_width">450</property>
    10	    <property name="modal">True</property>
    11	    <property name="destroy_with_parent">True</property>
    12	    <child internal-child="vbox">
    13	      <object class="GtkBox" id="dialog_vbox">
    14	        <property name="visible">True</property>
    15	        <property name="can_focus">False</property>
    16	        <property name="orientation">vertical</property>
    17	        <property name="spacing">18</property>
    18	        <child>
    19	          <object class="GtkFrame" id="appearance_frame">
    20	            <property name="visible">True</property>
    21	            <property name="can_focus">False</property>
    22	            <property name="label" translatable="yes">Button Appearance</property>
    23	            <property name="label_xalign">0</property>
    24	            <property name="shadow_type">etched-in</property>
    25	            <child>
    26	              <object class="GtkBox" id="appearance_box_content">
    27	                <property name="visible">True</property>
    28	                <property name="can_focus">False</property>
    29	                <property name="orientation">vertical</property>
    30	                <property name="border_width">12</property>
    31	                <property name="spacing">12</property>
    32	                <child>
    33	                  <object class="GtkCheckButton" id="display_icon_checkbutton">
    34	                    <property name="label" translatable="yes">Display icon on panel button</property>
    35	                    <property name="visible">True</property>
    36	                    <property name="can_focus">True</property>
    37	                    <property name="receives_default">False</property>
    38	                    <property name="draw_indicator">True</property>
    39	                    <property name="active">True</property>
    40	                  </object>
    41	                  <packing>
    42	                    <property name="expand">False</property>
    43	                    <property name="fill">True</property>
    44	                    <property name="position">0</property>
    45	                  </packing>
    46	                </child>
    47	                <child>
    48	                  <object class="GtkBox" id="icon_settings_box">
    49	                    <property name="visible">True</property>
    50	                    <property name="can_focus">False</property>
    51	                    <property name="orientation">horizontal</property>
    52	                    <property name="spacing">6</property>
    53	                    <child>
    54	                      <object class="GtkLabel" id="icon_name_label">
    55	                        <property name="visible">True</property>
    56	                        <property name="can_focus">False</property>
    57	                        <property name="label" translatable="yes">Icon name:</property>
    58	                        <property name="xalign">0</property>
    59	                      </object>
    60	                      <packing>
    61	                        <property name="expand">False</property>
    62	                        <property name="fill">True</property>
    63	                        <property name="position">0</property>
    64	                      </packing>
    65	                    </child>
    66	                    <child>
    67	                      <object class="GtkEntry" id="icon_name_entry">
    68	                        <property name="visible">True</property>
    69	                        <property name="can_focus">True</property>
    70	                        <property name="hexpand">True</property>
    71	                        <property name="tooltip_text" translatable="yes">Enter a themed icon name (e.g., 'start-here') or a full path to an image file.</property>
    72	                      </object>
    73	                      <packing>
    74	                        <property name="expand">True</property>
    75	                        <property name="fill">True</property>
    76	                        <property name="position">1</property>
    77	                      </packing>
    78	                    </child>
    79	                    <child>
    80	                      <object class="GtkButton" id="icon_choose_button">
    81	                        <property name="visible">True</property>
    82	                        <property name="can_focus">True</property>
    83	                        <property name="receives_default">True</property>
    84	                        <property name="tooltip_text" translatable="yes">Choose an icon</property>
    85	                        <child>
    86	                          <object class="GtkImage">
    87	                            <property name="visible">True</property>
    88	                            <property name="can_focus">False</property>
    89	                            <property name="icon_name">document-open-symbolic</property>
    90	                            <property name="icon_size">1</property> <!-- Corresponds to GTK_ICON_SIZE_MENU -->
    91	                          </object>
    92	                        </child>
    93	                      </object>
    94	                      <packing>
    95	                        <property name="expand">False</property>
    96	                        <property name="fill">True</property>
    97	                        <property name="position">2</property>
    98	                      </packing>
    99	                    </child>
   100	                  </object>
   101	                  <packing>
   102	                    <property name="expand">False</property>
   103	                    <property name="fill">True</property>
   104	                    <property name="position">1</property>
   105	                  </packing>
   106	                </child>
   107	                <child>
   108	                  <object class="GtkBox" id="label_settings_box">
   109	                    <property name="visible">False</property>
   110	                    <property name="can_focus">False</property>
   111	                    <property name="orientation">horizontal</property>
   112	                    <property name="spacing">6</property>
   113	                    <child>
   114	                      <object class="GtkLabel" id="label_text_label">
   115	                        <property name="visible">True</property>
   116	                        <property name="can_focus">False</property>
   117	                        <property name="label" translatable="yes">Button label text:</property>
   118	                        <property name="xalign">0</property>
   119	                      </object>
   120	                      <packing>
   121	                        <property name="expand">False</property>
   122	                        <property name="fill">True</property>
   123	                        <property name="position">0</property>
   124	                      </packing>
   125	                    </child>
   126	                    <child>
   127	                      <object class="GtkEntry" id="label_text_entry">
   128	                        <property name="visible">True</property>
   129	                        <property name="can_focus">True</property>
   130	                        <property name="hexpand">True</property>
   131	                      </object>
   132	                      <packing>
   133	                        <property name="expand">True</property>
   134	                        <property name="fill">True</property>
   135	                        <property name="position">1</property>
   136	                      </packing>
   137	                    </child>
   138	                  </object>
   139	                  <packing>
   140	                    <property name="expand">False</property>
   141	                    <property name="fill">True</property>
   142	                    <property name="position">2</property>
   143	                  </packing>
   144	                </child>
   145	              </object>
   146	            </child>
   147	          </object>
   148	          <packing>
   149	            <property name="expand">False</property>
   150	            <property name="fill">True</property>
   151	            <property name="position">0</property>
   152	          </packing>
   153	        </child>
   154	        <child>
   155	          <object class="GtkFrame" id="confirmation_frame">
   156	            <property name="visible">True</property>
   157	            <property name="can_focus">False</property>
   158	            <property name="label" translatable="yes">Action Confirmations</property>
   159	            <property name="label_xalign">0</property>
   160	            <property name="shadow_type">etched-in</property>
   161	            <child>
   162	              <object class="GtkBox" id="confirmation_box_content">
   163	                <property name="visible">True</property>
   164	                <property name="can_focus">False</property>
   165	                <property name="orientation">vertical</property>
   166	                <property name="border_width">12</property>
   167	                <property name="spacing">6</property>
   168	                <child>
   169	                  <object class="GtkCheckButton" id="confirm_logout_checkbutton">
   170	                    <property name="label" translatable="yes">Confirm before logging out</property>
   171	                    <property name="visible">True</property>
   172	                    <property name="can_focus">True</property>
   173	                    <property name="receives_default">False</property>
   174	                    <property name="draw_indicator">True</property>
   175	                  </object>
   176	                  <packing>
   177	                    <property name="expand">False</property>
   178	                    <property name="fill">True</property>
   179	                    <property name="position">0</property>
   180	                  </packing>
   181	                </child>
   182	                <child>
   183	                  <object class="GtkCheckButton" id="confirm_restart_checkbutton">
   184	                    <property name="label" translatable="yes">Confirm before restarting</property>
   185	                    <property name="visible">True</property>
   186	                    <property name="can_focus">True</property>
   187	                    <property name="receives_default">False</property>
   188	                    <property name="draw_indicator">True</property>
   189	                  </object>
   190	                  <packing>
   191	                    <property name="expand">False</property>
   192	                    <property name="fill">True</property>
   193	                    <property name="position">1</property>
   194	                  </packing>
   195	                </child>
   196	                <child>
   197	                  <object class="GtkCheckButton" id="confirm_shutdown_checkbutton">
   198	                    <property name="label" translatable="yes">Confirm before shutting down</property>
   199	                    <property name="visible">True</property>
   200	                    <property name="can_focus">True</property>
   201	                    <property name="receives_default">False</property>
   202	                    <property name="draw_indicator">True</property>
   203	                  </object>
   204	                  <packing>
   205	                    <property name="expand">False</property>
   206	                    <property name="fill">True</property>
   207	                    <property name="position">2</property>
   208	                  </packing>
   209	                </child>
   210	              </object>
   211	            </child>
   212	          </object>
   213	          <packing>
   214	            <property name="expand">False</property>
   215	            <property name="fill">True</property>
   216	            <property name="position">1</property>
   217	          </packing>
   218	        </child>
   219	      </object>
   220	    </child>
   221	    <action-widgets>
   222	      <action-widget response="-11">help_button</action-widget>
   223	      <action-widget response="-7">close_button</action-widget>
   224	    </action-widgets>
   225	    <child type="action">
   226	        <object class="GtkButton" id="help_button">
   227	            <property name="label">gtk-help</property>
   228	            <property name="visible">True</property>
   229	            <property name="can_focus">True</property>
   230	            <property name="receives_default">False</property>
   231	            <property name="use-stock">True</property>
   232	        </object>
   233	    </child>
   234	    <child type="action">
   235	        <object class="GtkButton" id="close_button">
   236	            <property name="label">gtk-close</property>
   237	            <property name="visible">True</property>
   238	            <property name="can_focus">True</property>
   239	            <property name="receives_default">True</property>
   240	            <property name="use-stock">True</property>
   241	        </object>
   242	    </child>
   243	  </object>
   244	</interface>--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu-force-quit-dialog.c
--------------------------------------------------------------------------------
     1	#ifdef HAVE_CONFIG_H
     2	#include <config.h>
     3	#endif
     4	
     5	#include <gtk/gtk.h>
     6	#include <libwnck/libwnck.h>
     7	#include <signal.h>
     8	#include <libxfce4util/libxfce4util.h>
     9	#include <libxfce4ui/libxfce4ui.h>
    10	#include <sys/types.h>
    11	#include <unistd.h>
    12	#include <errno.h>
    13	
    14	#include "newtonmenu.h"
    15	#include "newtonmenu-force-quit-dialog.h"
    16	
    17	enum
    18	{
    19	    COL_ICON,
    20	    COL_APP_NAME,
    21	    COL_PID,
    22	    NUM_COLS
    23	};
    24	
    25	typedef struct {
    26	    GtkDialog *dialog;
    27	    GtkTreeView *tree_view;
    28	    GtkListStore *list_store;
    29	    GtkButton *force_quit_button;
    30	    newtonmenuPlugin *plugin_data;
    31	    WnckScreen *screen;
    32	    guint refresh_id;
    33	} ForceQuitDialogData;
    34	
    35	static void populate_app_list(ForceQuitDialogData *data);
    36	static void on_fq_dialog_force_quit_button_clicked(GtkButton *button, gpointer user_data);
    37	static void on_fq_dialog_response(GtkDialog *dialog, gint response_id, gpointer user_data);
    38	static void on_fq_dialog_app_selection_changed(GtkTreeSelection *selection, gpointer user_data);
    39	static gboolean on_refresh_app_list(gpointer user_data);
    40	
    41	static gboolean
    42	force_quit_process(pid_t pid)
    43	{
    44	    gboolean result = FALSE;
    45	    gchar *command = NULL;
    46	    GError *error = NULL;
    47	    
    48	    if (pid <= 1)
    49	        return FALSE;
    50	    
    51	    // Don't kill our own process
    52	    if (pid == getpid())
    53	        return FALSE;
    54	        
    55	    // Use kill command for better success rate
    56	    command = g_strdup_printf("kill -9 %d", pid);
    57	    result = g_spawn_command_line_sync(command, NULL, NULL, NULL, &error);
    58	    g_free(command);
    59	    
    60	    if (!result) {
    61	        g_warning("Failed to execute kill command: %s", error ? error->message : "unknown error");
    62	        if (error) g_error_free(error);
    63	        
    64	        // Try direct kill as a fallback
    65	        if (kill(pid, SIGKILL) == 0) {
    66	            result = TRUE;
    67	        }
    68	        else {
    69	            g_warning("Direct kill failed: %s", strerror(errno));
    70	        }
    71	    }
    72	    
    73	    return result;
    74	}
    75	
    76	static void
    77	add_window_to_list(ForceQuitDialogData *data, WnckWindow *window)
    78	{
    79	    GtkTreeIter iter;
    80	    GdkPixbuf *icon = NULL, *scaled_icon = NULL;
    81	    GtkIconTheme *icon_theme;
    82	    const gchar *app_name = NULL;
    83	    WnckApplication *app = NULL;
    84	    pid_t pid = 0;
    85	    
    86	    if (!window || !WNCK_IS_WINDOW(window))
    87	        return;
    88	    
    89	    // Skip windows that shouldn't be shown
    90	    if (wnck_window_is_skip_tasklist(window) ||
    91	        wnck_window_get_window_type(window) == WNCK_WINDOW_DESKTOP ||
    92	        wnck_window_get_window_type(window) == WNCK_WINDOW_DOCK) {
    93	        return;
    94	    }
    95	    
    96	    app = wnck_window_get_application(window);
    97	    if (!app || !WNCK_IS_APPLICATION(app))
    98	        return;
    99	        
   100	    app_name = wnck_application_get_name(app);
   101	    if (!app_name || !*app_name)
   102	        app_name = _("(Unknown Application)");
   103	    
   104	    pid = wnck_application_get_pid(app);
   105	    if (pid <= 0)
   106	        return;  // Skip items with invalid PIDs
   107	        
   108	    // Skip xfce4-panel itself and its plugins to prevent suicide
   109	    if (pid == getpid()) {
   110	        return;
   111	    }
   112	    
   113	    // Check if we already have this PID in our list
   114	    GtkTreeIter existing_iter;
   115	    gboolean valid, found = FALSE;
   116	    valid = gtk_tree_model_get_iter_first(GTK_TREE_MODEL(data->list_store), &existing_iter);
   117	    while (valid) {
   118	        pid_t existing_pid;
   119	        gtk_tree_model_get(GTK_TREE_MODEL(data->list_store), &existing_iter, COL_PID, &existing_pid, -1);
   120	        if (existing_pid == pid) {
   121	            found = TRUE;
   122	            break;
   123	        }
   124	        valid = gtk_tree_model_iter_next(GTK_TREE_MODEL(data->list_store), &existing_iter);
   125	    }
   126	    
   127	    // Skip if already in list
   128	    if (found)
   129	        return;
   130	    
   131	    // Get icon
   132	    icon_theme = gtk_icon_theme_get_default();
   133	    icon = wnck_application_get_icon(app);
   134	    
   135	    if (icon) {
   136	        scaled_icon = gdk_pixbuf_scale_simple(icon, 16, 16, GDK_INTERP_BILINEAR);
   137	    } else {
   138	        // Use fallback icon
   139	        GError *error = NULL;
   140	        scaled_icon = gtk_icon_theme_load_icon(icon_theme, 
   141	                                             "application-x-executable", 
   142	                                             16, 
   143	                                             GTK_ICON_LOOKUP_USE_BUILTIN, 
   144	                                             &error);
   145	        if (error) {
   146	            g_error_free(error);
   147	        }
   148	    }
   149	    
   150	    // Add to list store
   151	    gtk_list_store_append(data->list_store, &iter);
   152	    gtk_list_store_set(data->list_store, &iter,
   153	                     COL_ICON, scaled_icon,
   154	                     COL_APP_NAME, app_name,
   155	                     COL_PID, pid,
   156	                     -1);
   157	    
   158	    if (scaled_icon)
   159	        g_object_unref(scaled_icon);
   160	}
   161	
   162	static gboolean
   163	on_refresh_app_list(gpointer user_data)
   164	{
   165	    ForceQuitDialogData *data = (ForceQuitDialogData *)user_data;
   166	    
   167	    if (!data || !data->dialog || !gtk_widget_is_visible(GTK_WIDGET(data->dialog)))
   168	        return G_SOURCE_REMOVE;
   169	    
   170	    populate_app_list(data);
   171	    return G_SOURCE_CONTINUE;
   172	}
   173	
   174	static void
   175	populate_app_list(ForceQuitDialogData *data)
   176	{
   177	    GList *windows, *l;
   178	    GtkTreeSelection *selection;
   179	    pid_t selected_pid = 0;
   180	    gboolean had_selection = FALSE;
   181	    
   182	    // Remember the selected app if any
   183	    selection = gtk_tree_view_get_selection(data->tree_view);
   184	    if (gtk_tree_selection_get_selected(selection, NULL, NULL)) {
   185	        GtkTreeModel *model;
   186	        GtkTreeIter iter;
   187	        had_selection = gtk_tree_selection_get_selected(selection, &model, &iter);
   188	        if (had_selection) {
   189	            gtk_tree_model_get(model, &iter, COL_PID, &selected_pid, -1);
   190	        }
   191	    }
   192	    
   193	    // Clear the list
   194	    gtk_list_store_clear(data->list_store);
   195	    
   196	    // Force screen update to get latest data
   197	    if (data->screen) {
   198	        wnck_screen_force_update(data->screen);
   199	        windows = wnck_screen_get_windows(data->screen);
   200	        
   201	        for (l = windows; l != NULL; l = l->next) {
   202	            WnckWindow *window = WNCK_WINDOW(l->data);
   203	            add_window_to_list(data, window);
   204	        }
   205	    }
   206	    
   207	    // Reselect previously selected app if possible
   208	    if (had_selection && selected_pid > 0) {
   209	        GtkTreeIter iter;
   210	        gboolean valid;
   211	        
   212	        valid = gtk_tree_model_get_iter_first(GTK_TREE_MODEL(data->list_store), &iter);
   213	        while (valid) {
   214	            pid_t pid;
   215	            gtk_tree_model_get(GTK_TREE_MODEL(data->list_store), &iter, COL_PID, &pid, -1);
   216	            if (pid == selected_pid) {
   217	                gtk_tree_selection_select_iter(selection, &iter);
   218	                break;
   219	            }
   220	            valid = gtk_tree_model_iter_next(GTK_TREE_MODEL(data->list_store), &iter);
   221	        }
   222	    }
   223	}
   224	
   225	static void
   226	on_fq_dialog_app_selection_changed(GtkTreeSelection *selection, gpointer user_data)
   227	{
   228	    ForceQuitDialogData *data = (ForceQuitDialogData*)user_data;
   229	    gboolean something_selected;
   230	    
   231	    something_selected = gtk_tree_selection_get_selected(selection, NULL, NULL);
   232	    gtk_widget_set_sensitive(GTK_WIDGET(data->force_quit_button), something_selected);
   233	}
   234	
   235	static void
   236	on_fq_dialog_force_quit_button_clicked(GtkButton *button, gpointer user_data)
   237	{
   238	    ForceQuitDialogData *data = (ForceQuitDialogData*)user_data;
   239	    GtkTreeSelection *selection;
   240	    GtkTreeModel *model;
   241	    GtkTreeIter iter;
   242	    pid_t pid_to_kill = 0;
   243	    gchar *app_name_to_kill = NULL;
   244	    
   245	    selection = gtk_tree_view_get_selection(data->tree_view);
   246	    if (gtk_tree_selection_get_selected(selection, &model, &iter)) {
   247	        gtk_tree_model_get(model, &iter,
   248	                         COL_PID, &pid_to_kill,
   249	                         COL_APP_NAME, &app_name_to_kill,
   250	                         -1);
   251	        
   252	        if (pid_to_kill > 0) {
   253	            // Force quit the process directly without confirmation
   254	            if (force_quit_process(pid_to_kill)) {
   255	                // Allow the UI to refresh for visual feedback
   256	                while (gtk_events_pending())
   257	                    gtk_main_iteration();
   258	                
   259	                g_usleep(250000); // 250ms
   260	                
   261	                // Refresh list to remove the killed app
   262	                populate_app_list(data);
   263	            }
   264	        }
   265	        g_free(app_name_to_kill);
   266	    }
   267	}
   268	
   269	static void
   270	on_fq_dialog_response(GtkDialog *dialog, gint response_id, gpointer user_data)
   271	{
   272	    ForceQuitDialogData *data = (ForceQuitDialogData*)user_data;
   273	    
   274	    if (!data)
   275	        return;
   276	    
   277	    // Apply (Force Quit) should trigger the force quit flow but not close dialog
   278	    if (response_id == GTK_RESPONSE_APPLY) {
   279	        on_fq_dialog_force_quit_button_clicked(data->force_quit_button, data);
   280	        return; // Keep dialog open
   281	    }
   282	    
   283	    // For other responses (like close), clean up and destroy dialog
   284	    if (data->refresh_id > 0) {
   285	        g_source_remove(data->refresh_id);
   286	        data->refresh_id = 0;
   287	    }
   288	    
   289	    gtk_widget_destroy(GTK_WIDGET(dialog));
   290	    g_slice_free(ForceQuitDialogData, data);
   291	}
   292	
   293	void
   294	newtonmenu_show_force_quit_applications_dialog(GtkWindow *parent, newtonmenuPlugin *plugin_data)
   295	{
   296	    GtkBuilder *builder;
   297	    GObject *dialog_obj;
   298	    ForceQuitDialogData *data;
   299	    const gchar *ui_resource_path = "/org/xfce/panel/plugins/newtonmenu/newtonmenu-force-quit-dialog.ui";
   300	    
   301	    // Initialize data structure
   302	    data = g_slice_new0(ForceQuitDialogData);
   303	    data->plugin_data = plugin_data;
   304	    
   305	    // Handle WNCK lib with deprecation notice 
   306	    /* Using deprecated API for compatibility, will be updated in future versions */
   307	    data->screen = wnck_screen_get_default();
   308	    
   309	    // Load UI
   310	    builder = gtk_builder_new_from_resource(ui_resource_path);
   311	    if (G_UNLIKELY(builder == NULL)) {
   312	        g_warning("Failed to load UI for Force Quit dialog from resource: %s", ui_resource_path);
   313	        g_slice_free(ForceQuitDialogData, data);
   314	        return;
   315	    }
   316	    
   317	    dialog_obj = gtk_builder_get_object(builder, "force_quit_applications_dialog");
   318	    if (G_UNLIKELY(dialog_obj == NULL || !GTK_IS_DIALOG(dialog_obj))) {
   319	        g_warning("UI loaded, but toplevel widget 'force_quit_applications_dialog' is not a GtkDialog.");
   320	        g_object_unref(builder);
   321	        g_slice_free(ForceQuitDialogData, data);
   322	        return;
   323	    }
   324	    
   325	    data->dialog = GTK_DIALOG(dialog_obj);
   326	    data->tree_view = GTK_TREE_VIEW(gtk_builder_get_object(builder, "app_list_treeview"));
   327	    data->force_quit_button = GTK_BUTTON(gtk_builder_get_object(builder, "force_quit_button"));
   328	    
   329	    g_object_unref(builder);
   330	    
   331	    // Setup window properties and position
   332	    gtk_window_set_title(GTK_WINDOW(data->dialog), _("Force Quit Applications"));
   333	    gtk_window_set_position(GTK_WINDOW(data->dialog), GTK_WIN_POS_CENTER_ALWAYS);
   334	    gtk_window_set_default_size(GTK_WINDOW(data->dialog), 400, 350);
   335	    gtk_window_set_modal(GTK_WINDOW(data->dialog), TRUE);
   336	    
   337	    // Set parent relationship if available
   338	    if (parent) {
   339	        gtk_window_set_transient_for(GTK_WINDOW(data->dialog), parent);
   340	    }
   341	    
   342	    // Setup tree view columns
   343	    GtkCellRenderer *renderer_pixbuf = gtk_cell_renderer_pixbuf_new();
   344	    GtkCellRenderer *renderer_text = gtk_cell_renderer_text_new();
   345	    GtkTreeViewColumn *col;
   346	    
   347	    col = gtk_tree_view_column_new_with_attributes("", renderer_pixbuf, "pixbuf", COL_ICON, NULL);
   348	    gtk_tree_view_append_column(data->tree_view, col);
   349	    
   350	    col = gtk_tree_view_column_new_with_attributes("", renderer_text, "text", COL_APP_NAME, NULL);
   351	    gtk_tree_view_column_set_expand(col, TRUE);
   352	    gtk_tree_view_append_column(data->tree_view, col);
   353	    
   354	    // Create list store and connect to tree view
   355	    data->list_store = gtk_list_store_new(NUM_COLS, GDK_TYPE_PIXBUF, G_TYPE_STRING, G_TYPE_INT);
   356	    gtk_tree_view_set_model(data->tree_view, GTK_TREE_MODEL(data->list_store));
   357	    g_object_unref(data->list_store);
   358	    
   359	    // Connect signals
   360	    GtkTreeSelection *selection = gtk_tree_view_get_selection(data->tree_view);
   361	    gtk_tree_selection_set_mode(selection, GTK_SELECTION_SINGLE);
   362	    g_signal_connect(selection, "changed", G_CALLBACK(on_fq_dialog_app_selection_changed), data);
   363	    g_signal_connect(data->force_quit_button, "clicked", G_CALLBACK(on_fq_dialog_force_quit_button_clicked), data);
   364	    g_signal_connect(data->dialog, "response", G_CALLBACK(on_fq_dialog_response), data);
   365	    
   366	    // Populate initial app list
   367	    populate_app_list(data);
   368	    
   369	    // Add periodic refresh timer (every 1 second)
   370	    data->refresh_id = g_timeout_add(1000, on_refresh_app_list, data);
   371	    
   372	    // Force quit button starts disabled until selection made
   373	    gtk_widget_set_sensitive(GTK_WIDGET(data->force_quit_button), FALSE);
   374	    
   375	    // Show dialog
   376	    gtk_widget_show_all(GTK_WIDGET(data->dialog));
   377	    
   378	    // After showing, move to center of screen explicitly
   379	    GdkScreen *screen = gtk_window_get_screen(GTK_WINDOW(data->dialog));
   380	    if (screen) {
   381	        gint screen_width = gdk_screen_get_width(screen);
   382	        gint screen_height = gdk_screen_get_height(screen);
   383	        gint dialog_width, dialog_height;
   384	        
   385	        gtk_window_get_size(GTK_WINDOW(data->dialog), &dialog_width, &dialog_height);
   386	        
   387	        gtk_window_move(GTK_WINDOW(data->dialog), 
   388	                      (screen_width - dialog_width) / 2,
   389	                      (screen_height - dialog_height) / 2);
   390	    }
   391	    
   392	    // Make sure it gets focus
   393	    gtk_window_present(GTK_WINDOW(data->dialog));
   394	}--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu-force-quit-dialog.h
--------------------------------------------------------------------------------
     1	#ifndef __newtonmenu_FORCE_QUIT_DIALOG_H__
     2	#define __newtonmenu_FORCE_QUIT_DIALOG_H__
     3	
     4	#include <gtk/gtk.h>
     5	#include "newtonmenu.h"
     6	
     7	G_BEGIN_DECLS
     8	
     9	void newtonmenu_show_force_quit_applications_dialog(GtkWindow *parent, newtonmenuPlugin *plugin_data);
    10	
    11	G_END_DECLS
    12	
    13	#endif /* !__newtonmenu_FORCE_QUIT_DIALOG_H__ */--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu-force-quit-dialog.ui
--------------------------------------------------------------------------------
     1	<?xml version="1.0" encoding="UTF-8"?>
     2	<interface>
     3	  <requires lib="gtk+" version="3.20"/>
     4	  <object class="GtkDialog" id="force_quit_applications_dialog">
     5	    <property name="can_focus">False</property>
     6	    <property name="title" translatable="yes">Force Quit Applications</property>
     7	    <property name="type_hint">dialog</property>
     8	    <property name="border_width">12</property>
     9	    <property name="default_width">400</property>
    10	    <property name="default_height">350</property>
    11	    <property name="modal">True</property>
    12	    <property name="destroy_with_parent">True</property>
    13	    <child internal-child="vbox">
    14	      <object class="GtkBox" id="dialog_vbox">
    15	        <property name="visible">True</property>
    16	        <property name="orientation">vertical</property>
    17	        <property name="spacing">6</property>
    18	        <child>
    19	          <object class="GtkLabel" id="info_label">
    20	            <property name="visible">True</property>
    21	            <property name="wrap">True</property>
    22	            <property name="label" translatable="yes">If an app doesn't respond for a while, select its name and click Force Quit.</property>
    23	            <property name="xalign">0</property>
    24	            <property name="margin_bottom">6</property>
    25	          </object>
    26	          <packing>
    27	            <property name="expand">False</property>
    28	            <property name="fill">True</property>
    29	            <property name="position">0</property>
    30	          </packing>
    31	        </child>
    32	        <child>
    33	          <object class="GtkScrolledWindow" id="scrolled_window">
    34	            <property name="visible">True</property>
    35	            <property name="can_focus">True</property>
    36	            <property name="shadow_type">in</property>
    37	            <property name="hscrollbar_policy">never</property>
    38	            <child>
    39	              <object class="GtkTreeView" id="app_list_treeview">
    40	                <property name="visible">True</property>
    41	                <property name="can_focus">True</property>
    42	                <property name="headers_visible">False</property> 
    43	                <child internal-child="selection">
    44	                  <object class="GtkTreeSelection"/>
    45	                </child>
    46	              </object>
    47	            </child>
    48	          </object>
    49	          <packing>
    50	            <property name="expand">True</property>
    51	            <property name="fill">True</property>
    52	            <property name="position">1</property>
    53	          </packing>
    54	        </child>
    55	        <child>
    56	          <object class="GtkLabel" id="shortcut_label">
    57	            <property name="visible">True</property>
    58	            <property name="wrap">True</property>
    59	            <property name="label" translatable="yes">You can open this window by pressing Command-Option-Escape.</property> 
    60	            <property name="xalign">0</property>
    61	            <property name="margin_top">6</property>
    62	          </object>
    63	          <packing>
    64	            <property name="expand">False</property>
    65	            <property name="fill">True</property>
    66	            <property name="position">2</property>
    67	          </packing>
    68	        </child>
    69	      </object>
    70	    </child>
    71	    <child type="action">
    72	      <object class="GtkButton" id="force_quit_button">
    73	        <property name="label" translatable="yes">_Force Quit</property>
    74	        <property name="visible">True</property>
    75	        <property name="can_focus">True</property>
    76	        <property name="receives_default">True</property>
    77	        <property name="use_underline">True</property>
    78	        <style>
    79	          <class name="suggested-action"/> 
    80	        </style>
    81	      </object>
    82	    </child>
    83	    <child type="action">
    84	      <object class="GtkButton" id="close_button">
    85	        <property name="label" translatable="yes">_Close</property>
    86	        <property name="visible">True</property>
    87	        <property name="can_focus">True</property>
    88	        <property name="receives_default">False</property>
    89	        <property name="use_underline">True</property>
    90	      </object>
    91	    </child>
    92	    <action-widgets>
    93	      <action-widget response="GTK_RESPONSE_APPLY">force_quit_button</action-widget>
    94	      <action-widget response="GTK_RESPONSE_CLOSE">close_button</action-widget>
    95	    </action-widgets>
    96	  </object>
    97	</interface>--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu.gresource.xml
--------------------------------------------------------------------------------
     1	<?xml version="1.0" encoding="UTF-8"?>
     2	<gresources>
     3	  <gresource prefix="/org/xfce/panel/plugins/newtonmenu">
     4	    <file compressed="true" preprocess="xml-stripblanks">newtonmenu-dialog.ui</file>
     5	    <file compressed="true" preprocess="xml-stripblanks">newtonmenu-force-quit-dialog.ui</file>
     6	  </gresource>
     7	</gresources>--------------------------------------------------------------------------------

File: panel-plugin/newtonmenu.h
--------------------------------------------------------------------------------
     1	#ifndef __newtonmenu_H__
     2	#define __newtonmenu_H__
     3	
     4	#include <gtk/gtk.h>
     5	#include <libxfce4panel/libxfce4panel.h>
     6	
     7	G_BEGIN_DECLS
     8	
     9	typedef struct _newtonmenuPlugin newtonmenuPlugin;
    10	
    11	struct _newtonmenuPlugin
    12	{
    13	    XfcePanelPlugin *plugin;
    14	
    15	    GtkWidget       *event_box;
    16	    GtkWidget       *button;
    17	    GtkWidget       *button_box;
    18	    GtkWidget       *icon_image;
    19	    GtkWidget       *label_widget;
    20	
    21	    gboolean         display_icon_prop;
    22	    gchar           *icon_name_prop;
    23	    gchar           *label_text_prop;
    24	
    25	    gboolean         confirm_logout_prop;
    26	    gboolean         confirm_restart_prop;
    27	    gboolean         confirm_shutdown_prop;
    28	    gboolean         confirm_force_quit_prop;
    29	
    30	    GtkWidget       *main_menu;
    31	};
    32	
    33	void newtonmenu_save (XfcePanelPlugin *plugin, newtonmenuPlugin *newtonmenu);
    34	void newtonmenu_update_display (newtonmenuPlugin *newtonmenu);
    35	
    36	G_END_DECLS
    37	
    38	#endif /* !__newtonmenu_H__ */--------------------------------------------------------------------------------

File: po/ar.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# ahmad <ahmad.almomani5@gmail.com>, 2017
     8	# Oukiki Saleh <salehoukiki@gmail.com>, 2023
     9	# Nick Schermer <nick@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Nick Schermer <nick@xfce.org>, 2024\n"
    19	"Language-Team: Arabic (https://app.transifex.com/xfce/teams/16840/ar/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: ar\n"
    24	"Plural-Forms: nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 && n%100<=99 ? 4 : 5;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "نموذج"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "مكون إضافي"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "غير قادر على فتح الرابط التالي: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "نموذج المكون الإضافي"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr ""
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_إغلاق"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "هذا نموذج المكون الإضافي"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "نموذج المكون الإضافي لشريط xfce"
--------------------------------------------------------------------------------

File: po/ast.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# enolp <enolp@softastur.org>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: enolp <enolp@softastur.org>, 2024\n"
    17	"Language-Team: Asturian (https://app.transifex.com/xfce/teams/16840/ast/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: ast\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr ""
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Plugin"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Nun pue abrise la URL de darréu: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr ""
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Ayuda"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Zarrar"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr ""
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr ""
--------------------------------------------------------------------------------

File: po/be.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Źmicier Turok <nashtlumach@gmail.com>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Źmicier Turok <nashtlumach@gmail.com>, 2024\n"
    17	"Language-Team: Belarusian (https://app.transifex.com/xfce/teams/16840/be/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: be\n"
    22	"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Узор"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Убудова"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Не атрымалася адкрыць наступны адрас: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Узор убудовы"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Даведка"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Закрыць"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Гэта ўзор убудовы"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Узор убудовы для панэлі Xfce"
--------------------------------------------------------------------------------

File: po/bg.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Любомир Василев, 2023
     8	# Kiril Kirilov <cybercop_montana@abv.bg>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Kiril Kirilov <cybercop_montana@abv.bg>, 2024\n"
    18	"Language-Team: Bulgarian (https://app.transifex.com/xfce/teams/16840/bg/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: bg\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Пример"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Добавка"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Следният адрес не може да бъде отворен: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Примерна добавка"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Помощ"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Затваряне"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Това е примерна добавка"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Примерна добавка за панела на Xfce"
--------------------------------------------------------------------------------

File: po/ca.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Robert Antoni Buj i Gelonch <rbuj@fedoraproject.org>, 2023
     8	# Xfce Bot <transifex@xfce.org>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    18	"Language-Team: Catalan (https://app.transifex.com/xfce/teams/16840/ca/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: ca\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Mostra"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Connector"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "No es pot obrir l'url següent: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Connector de mostra"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Ajuda"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Tanca"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Aquest és un connector de mostra"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Connector de mostra per al tauler de Xfce"
--------------------------------------------------------------------------------

File: po/cs.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Michal Várady <miko.vaji@gmail.com>, 2023
     8	# fri, 2024
     9	# Pavel Borecki <pavel.borecki@gmail.com>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Pavel Borecki <pavel.borecki@gmail.com>, 2024\n"
    19	"Language-Team: Czech (https://app.transifex.com/xfce/teams/16840/cs/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: cs\n"
    24	"Plural-Forms: nplurals=4; plural=(n == 1 && n % 1 == 0) ? 0 : (n >= 2 && n <= 4 && n % 1 == 0) ? 1: (n % 1 != 0 ) ? 2 : 3;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Ukázka"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Zásuvný modul"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Nelze otevřít toto umístění URL: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Ukázkovkový zásuvný modul"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Nápověda"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Zavřít"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Toto je ukázkový zásuvný modul"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Ukázkový zásuvný modul pro panel Xfce"
--------------------------------------------------------------------------------

File: po/da.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# scootergrisen, 2024
     8	# Xfce Bot <transifex@xfce.org>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    18	"Language-Team: Danish (https://app.transifex.com/xfce/teams/16840/da/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: da\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Prøve"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Plugin"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Kan ikke åbne den følgende url: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Prøve-plugin"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Hjælp"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Luk"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Dette er et prøve-plugin"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Prøve-plugin til Xfce-panelet"
--------------------------------------------------------------------------------

File: po/de.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Tobias Bannert <tobannert@gmail.com>, 2017
     8	# Vinzenz Vietzke <vinz@vinzv.de>, 2023
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    19	"Language-Team: German (https://app.transifex.com/xfce/teams/16840/de/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: de\n"
    24	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Beispiel"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Erweiterung"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Die folgende Adresse konnte nicht geöffnet werden: »%s«"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Beispielerweiterung"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Hilfe"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Schließen"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Dies ist eine Beispielerweiterung"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Beispielerweiterung für die Xfce Leiste"
--------------------------------------------------------------------------------

File: po/el.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Ápo. <apostolos.papadimitriu@gmail.com>, 2017
     8	# Christos Arvanitis <arvchristos@gmail.com>, 2023
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# Ioannis LM, 2024
    11	# 
    12	#, fuzzy
    13	msgid ""
    14	msgstr ""
    15	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    16	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    17	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    18	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    19	"Last-Translator: Ioannis LM, 2024\n"
    20	"Language-Team: Greek (https://app.transifex.com/xfce/teams/16840/el/)\n"
    21	"MIME-Version: 1.0\n"
    22	"Content-Type: text/plain; charset=UTF-8\n"
    23	"Content-Transfer-Encoding: 8bit\n"
    24	"Language: el\n"
    25	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    26	
    27	#. some sample widgets
    28	#: panel-plugin/sample.c:161
    29	msgid "Sample"
    30	msgstr "Πρότυπο"
    31	
    32	#: panel-plugin/sample.c:165
    33	msgid "Plugin"
    34	msgstr "Πρόσθετο"
    35	
    36	#: panel-plugin/sample-dialogs.c:51
    37	#, c-format
    38	msgid "Unable to open the following url: %s"
    39	msgstr "Αδυναμία ανοίγματος της ακόλουθης διεύθυνσης: %s"
    40	
    41	#. create the dialog
    42	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    43	msgid "Sample Plugin"
    44	msgstr "Πρότυπο πρόσθετο"
    45	
    46	#: panel-plugin/sample-dialogs.c:84
    47	msgid "_Help"
    48	msgstr "_Βοήθεια"
    49	
    50	#: panel-plugin/sample-dialogs.c:85
    51	msgid "_Close"
    52	msgstr "_Κλείσιμο"
    53	
    54	#: panel-plugin/sample-dialogs.c:124
    55	msgid "This is a sample plugin"
    56	msgstr "Αυτό είναι ένα πρότυπο πρόσθετο"
    57	
    58	#: panel-plugin/sample.desktop.in:6
    59	msgid "Sample plugin for the Xfce panel"
    60	msgstr "Πρότυπο πρόσθετο για το Xfce panel"
--------------------------------------------------------------------------------

File: po/en_AU.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Michael Findlay <translate@cobber-linux.org>, 2024
     8	# John Humphrys <johnswagon+transifex@pm.me>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: John Humphrys <johnswagon+transifex@pm.me>, 2024\n"
    18	"Language-Team: English (Australia) (https://app.transifex.com/xfce/teams/16840/en_AU/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: en_AU\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Sample"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Plugin"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Unable to open the following url: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Sample Plugin"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Help"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Close"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "This is a sample plugin"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Sample plugin for the Xfce panel"
--------------------------------------------------------------------------------

File: po/en_CA.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Steve Harris <steve@jbs.ca>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Steve Harris <steve@jbs.ca>, 2024\n"
    17	"Language-Team: English (Canada) (https://app.transifex.com/xfce/teams/16840/en_CA/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: en_CA\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Sample"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Plugin"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Unable to open the following url: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Sample Plugin"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Help"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Close"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "This is a sample plugin"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Sample plugin for the Xfce panel"
--------------------------------------------------------------------------------

File: po/en_GB.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Jackson Doak <noskcaj@ubuntu.com>, 2024
     8	# Andi Chandler <andi@gowling.com>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Andi Chandler <andi@gowling.com>, 2024\n"
    18	"Language-Team: English (United Kingdom) (https://app.transifex.com/xfce/teams/16840/en_GB/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: en_GB\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Sample"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Plugin"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Unable to open the following url: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Sample Plugin"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Help"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Close"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "This is a sample plugin"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Sample plugin for the Xfce panel"
--------------------------------------------------------------------------------

File: po/es.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# gabrieltandil <gabriel.tandil@gmail.com>, 2017
     8	# Toni Estévez <toni.estevez@gmail.com>, 2023
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    19	"Language-Team: Spanish (https://app.transifex.com/xfce/teams/16840/es/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: es\n"
    24	"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Ejemplo"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Complemento"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "No se puede abrir el URL siguiente: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Complemento de ejemplo"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Ayudar"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Cerrar"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Este es un complemento de ejemplo"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Ejemplo de complemento para el panel de Xfce"
--------------------------------------------------------------------------------

File: po/et.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Priit Jõerüüt <transifex@joeruut.com>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Priit Jõerüüt <transifex@joeruut.com>, 2024\n"
    17	"Language-Team: Estonian (https://app.transifex.com/xfce/teams/16840/et/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: et\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Näidis"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Pistikprogramm"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Järgneva urli avamisel tekkis viga: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Pistikprogrammi näidis"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Abiteave"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Sulge"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "See on pistikprogrammi näidis"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Pistikprogrammi näidis Xfce riba jaoks"
--------------------------------------------------------------------------------

File: po/eu.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Asier Iturralde Sarasola <asier.iturralde@gmail.com>, 2024
     8	# beriain, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: beriain, 2024\n"
    18	"Language-Team: Basque (https://app.transifex.com/xfce/teams/16840/eu/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: eu\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Eredua"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Plugina"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Ezin da hurrengo urla ireki: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Ereduzko plugina"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Laguntza"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Itxi"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Hau ereduzko plugin bat da"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Xfce panelerako ereduzko plugina"
--------------------------------------------------------------------------------

File: po/fi.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# a0e71e34efd53e9524ff69b7abbb498c_b427056, 2017
     8	# Pasi Lallinaho <pasi@shimmerproject.org>, 2023
     9	# Jiri Grönroos <jiri.gronroos@iki.fi>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Jiri Grönroos <jiri.gronroos@iki.fi>, 2024\n"
    19	"Language-Team: Finnish (https://app.transifex.com/xfce/teams/16840/fi/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: fi\n"
    24	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Esimerkki"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Liitännäinen"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "URL: %s ei avattavissa"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Esimerkkilliitännäinen"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Ohje"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Sulje"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Tämä on esimerkkiliitännäinen"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Esimerkkiliitännäinen Xfce:n paneelille"
--------------------------------------------------------------------------------

File: po/fr.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Charles Monzat <c.monzat@laposte.net>, 2018
     8	# Yannick Le Guen <leguen.yannick@gmail.com>, 2023
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    19	"Language-Team: French (https://app.transifex.com/xfce/teams/16840/fr/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: fr\n"
    24	"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Exemple"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Greffon"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Impossible d’ouvrir le lien : %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Exemple de greffon"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Aider"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Fermer"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Ceci est un exemple de greffon"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Exemple de greffon pour le tableau de bord Xfce"
--------------------------------------------------------------------------------

File: po/ga.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Seán Ó Séaghdha <sean.anseo@gmail.com>, 2017
     8	# Michael O'Connor, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Michael O'Connor, 2024\n"
    18	"Language-Team: Irish (https://app.transifex.com/xfce/teams/16840/ga/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: ga\n"
    23	"Plural-Forms: nplurals=5; plural=(n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Sampla"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Breiseán"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Ní féidir an URL seo a oscailt:: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Breiseán Samplach"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "C_abhrach"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Scoir"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Seo é breiseán samplach"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Breiseán samplach don phainéil Xfce"
--------------------------------------------------------------------------------

File: po/gl.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Daniel Muñiz Fontoira <dani@damufo.eu>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Daniel Muñiz Fontoira <dani@damufo.eu>, 2024\n"
    17	"Language-Team: Galician (https://app.transifex.com/xfce/teams/16840/gl/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: gl\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Exemplo"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Engadido"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Non se puido abrir o seguinte URL: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Engadido de exemplo"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Axuda"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Pechar"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Este é u n exemplo de engadido"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Exemplo de engadido para o panel Xfce"
--------------------------------------------------------------------------------

File: po/he.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# 63f334ffc0709ba0fc2361b80bf3c0f0_00ffd1e <ab96c93ca0ac55ba7fa06385427e60dd_878890>, 2024
     8	# Elishai Eliyahu <elishai@mailfence.com>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Elishai Eliyahu <elishai@mailfence.com>, 2024\n"
    18	"Language-Team: Hebrew (https://app.transifex.com/xfce/teams/16840/he/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: he\n"
    23	"Plural-Forms: nplurals=3; plural=(n == 1 && n % 1 == 0) ? 0 : (n == 2 && n % 1 == 0) ? 1: 2;\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "דוגמית"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "תוסף"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "לא יכול לפתוח את הכתובת הבאה: %s "
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "תוסף דוגמית"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_עזרה"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_סגור"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "זהו תוסף דוגמית"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "תוסף דוגמית עבור לוח Xfce "
--------------------------------------------------------------------------------

File: po/hi.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Panwar108 <caspian7pena@gmail.com>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Panwar108 <caspian7pena@gmail.com>, 2024\n"
    17	"Language-Team: Hindi (https://app.transifex.com/xfce/teams/16840/hi/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: hi\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "नमूना"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "प्लगिन"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "निम्नलिखित यूआरएल खोलने में विफल : %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "नमूना प्लगिन"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr ""
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "बंद करें (_C)"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "यह एक नमूना प्लगिन है"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Xfce पैनल हेतु एक नमूना प्लगिन"
--------------------------------------------------------------------------------

File: po/hr.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Edin Veskovic <edin.lockedin@gmail.com>, 2023
     8	# Ivica  Kolić <ikoli@yahoo.com>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Ivica  Kolić <ikoli@yahoo.com>, 2024\n"
    18	"Language-Team: Croatian (https://app.transifex.com/xfce/teams/16840/hr/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: hr\n"
    23	"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Primjer"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Priključak"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Nije moguće otvoriti slijedeći url: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Primjer priključka"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Pomoć"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Zatvori"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Ovo je primjer priključka"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Primjer priključka za Xfce ploču"
--------------------------------------------------------------------------------

File: po/hu.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Nick Schermer <nick@xfce.org>, 2024
     8	# Balázs Meskó <meskobalazs@mailbox.org>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Balázs Meskó <meskobalazs@mailbox.org>, 2024\n"
    18	"Language-Team: Hungarian (https://app.transifex.com/xfce/teams/16840/hu/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: hu\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Minta"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Bővítmény"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "A következő URL megnyitása meghiúsult: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Mintabővítmény"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Súgó"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Bezárás"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Ez egy mintabővítmény"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Példa bővítmény az Xfce panelhez"
--------------------------------------------------------------------------------

File: po/hy_AM.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Real School <localization@ehayq.am>, 2024
     8	# Arman Harutyunyan <arman.harut468@gmail.com>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Arman Harutyunyan <arman.harut468@gmail.com>, 2024\n"
    18	"Language-Team: Armenian (Armenia) (https://app.transifex.com/xfce/teams/16840/hy_AM/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: hy_AM\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Նմուշ"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Ներդրաւն"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Չյաջողուեց բացել հետեւեալ url֊ը․ %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Նմուշ ներդրաւն"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Աւգնութիւն"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Փակել"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Սա ներդրաւնի նմուշ է"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Ներդրաւնի նմուշ Xfce վահանակի համար"
--------------------------------------------------------------------------------

File: po/hye.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Arman Harutyunyan <arman.harut468@gmail.com>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Arman Harutyunyan <arman.harut468@gmail.com>, 2024\n"
    17	"Language-Team: Eastern Armenian (https://app.transifex.com/xfce/teams/16840/hye/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: hye\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Նմուշ"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Ներդրաւն"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Չյաջողուեց բացել հետեւեալ url֊ը․ %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Նմուշ ներդրաւն"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Աւգնութիւն"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Փակել"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Սա ներդրաւնի նմուշ է"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Ներդրաւնի նմուշ Xfce վահանակի համար"
--------------------------------------------------------------------------------

File: po/id.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Kukuh Syafaat <syafaatkukuh@gmail.com>, 2023
     8	# Xfce Bot <transifex@xfce.org>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    18	"Language-Team: Indonesian (https://app.transifex.com/xfce/teams/16840/id/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: id\n"
    23	"Plural-Forms: nplurals=1; plural=0;\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Contoh"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Pengaya"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Tak dapat membuka url berikut: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Contoh Pengaya"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Bantuan"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Tutup"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Ini adalah contoh pengaya"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Contoh pengaya untuk panel Xfce"
--------------------------------------------------------------------------------

File: po/ie.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Caarmi, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Caarmi, 2024\n"
    17	"Language-Team: Interlingue (https://app.transifex.com/xfce/teams/16840/ie/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: ie\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Specimen"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Plugin"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Ne successat aperter li sequent URL: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Un specimen de un plugin"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "Au_xilie"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Cluder"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Un specimen"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Un specimen de un plugin del panel Xfce"
--------------------------------------------------------------------------------

File: po/is.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Sveinn í Felli <sv1@fellsnet.is>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Sveinn í Felli <sv1@fellsnet.is>, 2024\n"
    17	"Language-Team: Icelandic (https://app.transifex.com/xfce/teams/16840/is/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: is\n"
    22	"Plural-Forms: nplurals=2; plural=(n % 10 != 1 || n % 100 == 11);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Dæmi"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Forritsviðbót"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Get ekki opnað eftirfarandi slóð: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Sýnisviðbót"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Hjálp"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Loka"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Þetta er dæmi um viðbót"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Sýnisviðbót fyrir Xfce skjástikur"
--------------------------------------------------------------------------------

File: po/it.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Francesco Galizzi <f.galizzi92@gmail.com>, 2017
     8	# Emanuele Petriglia <inbox@emanuelepetriglia.com>, 2023
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    19	"Language-Team: Italian (https://app.transifex.com/xfce/teams/16840/it/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: it\n"
    24	"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Esempio"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Componente aggiuntivo"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Impossibile aprire il seguente URL: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Componente aggiuntivo di esempio"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Aiuto"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "Chiudi"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Questo è un componente aggiuntivo di esempio"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Componente aggiuntivo di esempio per il pannello di Xfce"
--------------------------------------------------------------------------------

File: po/ja.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Nick Schermer <nick@xfce.org>, 2017
     8	# Nobuhiro Iwamatsu <iwamatsu@nigauri.org>, 2023
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    19	"Language-Team: Japanese (https://app.transifex.com/xfce/teams/16840/ja/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: ja\n"
    24	"Plural-Forms: nplurals=1; plural=0;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "サンプル"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "プラグイン"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "次の URL を開くことができません: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "サンプルプラグイン"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "ヘルプ"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "閉じる"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "これはサンプルプラグインです"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Xfce パネル向けサンプルプラグイン"
--------------------------------------------------------------------------------

File: po/ko.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Thomas Sungjin Kang <potopro@gmail.com>, 2017
     8	# 1763f4a4329a2376c933c5e919a36cbc_341ca53 <1f851310383599d03339229d772e1290_119292>, 2023
     9	# Nick Schermer <nick@xfce.org>, 2024
    10	# Seong-ho Cho <darkcircle.0426@gmail.com>, 2024
    11	# 
    12	#, fuzzy
    13	msgid ""
    14	msgstr ""
    15	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    16	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    17	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    18	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    19	"Last-Translator: Seong-ho Cho <darkcircle.0426@gmail.com>, 2024\n"
    20	"Language-Team: Korean (https://app.transifex.com/xfce/teams/16840/ko/)\n"
    21	"MIME-Version: 1.0\n"
    22	"Content-Type: text/plain; charset=UTF-8\n"
    23	"Content-Transfer-Encoding: 8bit\n"
    24	"Language: ko\n"
    25	"Plural-Forms: nplurals=1; plural=0;\n"
    26	
    27	#. some sample widgets
    28	#: panel-plugin/sample.c:161
    29	msgid "Sample"
    30	msgstr "샘플"
    31	
    32	#: panel-plugin/sample.c:165
    33	msgid "Plugin"
    34	msgstr "플러그인"
    35	
    36	#: panel-plugin/sample-dialogs.c:51
    37	#, c-format
    38	msgid "Unable to open the following url: %s"
    39	msgstr "다음 URL을 열 수 없습니다: %s"
    40	
    41	#. create the dialog
    42	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    43	msgid "Sample Plugin"
    44	msgstr "샘플 플러그인"
    45	
    46	#: panel-plugin/sample-dialogs.c:84
    47	msgid "_Help"
    48	msgstr "도움말(_H)"
    49	
    50	#: panel-plugin/sample-dialogs.c:85
    51	msgid "_Close"
    52	msgstr "닫기(_C)"
    53	
    54	#: panel-plugin/sample-dialogs.c:124
    55	msgid "This is a sample plugin"
    56	msgstr "요건 샘플 플러그인 입니다"
    57	
    58	#: panel-plugin/sample.desktop.in:6
    59	msgid "Sample plugin for the Xfce panel"
    60	msgstr "Xfce 패널 샘플 플러그인"
--------------------------------------------------------------------------------

File: po/LINGUAS
--------------------------------------------------------------------------------
     1	# Generated by https://gitlab.xfce.org/infra/transifex
     2	ar
     3	ast
     4	be
     5	bg
     6	ca
     7	cs
     8	da
     9	de
    10	el
    11	en_AU
    12	en_CA
    13	en_GB
    14	es
    15	et
    16	eu
    17	fi
    18	fr
    19	ga
    20	gl
    21	he
    22	hi
    23	hr
    24	hu
    25	hy_AM
    26	hye
    27	id
    28	ie
    29	is
    30	it
    31	ja
    32	ko
    33	lt
    34	ms
    35	nb
    36	nl
    37	pl
    38	pt_BR
    39	pt
    40	ro
    41	ru
    42	sk
    43	sl
    44	sq
    45	sr
    46	sv
    47	tr
    48	uk
    49	zh_CN
    50	zh_TW
--------------------------------------------------------------------------------

File: po/lt.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Moo, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Moo, 2024\n"
    17	"Language-Team: Lithuanian (https://app.transifex.com/xfce/teams/16840/lt/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: lt\n"
    22	"Plural-Forms: nplurals=4; plural=(n % 10 == 1 && (n % 100 > 19 || n % 100 < 11) ? 0 : (n % 10 >= 2 && n % 10 <=9) && (n % 100 > 19 || n % 100 < 11) ? 1 : n % 1 != 0 ? 2: 3);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Pavyzdys"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Įskiepis"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Nepavyko atverti sekančio url: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Pavyzdinis įskiepis"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "Ž_inynas"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Užverti"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Tai yra pavyzdinis įskiepis"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Pavyzdinis įskiepis, skirtas Xfce skydeliui"
--------------------------------------------------------------------------------

File: po/Makevars
--------------------------------------------------------------------------------
     1	# Makefile variables for PO directory in any package using GNU gettext.
     2	
     3	# Usually the message domain is the same as the package name.
     4	DOMAIN = $(PACKAGE)
     5	
     6	# These two variables depend on the location of this directory.
     7	subdir = po
     8	top_builddir = ..
     9	
    10	# These options get passed to xgettext.
    11	XGETTEXT_OPTIONS = --from-code=UTF-8 --keyword=_ --keyword=N_ --keyword=C_:1c,2 --keyword=NC_:1c,2 --keyword=g_dngettext:2,3 --add-comments
    12	
    13	# This is the copyright holder that gets inserted into the header of the
    14	# $(DOMAIN).pot file.  Set this to the copyright holder of the surrounding
    15	# package.  (Note that the msgstr strings, extracted from the package's
    16	# sources, belong to the copyright holder of the package.)  Translators are
    17	# expected to transfer the copyright for their translations to this person
    18	# or entity, or to disclaim their copyright.  The empty string stands for
    19	# the public domain; in this case the translators are expected to disclaim
    20	# their copyright.
    21	COPYRIGHT_HOLDER = Free Software Foundation, Inc.
    22	
    23	# This tells whether or not to prepend "GNU " prefix to the package
    24	# name that gets inserted into the header of the $(DOMAIN).pot file.
    25	# Possible values are "yes", "no", or empty.  If it is empty, try to
    26	# detect it automatically by scanning the files in $(top_srcdir) for
    27	# "GNU packagename" string.
    28	PACKAGE_GNU =
    29	
    30	# This is the email address or URL to which the translators shall report
    31	# bugs in the untranslated strings:
    32	# - Strings which are not entire sentences, see the maintainer guidelines
    33	#   in the GNU gettext documentation, section 'Preparing Strings'.
    34	# - Strings which use unclear terms or require additional context to be
    35	#   understood.
    36	# - Strings which make invalid assumptions about notation of date, time or
    37	#   money.
    38	# - Pluralisation problems.
    39	# - Incorrect English spelling.
    40	# - Incorrect formatting.
    41	# It can be your email address, or a mailing list address where translators
    42	# can write to without being subscribed, or the URL of a web page through
    43	# which the translators can contact you.
    44	MSGID_BUGS_ADDRESS =
    45	
    46	# This is the list of locale categories, beyond LC_MESSAGES, for which the
    47	# message catalogs shall be used.  It is usually empty.
    48	EXTRA_LOCALE_CATEGORIES =
    49	
    50	# This tells whether the $(DOMAIN).pot file contains messages with an 'msgctxt'
    51	# context.  Possible values are "yes" and "no".  Set this to yes if the
    52	# package uses functions taking also a message context, like pgettext(), or
    53	# if in $(XGETTEXT_OPTIONS) you define keywords with a context argument.
    54	USE_MSGCTXT = yes
    55	
    56	# These options get passed to msgmerge.
    57	# Useful options are in particular:
    58	#   --previous            to keep previous msgids of translated messages,
    59	#   --quiet               to reduce the verbosity.
    60	MSGMERGE_OPTIONS = --quiet
    61	
    62	# These options get passed to msginit.
    63	# If you want to disable line wrapping when writing PO files, add
    64	# --no-wrap to MSGMERGE_OPTIONS, XGETTEXT_OPTIONS, and
    65	# MSGINIT_OPTIONS.
    66	MSGINIT_OPTIONS =
    67	
    68	# This tells whether or not to regenerate a PO file when $(DOMAIN).pot
    69	# has changed.  Possible values are "yes" and "no".  Set this to no if
    70	# the POT file is checked in the repository and the version control
    71	# program ignores timestamps.
    72	PO_DEPENDS_ON_POT = no
    73	
    74	# This tells whether or not to forcibly update $(DOMAIN).pot and
    75	# regenerate PO files on "make dist".  Possible values are "yes" and
    76	# "no".  Set this to no if the POT file and PO files are maintained
    77	# externally.
    78	DIST_DEPENDS_ON_UPDATE_PO = no
--------------------------------------------------------------------------------

File: po/meson.build
--------------------------------------------------------------------------------
     1	i18n.gettext(
     2	  meson.project_name(),
     3	  preset: 'glib',
     4	)
--------------------------------------------------------------------------------

File: po/ms.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# abuyop <abuyop@gmail.com>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: abuyop <abuyop@gmail.com>, 2024\n"
    17	"Language-Team: Malay (https://app.transifex.com/xfce/teams/16840/ms/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: ms\n"
    22	"Plural-Forms: nplurals=1; plural=0;\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Sampel"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Pemalam"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Tidak boleh buka url berikut: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Pemalam Sampel"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Bantuan"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Tutup"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Ini adalah pemalam sampel"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Pemalam sampel untuk panel Xfce"
--------------------------------------------------------------------------------

File: po/nb.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Allan Nordhøy <epost@anotheragency.no>, 2023
     8	# heskjestad, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: heskjestad, 2024\n"
    18	"Language-Team: Norwegian Bokmål (https://app.transifex.com/xfce/teams/16840/nb/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: nb\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Eksempel"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Tillegg"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Klarte ikke å åpne følgende URL: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Eksempelstillegg"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Hjelp"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Lukk"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Dette er et eksempeltillegg"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Eksempel-programtillegg for Xfce-panelet"
--------------------------------------------------------------------------------

File: po/nl.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Pjotr <pjotrvertaalt@gmail.com>, 2024
     8	# Xfce Bot <transifex@xfce.org>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    18	"Language-Team: Dutch (https://app.transifex.com/xfce/teams/16840/nl/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: nl\n"
    23	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Voorbeeld"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Invoegsel"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Kan het volgende webadres niet openen: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Voorbeeldinvoegsel"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Hulp"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Sluiten"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Dit is een voorbeeldinvoegsel"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Voorbeeldinvoegsel voor de Xfce-werkbalk"
--------------------------------------------------------------------------------

File: po/pl.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Marek Adamski, 2024
     8	# Xfce Bot <transifex@xfce.org>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    18	"Language-Team: Polish (https://app.transifex.com/xfce/teams/16840/pl/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: pl\n"
    23	"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Przykład"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Wtyczka"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Nie można otworzyć następującego adresu URL: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Wtyczka przykładowa"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Pomoc"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "Za_mknij"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "To jest wtyczka przykładowa"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Przykładowa wtyczka dla panelu Xfce"
--------------------------------------------------------------------------------

File: po/POTFILES.in
--------------------------------------------------------------------------------
     1	panel-plugin/newtonmenu.c
     2	panel-plugin/newtonmenu-dialogs.c
     3	panel-plugin/newtonmenu.desktop.in
--------------------------------------------------------------------------------

File: po/pt_BR.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Nick Schermer <nick@xfce.org>, 2017
     8	# Xfce Bot <transifex@xfce.org>, 2024
     9	# Andre Miranda <andre@andreldm.com>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Andre Miranda <andre@andreldm.com>, 2024\n"
    19	"Language-Team: Portuguese (Brazil) (https://app.transifex.com/xfce/teams/16840/pt_BR/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: pt_BR\n"
    24	"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Exemplo"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Plug-in"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Não foi possível abrir a seguinte url: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Plug-in de Exemplo"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "A_juda"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "Fechar"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Este é um plug-in de exemplo"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Plug-in de exemplo para o painel do Xfce"
--------------------------------------------------------------------------------

File: po/pt.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Nuno Miguel <nunomgue@gmail.com>, 2023
     8	# Hugo Carvalho <hugokarvalho@hotmail.com>, 2024
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    19	"Language-Team: Portuguese (https://app.transifex.com/xfce/teams/16840/pt/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: pt\n"
    24	"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Amostra"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Plugin"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Incapaz de abrir o seguinte url: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Plugin Amostra"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Ajuda"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "Fe_char"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Este é um plugin amostra"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Plugin amostra para o painel Xfce"
--------------------------------------------------------------------------------

File: po/ro.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Marius Ghita, 2024
     8	# Remus-Gabriel Chelu <remusgabriel.chelu@disroot.org>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Remus-Gabriel Chelu <remusgabriel.chelu@disroot.org>, 2024\n"
    18	"Language-Team: Romanian (https://app.transifex.com/xfce/teams/16840/ro/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: ro\n"
    23	"Plural-Forms: nplurals=3; plural=(n==1?0:(((n%100>19)||((n%100==0)&&(n!=0)))?2:1));\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Exemplu"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Modul"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Nu s-a putut deschide următoarea adresă URL: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Modul de exemplu"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Ajutor"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "În_chide"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Acesta este un modul de exemplu"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Modul de exemplu pentru panoul Xfce"
--------------------------------------------------------------------------------

File: po/ru.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Nick Schermer <nick@xfce.org>, 2017
     8	# Igor <f2404@yandex.ru>, 2023
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    19	"Language-Team: Russian (https://app.transifex.com/xfce/teams/16840/ru/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: ru\n"
    24	"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Пример"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Модуль"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Невозможно открыть ссылку: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Пример модуля"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_помощь"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Закрыть"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Это пример модуля"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Пример модуля для панели Xfce"
--------------------------------------------------------------------------------

File: po/sk.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Jakub Orsula <orsula.jakub@gmail.com>, 2023
     8	# Slavko <linux@slavino.sk>, 2024
     9	# Dušan Kazik <prescott66@gmail.com>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Dušan Kazik <prescott66@gmail.com>, 2024\n"
    19	"Language-Team: Slovak (https://app.transifex.com/xfce/teams/16840/sk/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: sk\n"
    24	"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n == 1 ? 0 : n % 1 == 0 && n >= 2 && n <= 4 ? 1 : n % 1 != 0 ? 2: 3);\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Ukážka"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Zásuvný modul"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Nie je možné otvoriť nasledovnú url: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Ukážkový zásuvný modul"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Pomocník"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Zatvoriť"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Toto je ukážkový zásuvný modul"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Ukážkový zásuvný modul pre Xfce panel"
--------------------------------------------------------------------------------

File: po/sl.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Kernc, 2017
     8	# Nick Schermer <nick@xfce.org>, 2024
     9	# Arnold Marko <arnold.marko@gmail.com>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Arnold Marko <arnold.marko@gmail.com>, 2024\n"
    19	"Language-Team: Slovenian (https://app.transifex.com/xfce/teams/16840/sl/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: sl\n"
    24	"Plural-Forms: nplurals=4; plural=(n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n%100==4 ? 2 : 3);\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Primer"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Vtičnik"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Ni bilo mogoče odpreti URL naslova: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Primer vtičnika"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "Pomo_č"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Zapri"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "To je primer vtičnika"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Primer vtičnika za Xfce pano"
--------------------------------------------------------------------------------

File: po/sq.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Besnik Bleta <besnik@programeshqip.org>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Besnik Bleta <besnik@programeshqip.org>, 2024\n"
    17	"Language-Team: Albanian (https://app.transifex.com/xfce/teams/16840/sq/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: sq\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Shembull"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Shtojcë"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "S’arrihet të hapet url-ja vijuese: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Shtojcë Shembull"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Ndihmë"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Mbylle"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Kjo është një shtojcë shembull"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Shtojcë shembull për panelin Xfce"
--------------------------------------------------------------------------------

File: po/sr.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Nick Schermer <nick@xfce.org>, 2024
     8	# Саша Петровић <salepetronije@gmail.com>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Саша Петровић <salepetronije@gmail.com>, 2024\n"
    18	"Language-Team: Serbian (https://app.transifex.com/xfce/teams/16840/sr/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: sr\n"
    23	"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Узорак"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Прикључак"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Нисам успео да отворим следећу адресу: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Прикључак узорак"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Помоћ"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Затвори"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Ово је прикључак узорак"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Прикључак узорак за полицу Иксфце-а"
--------------------------------------------------------------------------------

File: po/sv.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Påvel Nicklasson <pavel2@frimix.se>, 2024
     8	# 
     9	#, fuzzy
    10	msgid ""
    11	msgstr ""
    12	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    13	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    14	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    15	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    16	"Last-Translator: Påvel Nicklasson <pavel2@frimix.se>, 2024\n"
    17	"Language-Team: Swedish (https://app.transifex.com/xfce/teams/16840/sv/)\n"
    18	"MIME-Version: 1.0\n"
    19	"Content-Type: text/plain; charset=UTF-8\n"
    20	"Content-Transfer-Encoding: 8bit\n"
    21	"Language: sv\n"
    22	"Plural-Forms: nplurals=2; plural=(n != 1);\n"
    23	
    24	#. some sample widgets
    25	#: panel-plugin/sample.c:161
    26	msgid "Sample"
    27	msgstr "Exempel"
    28	
    29	#: panel-plugin/sample.c:165
    30	msgid "Plugin"
    31	msgstr "Insticksprogram"
    32	
    33	#: panel-plugin/sample-dialogs.c:51
    34	#, c-format
    35	msgid "Unable to open the following url: %s"
    36	msgstr "Det gick inte att öppna följande url: %s"
    37	
    38	#. create the dialog
    39	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    40	msgid "Sample Plugin"
    41	msgstr "Exempelinsticksprogram"
    42	
    43	#: panel-plugin/sample-dialogs.c:84
    44	msgid "_Help"
    45	msgstr "_Hjälp"
    46	
    47	#: panel-plugin/sample-dialogs.c:85
    48	msgid "_Close"
    49	msgstr "_Stäng"
    50	
    51	#: panel-plugin/sample-dialogs.c:124
    52	msgid "This is a sample plugin"
    53	msgstr "Detta är ett exempelinsticksprogram"
    54	
    55	#: panel-plugin/sample.desktop.in:6
    56	msgid "Sample plugin for the Xfce panel"
    57	msgstr "Exempelinsticksprogram för Xfce-panelen"
--------------------------------------------------------------------------------

File: po/tr.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Emin Tufan Çetin <etcetin@gmail.com>, 2020
     8	# Necdet Yücel <necdetyucel@gmail.com>, 2023
     9	# Xfce Bot <transifex@xfce.org>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: Xfce Bot <transifex@xfce.org>, 2024\n"
    19	"Language-Team: Turkish (https://app.transifex.com/xfce/teams/16840/tr/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: tr\n"
    24	"Plural-Forms: nplurals=2; plural=(n > 1);\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "Örnek"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "Eklenti"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "Bu url açılamadı: %s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "Örnek Eklenti"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "_Yardım"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "_Kapat"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "Bu, örnek eklentidir"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Xfce paneli için örnek eklenti"
--------------------------------------------------------------------------------

File: po/uk.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Nick Schermer <nick@xfce.org>, 2024
     8	# Yarema aka Knedlyk <yupadmin@gmail.com>, 2024
     9	# 
    10	#, fuzzy
    11	msgid ""
    12	msgstr ""
    13	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    14	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    15	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    16	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    17	"Last-Translator: Yarema aka Knedlyk <yupadmin@gmail.com>, 2024\n"
    18	"Language-Team: Ukrainian (https://app.transifex.com/xfce/teams/16840/uk/)\n"
    19	"MIME-Version: 1.0\n"
    20	"Content-Type: text/plain; charset=UTF-8\n"
    21	"Content-Transfer-Encoding: 8bit\n"
    22	"Language: uk\n"
    23	"Plural-Forms: nplurals=4; plural=(n % 1 == 0 && n % 10 == 1 && n % 100 != 11 ? 0 : n % 1 == 0 && n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 12 || n % 100 > 14) ? 1 : n % 1 == 0 && (n % 10 ==0 || (n % 10 >=5 && n % 10 <=9) || (n % 100 >=11 && n % 100 <=14 )) ? 2: 3);\n"
    24	
    25	#. some sample widgets
    26	#: panel-plugin/sample.c:161
    27	msgid "Sample"
    28	msgstr "Прикладовий"
    29	
    30	#: panel-plugin/sample.c:165
    31	msgid "Plugin"
    32	msgstr "Плагін"
    33	
    34	#: panel-plugin/sample-dialogs.c:51
    35	#, c-format
    36	msgid "Unable to open the following url: %s"
    37	msgstr "Не вдалося відкрити таке посилання: %s"
    38	
    39	#. create the dialog
    40	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    41	msgid "Sample Plugin"
    42	msgstr "Прикладовий плагін"
    43	
    44	#: panel-plugin/sample-dialogs.c:84
    45	msgid "_Help"
    46	msgstr "_Допомога"
    47	
    48	#: panel-plugin/sample-dialogs.c:85
    49	msgid "_Close"
    50	msgstr "_Закрити"
    51	
    52	#: panel-plugin/sample-dialogs.c:124
    53	msgid "This is a sample plugin"
    54	msgstr "Це є прикладовий плагін"
    55	
    56	#: panel-plugin/sample.desktop.in:6
    57	msgid "Sample plugin for the Xfce panel"
    58	msgstr "Прикладовий плагін для панелі Xfce"
--------------------------------------------------------------------------------

File: po/zh_CN.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# 916b300d72c9f404e033ca28026e4c57_4fab4b5, 2023
     8	# Nick Schermer <nick@xfce.org>, 2024
     9	# 玉堂白鹤 <yjwork@qq.com>, 2024
    10	# 
    11	#, fuzzy
    12	msgid ""
    13	msgstr ""
    14	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    15	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    16	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    17	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    18	"Last-Translator: 玉堂白鹤 <yjwork@qq.com>, 2024\n"
    19	"Language-Team: Chinese (China) (https://app.transifex.com/xfce/teams/16840/zh_CN/)\n"
    20	"MIME-Version: 1.0\n"
    21	"Content-Type: text/plain; charset=UTF-8\n"
    22	"Content-Transfer-Encoding: 8bit\n"
    23	"Language: zh_CN\n"
    24	"Plural-Forms: nplurals=1; plural=0;\n"
    25	
    26	#. some sample widgets
    27	#: panel-plugin/sample.c:161
    28	msgid "Sample"
    29	msgstr "示例"
    30	
    31	#: panel-plugin/sample.c:165
    32	msgid "Plugin"
    33	msgstr "插件"
    34	
    35	#: panel-plugin/sample-dialogs.c:51
    36	#, c-format
    37	msgid "Unable to open the following url: %s"
    38	msgstr "未能打开以下 url：%s"
    39	
    40	#. create the dialog
    41	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    42	msgid "Sample Plugin"
    43	msgstr "示例插件"
    44	
    45	#: panel-plugin/sample-dialogs.c:84
    46	msgid "_Help"
    47	msgstr "帮助(_H)"
    48	
    49	#: panel-plugin/sample-dialogs.c:85
    50	msgid "_Close"
    51	msgstr "关闭(_C)"
    52	
    53	#: panel-plugin/sample-dialogs.c:124
    54	msgid "This is a sample plugin"
    55	msgstr "这是一个示例插件"
    56	
    57	#: panel-plugin/sample.desktop.in:6
    58	msgid "Sample plugin for the Xfce panel"
    59	msgstr "Xfce面板的示例插件"
--------------------------------------------------------------------------------

File: po/zh_TW.po
--------------------------------------------------------------------------------
     1	# SOME DESCRIPTIVE TITLE.
     2	# Copyright (C) YEAR Xfce
     3	# This file is distributed under the same license as the xfce-panel-plugins.xfce4-sample-plugin package.
     4	# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
     5	# 
     6	# Translators:
     7	# Walter Cheuk <wwycheuk@gmail.com>, 2017
     8	# 黃柏諺 <s8321414@gmail.com>, 2023
     9	# Nick Schermer <nick@xfce.org>, 2024
    10	# pan93412 <pan93412@gmail.com>, 2024
    11	# 
    12	#, fuzzy
    13	msgid ""
    14	msgstr ""
    15	"Project-Id-Version: xfce-panel-plugins.xfce4-sample-plugin\n"
    16	"Report-Msgid-Bugs-To: https://gitlab.xfce.org/\n"
    17	"POT-Creation-Date: 2024-12-24 00:53+0100\n"
    18	"PO-Revision-Date: 2017-07-25 11:30+0000\n"
    19	"Last-Translator: pan93412 <pan93412@gmail.com>, 2024\n"
    20	"Language-Team: Chinese (Taiwan) (https://app.transifex.com/xfce/teams/16840/zh_TW/)\n"
    21	"MIME-Version: 1.0\n"
    22	"Content-Type: text/plain; charset=UTF-8\n"
    23	"Content-Transfer-Encoding: 8bit\n"
    24	"Language: zh_TW\n"
    25	"Plural-Forms: nplurals=1; plural=0;\n"
    26	
    27	#. some sample widgets
    28	#: panel-plugin/sample.c:161
    29	msgid "Sample"
    30	msgstr "樣本"
    31	
    32	#: panel-plugin/sample.c:165
    33	msgid "Plugin"
    34	msgstr "外掛程式"
    35	
    36	#: panel-plugin/sample-dialogs.c:51
    37	#, c-format
    38	msgid "Unable to open the following url: %s"
    39	msgstr "無法開啟以下 URL：%s"
    40	
    41	#. create the dialog
    42	#: panel-plugin/sample-dialogs.c:81 panel-plugin/sample.desktop.in:5
    43	msgid "Sample Plugin"
    44	msgstr "樣本外掛程式"
    45	
    46	#: panel-plugin/sample-dialogs.c:84
    47	msgid "_Help"
    48	msgstr "說明(_H)"
    49	
    50	#: panel-plugin/sample-dialogs.c:85
    51	msgid "_Close"
    52	msgstr "關閉(_C)"
    53	
    54	#: panel-plugin/sample-dialogs.c:124
    55	msgid "This is a sample plugin"
    56	msgstr "這是一個樣本外掛程式"
    57	
    58	#: panel-plugin/sample.desktop.in:6
    59	msgid "Sample plugin for the Xfce panel"
    60	msgstr "Xfce 面板的樣本外掛程式"
--------------------------------------------------------------------------------

File: README.md
--------------------------------------------------------------------------------
     1	[![License](https://img.shields.io/badge/License-GPL%20v2-blue.svg)](https://gitlab.xfce.org/panel-plugins/xfce4-newtonmenu-plugin/-/blob/master/COPYING)
     2	
     3	# Xfce4 newtonmenu Plugin
     4	
     5	The Xfce4 newtonmenu Plugin provides a macOS-style application and session menu for the Xfce panel (version 4.16 or higher). It offers quick access to system actions and session management.
     6	
     7	![newtonmenu Screenshot](image.png)
     8	
     9	## Features
    10	
    11	*   **macOS-like Menu:** A single button to access common system and session actions.
    12	*   **Configurable Appearance:**
    13	    *   Display either an icon or a text label on the panel button.
    14	    *   Choose a custom icon (themed or full path) or set custom label text.
    15	*   **Menu Actions:**
    16	    *   About This PC
    17	    *   System Settings
    18	    *   App Store (placeholder - to be configured by user or future update)
    19	    *   Force Quit (invokes `xkill`)
    20	    *   Sleep
    21	    *   Restart
    22	    *   Shut Down
    23	    *   Lock Screen
    24	    *   Log Out (displays current username)
    25	*   **Configurable Confirmations:** Choose whether to display confirmation dialogs for Log Out, Restart, Shut Down, and Force Quit actions.
    26	
    27	## Requirements
    28	
    29	*   Xfce Panel 4.16 or higher
    30	*   GTK+ 3.24 or higher
    31	*   GLib 2.66 or higher
    32	*   libxfce4ui-2 4.16 or higher
    33	*   libxfce4util-1.0 4.16 or higher
    34	*   libxfce4panel-2.0 4.16 or higher
    35	*   exo-2 0.12.0 or higher (for icon chooser dialog)
    36	
    37	## Installation
    38	
    39	### From Source Code Repository (using Meson - Recommended)
    40	
    41	1.  Clone the repository:
    42	    ```bash
    43	    git clone <your_repository_url> xfce4-newtonmenu-plugin
    44	    cd xfce4-newtonmenu-plugin
    45	    ```
    46	2.  Build and install using Meson:
    47	    ```bash
    48	    meson setup builddir
    49	    meson compile -C builddir
    50	    sudo meson install -C builddir
    51	    ```
    52	3.  Restart the Xfce Panel:
    53	    ```bash
    54	    xfce4-panel -r
    55	    ```
    56	
    57	### From Source Code Repository (using Autotools - if applicable)
    58	
    59	    % cd xfce4-newtonmenu-plugin
    60	    % ./autogen.sh
    61	    % make
    62	    % sudo make install
    63	    % xfce4-panel -r
    64	
    65	After installation, right-click on the Xfce panel, choose "Panel" -> "Add New Items", and select "Newton Button Plugin" from the list.
    66	
    67	## Configuration
    68	
    69	Right-click on the Newton Button on the panel and select "Properties" to configure:
    70	*   **Button Appearance:**
    71	    *   Choose between displaying an icon or text.
    72	    *   Set the icon name/path or label text.
    73	*   **Action Confirmations:**
    74	    *   Enable or disable confirmation dialogs for potentially disruptive actions like Log Out, Restart, Shut Down, and Force Quit.
    75	
    76	## Reporting Bugs
    77	
    78	Please report any bugs or feature requests on the [GitLab issue tracker](<your_gitlab_project_url>/-/issues).
    79	
    80	---
    81	
    82	*This plugin is inspired by the desire for a simple, integrated system menu similar to those found on other desktop environments.*
--------------------------------------------------------------------------------

File: THANKS
--------------------------------------------------------------------------------
     1	What's this file about?
     2	-----------------------
     3	This file lists all external people that have contributed to this project and
     4	thereby helped to make the newtonmenu project such a successful project.
     5	
     6	
     7	Translators (sorted by language):
     8	----------------------------------
     9	These people have translated the newtonmenu plugin to foreign languages.
    10	
    11	 John Doo <john@foo.org>
    12	 * be translations
    13	
    14	 Foo Bar <bar@foo.org>
    15	 * nl translations
    16	
    17	
    18	Other contributors (sorted by name):
    19	------------------------------------
    20	
    21	 Foo Bar <bar@foo.org>
    22	 * patches
--------------------------------------------------------------------------------

File: TODO
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

File: xfce-revision.h.in
--------------------------------------------------------------------------------
     1	/*
     2	 * The file xfce-revision.h is auto-generated and should not be modified
     3	 * directly.  Modify the xfce-revision.h.in file and re-run the build
     4	 * instead.
     5	 */
     6	
     7	#ifndef INC_XFCE_REVISION_H
     8	#define INC_XFCE_REVISION_H
     9	
    10	#define REVISION "@REVISION@"
    11	
    12	#define VERSION_FULL VERSION "-" REVISION
    13	#define PACKAGE_STRING_FULL PACKAGE " " VERSION_FULL
    14	
    15	#endif /* INC_XFCE_REVISION_H */
--------------------------------------------------------------------------------
