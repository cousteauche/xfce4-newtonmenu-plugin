# Generated by LLM - DO NOT EDIT
project(
  'xfce4-newtonmenu-plugin',
  'c',
  version: '0.0.4-dev',
  license: 'GPL-2.0-or-later',
  meson_version: '>= 0.54.0',
  default_options: [
    'c_std=gnu11',
    'buildtype=debugoptimized',
    'warning_level=2',
  ]
)

project_namespace = 'panel-plugins'
pkgdatadir = get_option('prefix') / get_option('datadir') / meson.project_name()
copyright_year = '2025'

cc = meson.get_compiler('c')
pkgconfig = import('pkgconfig')
gnome = import('gnome')
i18n = import('i18n')

dependency_versions = {
  'glib': '>= 2.66.0',
  'gtk': '>= 3.24.0',
  'xfce4': '>= 4.16.0',
  'libwnck': '>= 3.4.8',
  # Use the correct pkg-config name for libdbusmenu-glib
  'dbusmenu-glib-0.4': '>= 0.6.0', # Updated min version if necessary, otherwise common is 0.6.0
}

glib = dependency('glib-2.0', version: dependency_versions['glib'])
gtk = dependency('gtk+-3.0', version: dependency_versions['gtk'])
libxfce4panel = dependency('libxfce4panel-2.0', version: dependency_versions['xfce4'])
libxfce4ui = dependency('libxfce4ui-2', version: dependency_versions['xfce4'])
libxfce4util = dependency('libxfce4util-1.0', version: dependency_versions['xfce4'])
libwnck_dep = dependency('libwnck-3.0', version: dependency_versions['libwnck'])

# Use the explicitly corrected pkg-config name for libdbusmenu-glib
libdbusmenu_glib_dep = dependency('dbusmenu-glib-0.4', version: dependency_versions['dbusmenu-glib-0.4'])


feature_cflags = []
if cc.check_header('string.h')
  feature_cflags += '-DHAVE_STRING_H=1'
endif

extra_cflags = []
extra_cflags_check = [
  '-Wmissing-declarations',
  '-Wmissing-noreturn',
  '-Wold-style-definition',
  '-Wredundant-decls',
  '-Wpointer-arith',
  '-Wcast-align',
  '-Winit-self',
  '-Wshadow',
  '-Wmissing-include-dirs',
  # The below warnings are usually covered by -Wformat and -Wformat-security with modern GCC.
  # If a compiler specific warning like -Wformat-y2k exists and is desired, keep it.
  # For generality, I'm removing the non-standard or highly specific ones
  # that might not be supported everywhere, and keeping the core ones.
  '-Wundef',
  '-Wformat',
  '-Wformat-security',
  '-Wnested-externs',
  # These are often used to suppress warnings for common patterns, so keep them.
  '-Wno-unused-parameter',
  '-Wno-declaration-after-statement',
  '-Wno-missing-field-initializers',
  # Convert specific errors to warnings or keep as errors based on preference.
  # 'implicit-function-declaration' as error is good for catching missing includes.
  '-Werror=implicit-function-declaration',
  # 'deprecated-declarations' as error can be too strict for existing codebases.
  '-Wno-error=deprecated-declarations',
]
# Only add '-Wformat-y2k' if supported, as it's not universally available and can cause build failures.
if cc.has_argument('-Wformat-y2k')
  extra_cflags_check += '-Wformat-y2k'
endif


optimization = get_option('optimization')
if get_option('debug') and optimization in ['0', 'g']
  extra_cflags_check += '-fstack-protector-strong'
  extra_cflags += [
    '-DDEBUG=1',
    '-DDEBUG_TRACE=1',
    '-DG_ENABLE_DEBUG',
  ]
elif optimization in ['3', 'minsize']
  extra_cflags += [
    '-DNDEBUG',
    '-DG_DISABLE_CAST_CHECKS',
    '-DG_DISABLE_ASSERT',
  ]
endif

if dependency_versions.has_key('glib')
  glib_version_parts = dependency_versions['glib'].split(' ')
  # Assuming format like '>= 2.66.0'
  glib_min_version_parts = glib_version_parts[1].split('.')
  glib_min_version_define = 'GLIB_VERSION_@0@_@1@'.format(glib_min_version_parts[0], glib_min_version_parts[1])
  extra_cflags += [
    '-DGLIB_VERSION_MIN_REQUIRED=@0@'.format(glib_min_version_define),
    '-DGLIB_VERSION_MAX_ALLOWED=@0@'.format(glib_min_version_define),
    '-DG_LOG_DOMAIN="@0@"'.format(meson.project_name()),
    '-DG_LOG_USE_STRUCTURED=1',
  ]
endif

version_parts = meson.project_version().split('-dev')[0].split('.')
version_short = '@0@.@1@'.format(version_parts[0], version_parts[1])

extra_cflags += [
  '-DPACKAGE="@0@"'.format(meson.project_name()),
  '-DPACKAGE_NAME="@0@"'.format(meson.project_name()),
  '-DPACKAGE_VERSION="@0@"'.format(meson.project_version()),
  '-DVERSION="@0@"'.format(meson.project_version()),
  '-DVERSION_SHORT="@0@"'.format(version_short),
  '-DPACKAGE_STRING="@0@ @1@"'.format(meson.project_name(), meson.project_version()),
  '-DPACKAGE_DATADIR="@0@"'.format(pkgdatadir),
  '-DCOPYRIGHT_YEAR="@0@"'.format(copyright_year),
  '-DPACKAGE_LOCALE_DIR="@0@"'.format(get_option('prefix') / get_option('localedir')),
  '-DPACKAGE_URL="https://docs.xfce.org/@0@/@1@/start"'.format(project_namespace, meson.project_name()),
  '-DPACKAGE_BUGREPORT="https://gitlab.xfce.org/@0@/@1@/-/issues"'.format(project_namespace, meson.project_name()),
  '-DGETTEXT_PACKAGE="@0@"'.format(meson.project_name()),
  '-DPREFIX="@0@"'.format(get_option('prefix')),
  '-DBINDIR="@0@"'.format(get_option('prefix') / get_option('bindir')),
  '-DDATADIR="@0@"'.format(get_option('prefix') / get_option('datadir')),
  '-DDOCDIR="@0@"'.format(get_option('prefix') / 'doc' / meson.project_name()),
  '-DINCLUDEDIR="@0@"'.format(get_option('prefix') / get_option('includedir')),
  '-DLIBDIR="@0@"'.format(get_option('prefix') / get_option('libdir')),
  '-DLIBEXECDIR="@0@"'.format(get_option('prefix') / get_option('libexecdir')),
  '-DLOCALEDIR="@0@"'.format(get_option('prefix') / get_option('localedir')),
  '-DLOCALSTATEDIR="@0@"'.format(get_option('prefix') / get_option('localstatedir')),
  '-DSBINDIR="@0@"'.format(get_option('prefix') / get_option('sbindir')),
  '-DSYSCONFDIR="@0@"'.format(get_option('prefix') / get_option('sysconfdir')),
  '-DHAVE_XFCE_REVISION_H=1',
]

add_project_arguments(cc.get_supported_arguments(extra_cflags_check), language: 'c')
add_project_arguments(feature_cflags, language: 'c')
add_project_arguments(extra_cflags, language: 'c')

xfce_revision_h = vcs_tag(
  command: ['git', 'rev-parse', '--short', 'HEAD'],
  fallback: 'UNKNOWN',
  input: 'xfce-revision.h.in',
  output: 'xfce-revision.h',
  replace_string: '@REVISION@',
)

# --- CORRECTED: Ensure subproject is configured to build necessary components and is accessible ---
# The subproject `vala-panel-appmenu` needs to be properly configured to build its
# `appmenu-glib-translator` (which provides libdbusmenu-glib C bindings and components)
# and use `libwnck` as its backend.
# The `appmenu_dep` variable from the subproject should then provide the necessary
# link_with and include_directories for `xfce4-newtonmenu-plugin` to consume it.
valapanel_appmenu_proj = subproject('external/vala-panel-appmenu',
    default_options: [
        'xfce=enabled', # Builds the xfce4-plugin-appmenu, which pulls in necessary libs.
                        # It's good to keep this enabled to ensure the submodule's features are built.
                        # The newtonmenu plugin will link against the underlying libs, not load the appmenu-xfce plugin directly.
        'appmenu-gtk-module=enabled', # Ensures GTK modules are built, which often depend on libdbusmenu-glib itself.
        'registrar=enabled', # Builds the AppMenu Registrar D-Bus service. Necessary for apps to register their menus.
        'jayatana=enabled', # Java support
        'wm_backend=wnck', # Explicitly use wnck for window tracking
        'budgie=disabled', # Disable other panel integrations
        'mate=disabled',
        'valapanel=disabled',
    ]
)

# Retrieve the core appmenu dependency exposed by the subproject.
# This should include linkage to libdbusmenu-glib components and helper functions.
appmenu_core_dep = valapanel_appmenu_proj.get_variable('appmenu_dep')


subdir('icons')
subdir('panel-plugin')
subdir('po')